var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports2, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id, v) {
          return exports3[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        throw Object.assign(error, { $response: response });
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(deserializerMiddleware_1.deserializerMiddleware(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware_1.serializerMiddleware(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, __spreadValues({}, entry));
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, __spreadValues({}, entry));
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = __spreadValues({
            step: "initialize",
            priority: "normal",
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = __spreadValues({
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(exports2.constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo(exports2.constructStack());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = middleware_stack_1.constructStack();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = middleware_stack_1.constructStack();
      }
    };
    exports2.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = exports2.expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = exports2.expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(`Expected object, got ${typeof value}`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      throw new TypeError(`Expected string, got ${typeof value}`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = exports2.expectObject(value);
      const setKeys = Object.entries(asObject).filter(([_, v]) => v !== null && v !== void 0).map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return exports2.expectNumber(parseNumber(value));
      }
      return exports2.expectNumber(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return exports2.expectFloat32(parseNumber(value));
      }
      return exports2.expectFloat32(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return exports2.expectNumber(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return exports2.expectFloat32(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return exports2.expectLong(parseNumber(value));
      }
      return exports2.expectLong(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return exports2.expectInt32(parseNumber(value));
      }
      return exports2.expectInt32(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return exports2.expectShort(parseNumber(value));
      }
      return exports2.expectShort(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return exports2.expectByte(parseNumber(value));
      }
      return exports2.expectByte(value);
    };
    exports2.strictParseByte = strictParseByte;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = parse_utils_1.strictParseDouble(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + parse_utils_1.strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = parse_utils_1.strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return parse_utils_1.strictParseFloat32("0." + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 12) {
        warningEmitted = true;
        process.emitWarning(`The AWS SDK for JavaScript (v3) will
no longer support Node.js ${version} as of January 1, 2022.
To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 12.x or later.

More information can be found at: https://a.co/1l6FLnu`, `NodeDeprecationWarning`);
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = exports2.getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_constants(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/models/SESServiceException.js
var require_SESServiceException = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/models/SESServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SESServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SESServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SESServiceException.prototype);
      }
    };
    exports2.SESServiceException = SESServiceException;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CustomVerificationEmailInvalidContentException = exports2.CreateCustomVerificationEmailTemplateRequest = exports2.TrackingOptionsAlreadyExistsException = exports2.InvalidTrackingOptionsException = exports2.CreateConfigurationSetTrackingOptionsResponse = exports2.CreateConfigurationSetTrackingOptionsRequest = exports2.TrackingOptions = exports2.InvalidSNSDestinationException = exports2.InvalidFirehoseDestinationException = exports2.InvalidCloudWatchDestinationException = exports2.EventDestinationAlreadyExistsException = exports2.CreateConfigurationSetEventDestinationResponse = exports2.CreateConfigurationSetEventDestinationRequest = exports2.EventDestination = exports2.SNSDestination = exports2.EventType = exports2.KinesisFirehoseDestination = exports2.InvalidConfigurationSetException = exports2.CreateConfigurationSetResponse = exports2.CreateConfigurationSetRequest = exports2.ConfigurationSetSendingPausedException = exports2.ConfigurationSetDoesNotExistException = exports2.ConfigurationSetAttribute = exports2.ConfigurationSetAlreadyExistsException = exports2.ConfigurationSet = exports2.CloudWatchDestination = exports2.CloudWatchDimensionConfiguration = exports2.DimensionValueSource = exports2.RuleSetDoesNotExistException = exports2.LimitExceededException = exports2.CloneReceiptRuleSetResponse = exports2.CloneReceiptRuleSetRequest = exports2.CannotDeleteException = exports2.BulkEmailDestinationStatus = exports2.BulkEmailStatus = exports2.BulkEmailDestination = exports2.MessageTag = exports2.Destination = exports2.BouncedRecipientInfo = exports2.RecipientDsnFields = exports2.ExtensionField = exports2.DsnAction = exports2.BounceType = exports2.BounceAction = exports2.Body = exports2.Content = exports2.BehaviorOnMXFailure = exports2.AlreadyExistsException = exports2.AddHeaderAction = exports2.AccountSendingPausedException = void 0;
    exports2.DeleteReceiptRuleSetRequest = exports2.DeleteReceiptRuleResponse = exports2.DeleteReceiptRuleRequest = exports2.DeleteReceiptFilterResponse = exports2.DeleteReceiptFilterRequest = exports2.DeleteIdentityPolicyResponse = exports2.DeleteIdentityPolicyRequest = exports2.DeleteIdentityResponse = exports2.DeleteIdentityRequest = exports2.DeleteCustomVerificationEmailTemplateRequest = exports2.TrackingOptionsDoesNotExistException = exports2.DeleteConfigurationSetTrackingOptionsResponse = exports2.DeleteConfigurationSetTrackingOptionsRequest = exports2.EventDestinationDoesNotExistException = exports2.DeleteConfigurationSetEventDestinationResponse = exports2.DeleteConfigurationSetEventDestinationRequest = exports2.DeleteConfigurationSetResponse = exports2.DeleteConfigurationSetRequest = exports2.CustomVerificationEmailTemplateDoesNotExistException = exports2.CustomVerificationEmailTemplate = exports2.CustomMailFromStatus = exports2.InvalidTemplateException = exports2.CreateTemplateResponse = exports2.CreateTemplateRequest = exports2.Template = exports2.CreateReceiptRuleSetResponse = exports2.CreateReceiptRuleSetRequest = exports2.RuleDoesNotExistException = exports2.InvalidSnsTopicException = exports2.InvalidS3ConfigurationException = exports2.InvalidLambdaFunctionException = exports2.CreateReceiptRuleResponse = exports2.CreateReceiptRuleRequest = exports2.ReceiptRule = exports2.TlsPolicy = exports2.ReceiptAction = exports2.WorkmailAction = exports2.StopAction = exports2.StopScope = exports2.SNSAction = exports2.SNSActionEncoding = exports2.S3Action = exports2.LambdaAction = exports2.CreateReceiptFilterResponse = exports2.CreateReceiptFilterRequest = exports2.ReceiptFilter = exports2.ReceiptIpFilter = exports2.ReceiptFilterPolicy = exports2.FromEmailAddressNotVerifiedException = exports2.CustomVerificationEmailTemplateAlreadyExistsException = void 0;
    exports2.ListReceiptFiltersRequest = exports2.ListIdentityPoliciesResponse = exports2.ListIdentityPoliciesRequest = exports2.ListIdentitiesResponse = exports2.ListIdentitiesRequest = exports2.ListCustomVerificationEmailTemplatesResponse = exports2.ListCustomVerificationEmailTemplatesRequest = exports2.ListConfigurationSetsResponse = exports2.ListConfigurationSetsRequest = exports2.InvalidRenderingParameterException = exports2.InvalidPolicyException = exports2.InvalidDeliveryOptionsException = exports2.TemplateDoesNotExistException = exports2.GetTemplateResponse = exports2.GetTemplateRequest = exports2.GetSendStatisticsResponse = exports2.SendDataPoint = exports2.GetSendQuotaResponse = exports2.GetIdentityVerificationAttributesResponse = exports2.IdentityVerificationAttributes = exports2.GetIdentityVerificationAttributesRequest = exports2.GetIdentityPoliciesResponse = exports2.GetIdentityPoliciesRequest = exports2.GetIdentityNotificationAttributesResponse = exports2.IdentityNotificationAttributes = exports2.GetIdentityNotificationAttributesRequest = exports2.GetIdentityMailFromDomainAttributesResponse = exports2.IdentityMailFromDomainAttributes = exports2.GetIdentityMailFromDomainAttributesRequest = exports2.GetIdentityDkimAttributesResponse = exports2.GetIdentityDkimAttributesRequest = exports2.GetCustomVerificationEmailTemplateResponse = exports2.GetCustomVerificationEmailTemplateRequest = exports2.GetAccountSendingEnabledResponse = exports2.IdentityDkimAttributes = exports2.DescribeReceiptRuleSetResponse = exports2.DescribeReceiptRuleSetRequest = exports2.DescribeReceiptRuleResponse = exports2.DescribeReceiptRuleRequest = exports2.DescribeConfigurationSetResponse = exports2.ReputationOptions = exports2.DescribeConfigurationSetRequest = exports2.DescribeActiveReceiptRuleSetResponse = exports2.ReceiptRuleSetMetadata = exports2.DescribeActiveReceiptRuleSetRequest = exports2.DeliveryOptions = exports2.DeleteVerifiedEmailAddressRequest = exports2.DeleteTemplateResponse = exports2.DeleteTemplateRequest = exports2.DeleteReceiptRuleSetResponse = void 0;
    exports2.UpdateConfigurationSetEventDestinationRequest = exports2.UpdateAccountSendingEnabledRequest = exports2.TestRenderTemplateResponse = exports2.TestRenderTemplateRequest = exports2.SetReceiptRulePositionResponse = exports2.SetReceiptRulePositionRequest = exports2.SetIdentityNotificationTopicResponse = exports2.SetIdentityNotificationTopicRequest = exports2.SetIdentityMailFromDomainResponse = exports2.SetIdentityMailFromDomainRequest = exports2.SetIdentityHeadersInNotificationsEnabledResponse = exports2.SetIdentityHeadersInNotificationsEnabledRequest = exports2.SetIdentityFeedbackForwardingEnabledResponse = exports2.SetIdentityFeedbackForwardingEnabledRequest = exports2.SetIdentityDkimEnabledResponse = exports2.SetIdentityDkimEnabledRequest = exports2.SetActiveReceiptRuleSetResponse = exports2.SetActiveReceiptRuleSetRequest = exports2.SendTemplatedEmailResponse = exports2.SendTemplatedEmailRequest = exports2.SendRawEmailResponse = exports2.SendRawEmailRequest = exports2.SendEmailResponse = exports2.SendEmailRequest = exports2.SendCustomVerificationEmailResponse = exports2.SendCustomVerificationEmailRequest = exports2.SendBulkTemplatedEmailResponse = exports2.SendBulkTemplatedEmailRequest = exports2.SendBounceResponse = exports2.SendBounceRequest = exports2.ReorderReceiptRuleSetResponse = exports2.ReorderReceiptRuleSetRequest = exports2.RawMessage = exports2.PutIdentityPolicyResponse = exports2.PutIdentityPolicyRequest = exports2.PutConfigurationSetDeliveryOptionsResponse = exports2.PutConfigurationSetDeliveryOptionsRequest = exports2.ProductionAccessNotGrantedException = exports2.MissingRenderingAttributeException = exports2.MessageRejected = exports2.MessageDsn = exports2.Message = exports2.MailFromDomainNotVerifiedException = exports2.ListVerifiedEmailAddressesResponse = exports2.ListTemplatesResponse = exports2.TemplateMetadata = exports2.ListTemplatesRequest = exports2.ListReceiptRuleSetsResponse = exports2.ListReceiptRuleSetsRequest = exports2.ListReceiptFiltersResponse = void 0;
    exports2.VerifyEmailIdentityResponse = exports2.VerifyEmailIdentityRequest = exports2.VerifyEmailAddressRequest = exports2.VerifyDomainIdentityResponse = exports2.VerifyDomainIdentityRequest = exports2.VerifyDomainDkimResponse = exports2.VerifyDomainDkimRequest = exports2.UpdateTemplateResponse = exports2.UpdateTemplateRequest = exports2.UpdateReceiptRuleResponse = exports2.UpdateReceiptRuleRequest = exports2.UpdateCustomVerificationEmailTemplateRequest = exports2.UpdateConfigurationSetTrackingOptionsResponse = exports2.UpdateConfigurationSetTrackingOptionsRequest = exports2.UpdateConfigurationSetSendingEnabledRequest = exports2.UpdateConfigurationSetReputationMetricsEnabledRequest = exports2.UpdateConfigurationSetEventDestinationResponse = void 0;
    var SESServiceException_1 = require_SESServiceException();
    var AccountSendingPausedException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AccountSendingPausedException",
          $fault: "client"
        }, opts));
        this.name = "AccountSendingPausedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountSendingPausedException.prototype);
      }
    };
    exports2.AccountSendingPausedException = AccountSendingPausedException;
    var AddHeaderAction;
    (function(AddHeaderAction2) {
      AddHeaderAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddHeaderAction = exports2.AddHeaderAction || (exports2.AddHeaderAction = {}));
    var AlreadyExistsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Name = opts.Name;
      }
    };
    exports2.AlreadyExistsException = AlreadyExistsException;
    var BehaviorOnMXFailure;
    (function(BehaviorOnMXFailure2) {
      BehaviorOnMXFailure2["RejectMessage"] = "RejectMessage";
      BehaviorOnMXFailure2["UseDefaultValue"] = "UseDefaultValue";
    })(BehaviorOnMXFailure = exports2.BehaviorOnMXFailure || (exports2.BehaviorOnMXFailure = {}));
    var Content;
    (function(Content2) {
      Content2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Content = exports2.Content || (exports2.Content = {}));
    var Body;
    (function(Body2) {
      Body2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Body = exports2.Body || (exports2.Body = {}));
    var BounceAction;
    (function(BounceAction2) {
      BounceAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BounceAction = exports2.BounceAction || (exports2.BounceAction = {}));
    var BounceType;
    (function(BounceType2) {
      BounceType2["ContentRejected"] = "ContentRejected";
      BounceType2["DoesNotExist"] = "DoesNotExist";
      BounceType2["ExceededQuota"] = "ExceededQuota";
      BounceType2["MessageTooLarge"] = "MessageTooLarge";
      BounceType2["TemporaryFailure"] = "TemporaryFailure";
      BounceType2["Undefined"] = "Undefined";
    })(BounceType = exports2.BounceType || (exports2.BounceType = {}));
    var DsnAction;
    (function(DsnAction2) {
      DsnAction2["DELAYED"] = "delayed";
      DsnAction2["DELIVERED"] = "delivered";
      DsnAction2["EXPANDED"] = "expanded";
      DsnAction2["FAILED"] = "failed";
      DsnAction2["RELAYED"] = "relayed";
    })(DsnAction = exports2.DsnAction || (exports2.DsnAction = {}));
    var ExtensionField;
    (function(ExtensionField2) {
      ExtensionField2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExtensionField = exports2.ExtensionField || (exports2.ExtensionField = {}));
    var RecipientDsnFields;
    (function(RecipientDsnFields2) {
      RecipientDsnFields2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RecipientDsnFields = exports2.RecipientDsnFields || (exports2.RecipientDsnFields = {}));
    var BouncedRecipientInfo;
    (function(BouncedRecipientInfo2) {
      BouncedRecipientInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BouncedRecipientInfo = exports2.BouncedRecipientInfo || (exports2.BouncedRecipientInfo = {}));
    var Destination;
    (function(Destination2) {
      Destination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Destination = exports2.Destination || (exports2.Destination = {}));
    var MessageTag;
    (function(MessageTag2) {
      MessageTag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(MessageTag = exports2.MessageTag || (exports2.MessageTag = {}));
    var BulkEmailDestination;
    (function(BulkEmailDestination2) {
      BulkEmailDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BulkEmailDestination = exports2.BulkEmailDestination || (exports2.BulkEmailDestination = {}));
    var BulkEmailStatus;
    (function(BulkEmailStatus2) {
      BulkEmailStatus2["AccountDailyQuotaExceeded"] = "AccountDailyQuotaExceeded";
      BulkEmailStatus2["AccountSendingPaused"] = "AccountSendingPaused";
      BulkEmailStatus2["AccountSuspended"] = "AccountSuspended";
      BulkEmailStatus2["AccountThrottled"] = "AccountThrottled";
      BulkEmailStatus2["ConfigurationSetDoesNotExist"] = "ConfigurationSetDoesNotExist";
      BulkEmailStatus2["ConfigurationSetSendingPaused"] = "ConfigurationSetSendingPaused";
      BulkEmailStatus2["Failed"] = "Failed";
      BulkEmailStatus2["InvalidParameterValue"] = "InvalidParameterValue";
      BulkEmailStatus2["InvalidSendingPoolName"] = "InvalidSendingPoolName";
      BulkEmailStatus2["MailFromDomainNotVerified"] = "MailFromDomainNotVerified";
      BulkEmailStatus2["MessageRejected"] = "MessageRejected";
      BulkEmailStatus2["Success"] = "Success";
      BulkEmailStatus2["TemplateDoesNotExist"] = "TemplateDoesNotExist";
      BulkEmailStatus2["TransientFailure"] = "TransientFailure";
    })(BulkEmailStatus = exports2.BulkEmailStatus || (exports2.BulkEmailStatus = {}));
    var BulkEmailDestinationStatus;
    (function(BulkEmailDestinationStatus2) {
      BulkEmailDestinationStatus2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BulkEmailDestinationStatus = exports2.BulkEmailDestinationStatus || (exports2.BulkEmailDestinationStatus = {}));
    var CannotDeleteException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CannotDeleteException",
          $fault: "client"
        }, opts));
        this.name = "CannotDeleteException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CannotDeleteException.prototype);
        this.Name = opts.Name;
      }
    };
    exports2.CannotDeleteException = CannotDeleteException;
    var CloneReceiptRuleSetRequest;
    (function(CloneReceiptRuleSetRequest2) {
      CloneReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CloneReceiptRuleSetRequest = exports2.CloneReceiptRuleSetRequest || (exports2.CloneReceiptRuleSetRequest = {}));
    var CloneReceiptRuleSetResponse;
    (function(CloneReceiptRuleSetResponse2) {
      CloneReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CloneReceiptRuleSetResponse = exports2.CloneReceiptRuleSetResponse || (exports2.CloneReceiptRuleSetResponse = {}));
    var LimitExceededException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "LimitExceededException",
          $fault: "client"
        }, opts));
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports2.LimitExceededException = LimitExceededException;
    var RuleSetDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RuleSetDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "RuleSetDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RuleSetDoesNotExistException.prototype);
        this.Name = opts.Name;
      }
    };
    exports2.RuleSetDoesNotExistException = RuleSetDoesNotExistException;
    var DimensionValueSource;
    (function(DimensionValueSource2) {
      DimensionValueSource2["EMAIL_HEADER"] = "emailHeader";
      DimensionValueSource2["LINK_TAG"] = "linkTag";
      DimensionValueSource2["MESSAGE_TAG"] = "messageTag";
    })(DimensionValueSource = exports2.DimensionValueSource || (exports2.DimensionValueSource = {}));
    var CloudWatchDimensionConfiguration;
    (function(CloudWatchDimensionConfiguration2) {
      CloudWatchDimensionConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CloudWatchDimensionConfiguration = exports2.CloudWatchDimensionConfiguration || (exports2.CloudWatchDimensionConfiguration = {}));
    var CloudWatchDestination;
    (function(CloudWatchDestination2) {
      CloudWatchDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CloudWatchDestination = exports2.CloudWatchDestination || (exports2.CloudWatchDestination = {}));
    var ConfigurationSet;
    (function(ConfigurationSet2) {
      ConfigurationSet2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ConfigurationSet = exports2.ConfigurationSet || (exports2.ConfigurationSet = {}));
    var ConfigurationSetAlreadyExistsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ConfigurationSetAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "ConfigurationSetAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConfigurationSetAlreadyExistsException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
      }
    };
    exports2.ConfigurationSetAlreadyExistsException = ConfigurationSetAlreadyExistsException;
    var ConfigurationSetAttribute;
    (function(ConfigurationSetAttribute2) {
      ConfigurationSetAttribute2["DELIVERY_OPTIONS"] = "deliveryOptions";
      ConfigurationSetAttribute2["EVENT_DESTINATIONS"] = "eventDestinations";
      ConfigurationSetAttribute2["REPUTATION_OPTIONS"] = "reputationOptions";
      ConfigurationSetAttribute2["TRACKING_OPTIONS"] = "trackingOptions";
    })(ConfigurationSetAttribute = exports2.ConfigurationSetAttribute || (exports2.ConfigurationSetAttribute = {}));
    var ConfigurationSetDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ConfigurationSetDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "ConfigurationSetDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConfigurationSetDoesNotExistException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
      }
    };
    exports2.ConfigurationSetDoesNotExistException = ConfigurationSetDoesNotExistException;
    var ConfigurationSetSendingPausedException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ConfigurationSetSendingPausedException",
          $fault: "client"
        }, opts));
        this.name = "ConfigurationSetSendingPausedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConfigurationSetSendingPausedException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
      }
    };
    exports2.ConfigurationSetSendingPausedException = ConfigurationSetSendingPausedException;
    var CreateConfigurationSetRequest;
    (function(CreateConfigurationSetRequest2) {
      CreateConfigurationSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetRequest = exports2.CreateConfigurationSetRequest || (exports2.CreateConfigurationSetRequest = {}));
    var CreateConfigurationSetResponse;
    (function(CreateConfigurationSetResponse2) {
      CreateConfigurationSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetResponse = exports2.CreateConfigurationSetResponse || (exports2.CreateConfigurationSetResponse = {}));
    var InvalidConfigurationSetException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidConfigurationSetException",
          $fault: "client"
        }, opts));
        this.name = "InvalidConfigurationSetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConfigurationSetException.prototype);
      }
    };
    exports2.InvalidConfigurationSetException = InvalidConfigurationSetException;
    var KinesisFirehoseDestination;
    (function(KinesisFirehoseDestination2) {
      KinesisFirehoseDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(KinesisFirehoseDestination = exports2.KinesisFirehoseDestination || (exports2.KinesisFirehoseDestination = {}));
    var EventType;
    (function(EventType2) {
      EventType2["BOUNCE"] = "bounce";
      EventType2["CLICK"] = "click";
      EventType2["COMPLAINT"] = "complaint";
      EventType2["DELIVERY"] = "delivery";
      EventType2["OPEN"] = "open";
      EventType2["REJECT"] = "reject";
      EventType2["RENDERING_FAILURE"] = "renderingFailure";
      EventType2["SEND"] = "send";
    })(EventType = exports2.EventType || (exports2.EventType = {}));
    var SNSDestination;
    (function(SNSDestination2) {
      SNSDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SNSDestination = exports2.SNSDestination || (exports2.SNSDestination = {}));
    var EventDestination;
    (function(EventDestination2) {
      EventDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventDestination = exports2.EventDestination || (exports2.EventDestination = {}));
    var CreateConfigurationSetEventDestinationRequest;
    (function(CreateConfigurationSetEventDestinationRequest2) {
      CreateConfigurationSetEventDestinationRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetEventDestinationRequest = exports2.CreateConfigurationSetEventDestinationRequest || (exports2.CreateConfigurationSetEventDestinationRequest = {}));
    var CreateConfigurationSetEventDestinationResponse;
    (function(CreateConfigurationSetEventDestinationResponse2) {
      CreateConfigurationSetEventDestinationResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetEventDestinationResponse = exports2.CreateConfigurationSetEventDestinationResponse || (exports2.CreateConfigurationSetEventDestinationResponse = {}));
    var EventDestinationAlreadyExistsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "EventDestinationAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "EventDestinationAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EventDestinationAlreadyExistsException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
        this.EventDestinationName = opts.EventDestinationName;
      }
    };
    exports2.EventDestinationAlreadyExistsException = EventDestinationAlreadyExistsException;
    var InvalidCloudWatchDestinationException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidCloudWatchDestinationException",
          $fault: "client"
        }, opts));
        this.name = "InvalidCloudWatchDestinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCloudWatchDestinationException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
        this.EventDestinationName = opts.EventDestinationName;
      }
    };
    exports2.InvalidCloudWatchDestinationException = InvalidCloudWatchDestinationException;
    var InvalidFirehoseDestinationException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidFirehoseDestinationException",
          $fault: "client"
        }, opts));
        this.name = "InvalidFirehoseDestinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFirehoseDestinationException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
        this.EventDestinationName = opts.EventDestinationName;
      }
    };
    exports2.InvalidFirehoseDestinationException = InvalidFirehoseDestinationException;
    var InvalidSNSDestinationException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidSNSDestinationException",
          $fault: "client"
        }, opts));
        this.name = "InvalidSNSDestinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSNSDestinationException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
        this.EventDestinationName = opts.EventDestinationName;
      }
    };
    exports2.InvalidSNSDestinationException = InvalidSNSDestinationException;
    var TrackingOptions;
    (function(TrackingOptions2) {
      TrackingOptions2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TrackingOptions = exports2.TrackingOptions || (exports2.TrackingOptions = {}));
    var CreateConfigurationSetTrackingOptionsRequest;
    (function(CreateConfigurationSetTrackingOptionsRequest2) {
      CreateConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetTrackingOptionsRequest = exports2.CreateConfigurationSetTrackingOptionsRequest || (exports2.CreateConfigurationSetTrackingOptionsRequest = {}));
    var CreateConfigurationSetTrackingOptionsResponse;
    (function(CreateConfigurationSetTrackingOptionsResponse2) {
      CreateConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateConfigurationSetTrackingOptionsResponse = exports2.CreateConfigurationSetTrackingOptionsResponse || (exports2.CreateConfigurationSetTrackingOptionsResponse = {}));
    var InvalidTrackingOptionsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidTrackingOptionsException",
          $fault: "client"
        }, opts));
        this.name = "InvalidTrackingOptionsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTrackingOptionsException.prototype);
      }
    };
    exports2.InvalidTrackingOptionsException = InvalidTrackingOptionsException;
    var TrackingOptionsAlreadyExistsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TrackingOptionsAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "TrackingOptionsAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TrackingOptionsAlreadyExistsException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
      }
    };
    exports2.TrackingOptionsAlreadyExistsException = TrackingOptionsAlreadyExistsException;
    var CreateCustomVerificationEmailTemplateRequest;
    (function(CreateCustomVerificationEmailTemplateRequest2) {
      CreateCustomVerificationEmailTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateCustomVerificationEmailTemplateRequest = exports2.CreateCustomVerificationEmailTemplateRequest || (exports2.CreateCustomVerificationEmailTemplateRequest = {}));
    var CustomVerificationEmailInvalidContentException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomVerificationEmailInvalidContentException",
          $fault: "client"
        }, opts));
        this.name = "CustomVerificationEmailInvalidContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomVerificationEmailInvalidContentException.prototype);
      }
    };
    exports2.CustomVerificationEmailInvalidContentException = CustomVerificationEmailInvalidContentException;
    var CustomVerificationEmailTemplateAlreadyExistsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomVerificationEmailTemplateAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "CustomVerificationEmailTemplateAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomVerificationEmailTemplateAlreadyExistsException.prototype);
        this.CustomVerificationEmailTemplateName = opts.CustomVerificationEmailTemplateName;
      }
    };
    exports2.CustomVerificationEmailTemplateAlreadyExistsException = CustomVerificationEmailTemplateAlreadyExistsException;
    var FromEmailAddressNotVerifiedException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "FromEmailAddressNotVerifiedException",
          $fault: "client"
        }, opts));
        this.name = "FromEmailAddressNotVerifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FromEmailAddressNotVerifiedException.prototype);
        this.FromEmailAddress = opts.FromEmailAddress;
      }
    };
    exports2.FromEmailAddressNotVerifiedException = FromEmailAddressNotVerifiedException;
    var ReceiptFilterPolicy;
    (function(ReceiptFilterPolicy2) {
      ReceiptFilterPolicy2["Allow"] = "Allow";
      ReceiptFilterPolicy2["Block"] = "Block";
    })(ReceiptFilterPolicy = exports2.ReceiptFilterPolicy || (exports2.ReceiptFilterPolicy = {}));
    var ReceiptIpFilter;
    (function(ReceiptIpFilter2) {
      ReceiptIpFilter2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReceiptIpFilter = exports2.ReceiptIpFilter || (exports2.ReceiptIpFilter = {}));
    var ReceiptFilter;
    (function(ReceiptFilter2) {
      ReceiptFilter2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReceiptFilter = exports2.ReceiptFilter || (exports2.ReceiptFilter = {}));
    var CreateReceiptFilterRequest;
    (function(CreateReceiptFilterRequest2) {
      CreateReceiptFilterRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptFilterRequest = exports2.CreateReceiptFilterRequest || (exports2.CreateReceiptFilterRequest = {}));
    var CreateReceiptFilterResponse;
    (function(CreateReceiptFilterResponse2) {
      CreateReceiptFilterResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptFilterResponse = exports2.CreateReceiptFilterResponse || (exports2.CreateReceiptFilterResponse = {}));
    var LambdaAction;
    (function(LambdaAction2) {
      LambdaAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(LambdaAction = exports2.LambdaAction || (exports2.LambdaAction = {}));
    var S3Action;
    (function(S3Action2) {
      S3Action2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(S3Action = exports2.S3Action || (exports2.S3Action = {}));
    var SNSActionEncoding;
    (function(SNSActionEncoding2) {
      SNSActionEncoding2["Base64"] = "Base64";
      SNSActionEncoding2["UTF8"] = "UTF-8";
    })(SNSActionEncoding = exports2.SNSActionEncoding || (exports2.SNSActionEncoding = {}));
    var SNSAction;
    (function(SNSAction2) {
      SNSAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SNSAction = exports2.SNSAction || (exports2.SNSAction = {}));
    var StopScope;
    (function(StopScope2) {
      StopScope2["RULE_SET"] = "RuleSet";
    })(StopScope = exports2.StopScope || (exports2.StopScope = {}));
    var StopAction;
    (function(StopAction2) {
      StopAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopAction = exports2.StopAction || (exports2.StopAction = {}));
    var WorkmailAction;
    (function(WorkmailAction2) {
      WorkmailAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(WorkmailAction = exports2.WorkmailAction || (exports2.WorkmailAction = {}));
    var ReceiptAction;
    (function(ReceiptAction2) {
      ReceiptAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReceiptAction = exports2.ReceiptAction || (exports2.ReceiptAction = {}));
    var TlsPolicy;
    (function(TlsPolicy2) {
      TlsPolicy2["Optional"] = "Optional";
      TlsPolicy2["Require"] = "Require";
    })(TlsPolicy = exports2.TlsPolicy || (exports2.TlsPolicy = {}));
    var ReceiptRule;
    (function(ReceiptRule2) {
      ReceiptRule2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReceiptRule = exports2.ReceiptRule || (exports2.ReceiptRule = {}));
    var CreateReceiptRuleRequest;
    (function(CreateReceiptRuleRequest2) {
      CreateReceiptRuleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptRuleRequest = exports2.CreateReceiptRuleRequest || (exports2.CreateReceiptRuleRequest = {}));
    var CreateReceiptRuleResponse;
    (function(CreateReceiptRuleResponse2) {
      CreateReceiptRuleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptRuleResponse = exports2.CreateReceiptRuleResponse || (exports2.CreateReceiptRuleResponse = {}));
    var InvalidLambdaFunctionException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidLambdaFunctionException",
          $fault: "client"
        }, opts));
        this.name = "InvalidLambdaFunctionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLambdaFunctionException.prototype);
        this.FunctionArn = opts.FunctionArn;
      }
    };
    exports2.InvalidLambdaFunctionException = InvalidLambdaFunctionException;
    var InvalidS3ConfigurationException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidS3ConfigurationException",
          $fault: "client"
        }, opts));
        this.name = "InvalidS3ConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ConfigurationException.prototype);
        this.Bucket = opts.Bucket;
      }
    };
    exports2.InvalidS3ConfigurationException = InvalidS3ConfigurationException;
    var InvalidSnsTopicException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidSnsTopicException",
          $fault: "client"
        }, opts));
        this.name = "InvalidSnsTopicException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSnsTopicException.prototype);
        this.Topic = opts.Topic;
      }
    };
    exports2.InvalidSnsTopicException = InvalidSnsTopicException;
    var RuleDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RuleDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "RuleDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RuleDoesNotExistException.prototype);
        this.Name = opts.Name;
      }
    };
    exports2.RuleDoesNotExistException = RuleDoesNotExistException;
    var CreateReceiptRuleSetRequest;
    (function(CreateReceiptRuleSetRequest2) {
      CreateReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptRuleSetRequest = exports2.CreateReceiptRuleSetRequest || (exports2.CreateReceiptRuleSetRequest = {}));
    var CreateReceiptRuleSetResponse;
    (function(CreateReceiptRuleSetResponse2) {
      CreateReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReceiptRuleSetResponse = exports2.CreateReceiptRuleSetResponse || (exports2.CreateReceiptRuleSetResponse = {}));
    var Template;
    (function(Template2) {
      Template2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Template = exports2.Template || (exports2.Template = {}));
    var CreateTemplateRequest;
    (function(CreateTemplateRequest2) {
      CreateTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateTemplateRequest = exports2.CreateTemplateRequest || (exports2.CreateTemplateRequest = {}));
    var CreateTemplateResponse;
    (function(CreateTemplateResponse2) {
      CreateTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateTemplateResponse = exports2.CreateTemplateResponse || (exports2.CreateTemplateResponse = {}));
    var InvalidTemplateException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidTemplateException",
          $fault: "client"
        }, opts));
        this.name = "InvalidTemplateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTemplateException.prototype);
        this.TemplateName = opts.TemplateName;
      }
    };
    exports2.InvalidTemplateException = InvalidTemplateException;
    var CustomMailFromStatus;
    (function(CustomMailFromStatus2) {
      CustomMailFromStatus2["Failed"] = "Failed";
      CustomMailFromStatus2["Pending"] = "Pending";
      CustomMailFromStatus2["Success"] = "Success";
      CustomMailFromStatus2["TemporaryFailure"] = "TemporaryFailure";
    })(CustomMailFromStatus = exports2.CustomMailFromStatus || (exports2.CustomMailFromStatus = {}));
    var CustomVerificationEmailTemplate;
    (function(CustomVerificationEmailTemplate2) {
      CustomVerificationEmailTemplate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CustomVerificationEmailTemplate = exports2.CustomVerificationEmailTemplate || (exports2.CustomVerificationEmailTemplate = {}));
    var CustomVerificationEmailTemplateDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomVerificationEmailTemplateDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "CustomVerificationEmailTemplateDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomVerificationEmailTemplateDoesNotExistException.prototype);
        this.CustomVerificationEmailTemplateName = opts.CustomVerificationEmailTemplateName;
      }
    };
    exports2.CustomVerificationEmailTemplateDoesNotExistException = CustomVerificationEmailTemplateDoesNotExistException;
    var DeleteConfigurationSetRequest;
    (function(DeleteConfigurationSetRequest2) {
      DeleteConfigurationSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetRequest = exports2.DeleteConfigurationSetRequest || (exports2.DeleteConfigurationSetRequest = {}));
    var DeleteConfigurationSetResponse;
    (function(DeleteConfigurationSetResponse2) {
      DeleteConfigurationSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetResponse = exports2.DeleteConfigurationSetResponse || (exports2.DeleteConfigurationSetResponse = {}));
    var DeleteConfigurationSetEventDestinationRequest;
    (function(DeleteConfigurationSetEventDestinationRequest2) {
      DeleteConfigurationSetEventDestinationRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetEventDestinationRequest = exports2.DeleteConfigurationSetEventDestinationRequest || (exports2.DeleteConfigurationSetEventDestinationRequest = {}));
    var DeleteConfigurationSetEventDestinationResponse;
    (function(DeleteConfigurationSetEventDestinationResponse2) {
      DeleteConfigurationSetEventDestinationResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetEventDestinationResponse = exports2.DeleteConfigurationSetEventDestinationResponse || (exports2.DeleteConfigurationSetEventDestinationResponse = {}));
    var EventDestinationDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "EventDestinationDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "EventDestinationDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EventDestinationDoesNotExistException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
        this.EventDestinationName = opts.EventDestinationName;
      }
    };
    exports2.EventDestinationDoesNotExistException = EventDestinationDoesNotExistException;
    var DeleteConfigurationSetTrackingOptionsRequest;
    (function(DeleteConfigurationSetTrackingOptionsRequest2) {
      DeleteConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetTrackingOptionsRequest = exports2.DeleteConfigurationSetTrackingOptionsRequest || (exports2.DeleteConfigurationSetTrackingOptionsRequest = {}));
    var DeleteConfigurationSetTrackingOptionsResponse;
    (function(DeleteConfigurationSetTrackingOptionsResponse2) {
      DeleteConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteConfigurationSetTrackingOptionsResponse = exports2.DeleteConfigurationSetTrackingOptionsResponse || (exports2.DeleteConfigurationSetTrackingOptionsResponse = {}));
    var TrackingOptionsDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TrackingOptionsDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "TrackingOptionsDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TrackingOptionsDoesNotExistException.prototype);
        this.ConfigurationSetName = opts.ConfigurationSetName;
      }
    };
    exports2.TrackingOptionsDoesNotExistException = TrackingOptionsDoesNotExistException;
    var DeleteCustomVerificationEmailTemplateRequest;
    (function(DeleteCustomVerificationEmailTemplateRequest2) {
      DeleteCustomVerificationEmailTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteCustomVerificationEmailTemplateRequest = exports2.DeleteCustomVerificationEmailTemplateRequest || (exports2.DeleteCustomVerificationEmailTemplateRequest = {}));
    var DeleteIdentityRequest;
    (function(DeleteIdentityRequest2) {
      DeleteIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteIdentityRequest = exports2.DeleteIdentityRequest || (exports2.DeleteIdentityRequest = {}));
    var DeleteIdentityResponse;
    (function(DeleteIdentityResponse2) {
      DeleteIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteIdentityResponse = exports2.DeleteIdentityResponse || (exports2.DeleteIdentityResponse = {}));
    var DeleteIdentityPolicyRequest;
    (function(DeleteIdentityPolicyRequest2) {
      DeleteIdentityPolicyRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteIdentityPolicyRequest = exports2.DeleteIdentityPolicyRequest || (exports2.DeleteIdentityPolicyRequest = {}));
    var DeleteIdentityPolicyResponse;
    (function(DeleteIdentityPolicyResponse2) {
      DeleteIdentityPolicyResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteIdentityPolicyResponse = exports2.DeleteIdentityPolicyResponse || (exports2.DeleteIdentityPolicyResponse = {}));
    var DeleteReceiptFilterRequest;
    (function(DeleteReceiptFilterRequest2) {
      DeleteReceiptFilterRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptFilterRequest = exports2.DeleteReceiptFilterRequest || (exports2.DeleteReceiptFilterRequest = {}));
    var DeleteReceiptFilterResponse;
    (function(DeleteReceiptFilterResponse2) {
      DeleteReceiptFilterResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptFilterResponse = exports2.DeleteReceiptFilterResponse || (exports2.DeleteReceiptFilterResponse = {}));
    var DeleteReceiptRuleRequest;
    (function(DeleteReceiptRuleRequest2) {
      DeleteReceiptRuleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptRuleRequest = exports2.DeleteReceiptRuleRequest || (exports2.DeleteReceiptRuleRequest = {}));
    var DeleteReceiptRuleResponse;
    (function(DeleteReceiptRuleResponse2) {
      DeleteReceiptRuleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptRuleResponse = exports2.DeleteReceiptRuleResponse || (exports2.DeleteReceiptRuleResponse = {}));
    var DeleteReceiptRuleSetRequest;
    (function(DeleteReceiptRuleSetRequest2) {
      DeleteReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptRuleSetRequest = exports2.DeleteReceiptRuleSetRequest || (exports2.DeleteReceiptRuleSetRequest = {}));
    var DeleteReceiptRuleSetResponse;
    (function(DeleteReceiptRuleSetResponse2) {
      DeleteReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReceiptRuleSetResponse = exports2.DeleteReceiptRuleSetResponse || (exports2.DeleteReceiptRuleSetResponse = {}));
    var DeleteTemplateRequest;
    (function(DeleteTemplateRequest2) {
      DeleteTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteTemplateRequest = exports2.DeleteTemplateRequest || (exports2.DeleteTemplateRequest = {}));
    var DeleteTemplateResponse;
    (function(DeleteTemplateResponse2) {
      DeleteTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteTemplateResponse = exports2.DeleteTemplateResponse || (exports2.DeleteTemplateResponse = {}));
    var DeleteVerifiedEmailAddressRequest;
    (function(DeleteVerifiedEmailAddressRequest2) {
      DeleteVerifiedEmailAddressRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteVerifiedEmailAddressRequest = exports2.DeleteVerifiedEmailAddressRequest || (exports2.DeleteVerifiedEmailAddressRequest = {}));
    var DeliveryOptions;
    (function(DeliveryOptions2) {
      DeliveryOptions2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeliveryOptions = exports2.DeliveryOptions || (exports2.DeliveryOptions = {}));
    var DescribeActiveReceiptRuleSetRequest;
    (function(DescribeActiveReceiptRuleSetRequest2) {
      DescribeActiveReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeActiveReceiptRuleSetRequest = exports2.DescribeActiveReceiptRuleSetRequest || (exports2.DescribeActiveReceiptRuleSetRequest = {}));
    var ReceiptRuleSetMetadata;
    (function(ReceiptRuleSetMetadata2) {
      ReceiptRuleSetMetadata2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReceiptRuleSetMetadata = exports2.ReceiptRuleSetMetadata || (exports2.ReceiptRuleSetMetadata = {}));
    var DescribeActiveReceiptRuleSetResponse;
    (function(DescribeActiveReceiptRuleSetResponse2) {
      DescribeActiveReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeActiveReceiptRuleSetResponse = exports2.DescribeActiveReceiptRuleSetResponse || (exports2.DescribeActiveReceiptRuleSetResponse = {}));
    var DescribeConfigurationSetRequest;
    (function(DescribeConfigurationSetRequest2) {
      DescribeConfigurationSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeConfigurationSetRequest = exports2.DescribeConfigurationSetRequest || (exports2.DescribeConfigurationSetRequest = {}));
    var ReputationOptions;
    (function(ReputationOptions2) {
      ReputationOptions2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReputationOptions = exports2.ReputationOptions || (exports2.ReputationOptions = {}));
    var DescribeConfigurationSetResponse;
    (function(DescribeConfigurationSetResponse2) {
      DescribeConfigurationSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeConfigurationSetResponse = exports2.DescribeConfigurationSetResponse || (exports2.DescribeConfigurationSetResponse = {}));
    var DescribeReceiptRuleRequest;
    (function(DescribeReceiptRuleRequest2) {
      DescribeReceiptRuleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReceiptRuleRequest = exports2.DescribeReceiptRuleRequest || (exports2.DescribeReceiptRuleRequest = {}));
    var DescribeReceiptRuleResponse;
    (function(DescribeReceiptRuleResponse2) {
      DescribeReceiptRuleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReceiptRuleResponse = exports2.DescribeReceiptRuleResponse || (exports2.DescribeReceiptRuleResponse = {}));
    var DescribeReceiptRuleSetRequest;
    (function(DescribeReceiptRuleSetRequest2) {
      DescribeReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReceiptRuleSetRequest = exports2.DescribeReceiptRuleSetRequest || (exports2.DescribeReceiptRuleSetRequest = {}));
    var DescribeReceiptRuleSetResponse;
    (function(DescribeReceiptRuleSetResponse2) {
      DescribeReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReceiptRuleSetResponse = exports2.DescribeReceiptRuleSetResponse || (exports2.DescribeReceiptRuleSetResponse = {}));
    var IdentityDkimAttributes;
    (function(IdentityDkimAttributes2) {
      IdentityDkimAttributes2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(IdentityDkimAttributes = exports2.IdentityDkimAttributes || (exports2.IdentityDkimAttributes = {}));
    var GetAccountSendingEnabledResponse;
    (function(GetAccountSendingEnabledResponse2) {
      GetAccountSendingEnabledResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccountSendingEnabledResponse = exports2.GetAccountSendingEnabledResponse || (exports2.GetAccountSendingEnabledResponse = {}));
    var GetCustomVerificationEmailTemplateRequest;
    (function(GetCustomVerificationEmailTemplateRequest2) {
      GetCustomVerificationEmailTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCustomVerificationEmailTemplateRequest = exports2.GetCustomVerificationEmailTemplateRequest || (exports2.GetCustomVerificationEmailTemplateRequest = {}));
    var GetCustomVerificationEmailTemplateResponse;
    (function(GetCustomVerificationEmailTemplateResponse2) {
      GetCustomVerificationEmailTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCustomVerificationEmailTemplateResponse = exports2.GetCustomVerificationEmailTemplateResponse || (exports2.GetCustomVerificationEmailTemplateResponse = {}));
    var GetIdentityDkimAttributesRequest;
    (function(GetIdentityDkimAttributesRequest2) {
      GetIdentityDkimAttributesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityDkimAttributesRequest = exports2.GetIdentityDkimAttributesRequest || (exports2.GetIdentityDkimAttributesRequest = {}));
    var GetIdentityDkimAttributesResponse;
    (function(GetIdentityDkimAttributesResponse2) {
      GetIdentityDkimAttributesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityDkimAttributesResponse = exports2.GetIdentityDkimAttributesResponse || (exports2.GetIdentityDkimAttributesResponse = {}));
    var GetIdentityMailFromDomainAttributesRequest;
    (function(GetIdentityMailFromDomainAttributesRequest2) {
      GetIdentityMailFromDomainAttributesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityMailFromDomainAttributesRequest = exports2.GetIdentityMailFromDomainAttributesRequest || (exports2.GetIdentityMailFromDomainAttributesRequest = {}));
    var IdentityMailFromDomainAttributes;
    (function(IdentityMailFromDomainAttributes2) {
      IdentityMailFromDomainAttributes2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(IdentityMailFromDomainAttributes = exports2.IdentityMailFromDomainAttributes || (exports2.IdentityMailFromDomainAttributes = {}));
    var GetIdentityMailFromDomainAttributesResponse;
    (function(GetIdentityMailFromDomainAttributesResponse2) {
      GetIdentityMailFromDomainAttributesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityMailFromDomainAttributesResponse = exports2.GetIdentityMailFromDomainAttributesResponse || (exports2.GetIdentityMailFromDomainAttributesResponse = {}));
    var GetIdentityNotificationAttributesRequest;
    (function(GetIdentityNotificationAttributesRequest2) {
      GetIdentityNotificationAttributesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityNotificationAttributesRequest = exports2.GetIdentityNotificationAttributesRequest || (exports2.GetIdentityNotificationAttributesRequest = {}));
    var IdentityNotificationAttributes;
    (function(IdentityNotificationAttributes2) {
      IdentityNotificationAttributes2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(IdentityNotificationAttributes = exports2.IdentityNotificationAttributes || (exports2.IdentityNotificationAttributes = {}));
    var GetIdentityNotificationAttributesResponse;
    (function(GetIdentityNotificationAttributesResponse2) {
      GetIdentityNotificationAttributesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityNotificationAttributesResponse = exports2.GetIdentityNotificationAttributesResponse || (exports2.GetIdentityNotificationAttributesResponse = {}));
    var GetIdentityPoliciesRequest;
    (function(GetIdentityPoliciesRequest2) {
      GetIdentityPoliciesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityPoliciesRequest = exports2.GetIdentityPoliciesRequest || (exports2.GetIdentityPoliciesRequest = {}));
    var GetIdentityPoliciesResponse;
    (function(GetIdentityPoliciesResponse2) {
      GetIdentityPoliciesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityPoliciesResponse = exports2.GetIdentityPoliciesResponse || (exports2.GetIdentityPoliciesResponse = {}));
    var GetIdentityVerificationAttributesRequest;
    (function(GetIdentityVerificationAttributesRequest2) {
      GetIdentityVerificationAttributesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityVerificationAttributesRequest = exports2.GetIdentityVerificationAttributesRequest || (exports2.GetIdentityVerificationAttributesRequest = {}));
    var IdentityVerificationAttributes;
    (function(IdentityVerificationAttributes2) {
      IdentityVerificationAttributes2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(IdentityVerificationAttributes = exports2.IdentityVerificationAttributes || (exports2.IdentityVerificationAttributes = {}));
    var GetIdentityVerificationAttributesResponse;
    (function(GetIdentityVerificationAttributesResponse2) {
      GetIdentityVerificationAttributesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetIdentityVerificationAttributesResponse = exports2.GetIdentityVerificationAttributesResponse || (exports2.GetIdentityVerificationAttributesResponse = {}));
    var GetSendQuotaResponse;
    (function(GetSendQuotaResponse2) {
      GetSendQuotaResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSendQuotaResponse = exports2.GetSendQuotaResponse || (exports2.GetSendQuotaResponse = {}));
    var SendDataPoint;
    (function(SendDataPoint2) {
      SendDataPoint2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendDataPoint = exports2.SendDataPoint || (exports2.SendDataPoint = {}));
    var GetSendStatisticsResponse;
    (function(GetSendStatisticsResponse2) {
      GetSendStatisticsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSendStatisticsResponse = exports2.GetSendStatisticsResponse || (exports2.GetSendStatisticsResponse = {}));
    var GetTemplateRequest;
    (function(GetTemplateRequest2) {
      GetTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetTemplateRequest = exports2.GetTemplateRequest || (exports2.GetTemplateRequest = {}));
    var GetTemplateResponse;
    (function(GetTemplateResponse2) {
      GetTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetTemplateResponse = exports2.GetTemplateResponse || (exports2.GetTemplateResponse = {}));
    var TemplateDoesNotExistException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TemplateDoesNotExistException",
          $fault: "client"
        }, opts));
        this.name = "TemplateDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TemplateDoesNotExistException.prototype);
        this.TemplateName = opts.TemplateName;
      }
    };
    exports2.TemplateDoesNotExistException = TemplateDoesNotExistException;
    var InvalidDeliveryOptionsException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDeliveryOptionsException",
          $fault: "client"
        }, opts));
        this.name = "InvalidDeliveryOptionsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeliveryOptionsException.prototype);
      }
    };
    exports2.InvalidDeliveryOptionsException = InvalidDeliveryOptionsException;
    var InvalidPolicyException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidPolicyException",
          $fault: "client"
        }, opts));
        this.name = "InvalidPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyException.prototype);
      }
    };
    exports2.InvalidPolicyException = InvalidPolicyException;
    var InvalidRenderingParameterException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRenderingParameterException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRenderingParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRenderingParameterException.prototype);
        this.TemplateName = opts.TemplateName;
      }
    };
    exports2.InvalidRenderingParameterException = InvalidRenderingParameterException;
    var ListConfigurationSetsRequest;
    (function(ListConfigurationSetsRequest2) {
      ListConfigurationSetsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListConfigurationSetsRequest = exports2.ListConfigurationSetsRequest || (exports2.ListConfigurationSetsRequest = {}));
    var ListConfigurationSetsResponse;
    (function(ListConfigurationSetsResponse2) {
      ListConfigurationSetsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListConfigurationSetsResponse = exports2.ListConfigurationSetsResponse || (exports2.ListConfigurationSetsResponse = {}));
    var ListCustomVerificationEmailTemplatesRequest;
    (function(ListCustomVerificationEmailTemplatesRequest2) {
      ListCustomVerificationEmailTemplatesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListCustomVerificationEmailTemplatesRequest = exports2.ListCustomVerificationEmailTemplatesRequest || (exports2.ListCustomVerificationEmailTemplatesRequest = {}));
    var ListCustomVerificationEmailTemplatesResponse;
    (function(ListCustomVerificationEmailTemplatesResponse2) {
      ListCustomVerificationEmailTemplatesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListCustomVerificationEmailTemplatesResponse = exports2.ListCustomVerificationEmailTemplatesResponse || (exports2.ListCustomVerificationEmailTemplatesResponse = {}));
    var ListIdentitiesRequest;
    (function(ListIdentitiesRequest2) {
      ListIdentitiesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListIdentitiesRequest = exports2.ListIdentitiesRequest || (exports2.ListIdentitiesRequest = {}));
    var ListIdentitiesResponse;
    (function(ListIdentitiesResponse2) {
      ListIdentitiesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListIdentitiesResponse = exports2.ListIdentitiesResponse || (exports2.ListIdentitiesResponse = {}));
    var ListIdentityPoliciesRequest;
    (function(ListIdentityPoliciesRequest2) {
      ListIdentityPoliciesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListIdentityPoliciesRequest = exports2.ListIdentityPoliciesRequest || (exports2.ListIdentityPoliciesRequest = {}));
    var ListIdentityPoliciesResponse;
    (function(ListIdentityPoliciesResponse2) {
      ListIdentityPoliciesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListIdentityPoliciesResponse = exports2.ListIdentityPoliciesResponse || (exports2.ListIdentityPoliciesResponse = {}));
    var ListReceiptFiltersRequest;
    (function(ListReceiptFiltersRequest2) {
      ListReceiptFiltersRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListReceiptFiltersRequest = exports2.ListReceiptFiltersRequest || (exports2.ListReceiptFiltersRequest = {}));
    var ListReceiptFiltersResponse;
    (function(ListReceiptFiltersResponse2) {
      ListReceiptFiltersResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListReceiptFiltersResponse = exports2.ListReceiptFiltersResponse || (exports2.ListReceiptFiltersResponse = {}));
    var ListReceiptRuleSetsRequest;
    (function(ListReceiptRuleSetsRequest2) {
      ListReceiptRuleSetsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListReceiptRuleSetsRequest = exports2.ListReceiptRuleSetsRequest || (exports2.ListReceiptRuleSetsRequest = {}));
    var ListReceiptRuleSetsResponse;
    (function(ListReceiptRuleSetsResponse2) {
      ListReceiptRuleSetsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListReceiptRuleSetsResponse = exports2.ListReceiptRuleSetsResponse || (exports2.ListReceiptRuleSetsResponse = {}));
    var ListTemplatesRequest;
    (function(ListTemplatesRequest2) {
      ListTemplatesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTemplatesRequest = exports2.ListTemplatesRequest || (exports2.ListTemplatesRequest = {}));
    var TemplateMetadata;
    (function(TemplateMetadata2) {
      TemplateMetadata2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TemplateMetadata = exports2.TemplateMetadata || (exports2.TemplateMetadata = {}));
    var ListTemplatesResponse;
    (function(ListTemplatesResponse2) {
      ListTemplatesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTemplatesResponse = exports2.ListTemplatesResponse || (exports2.ListTemplatesResponse = {}));
    var ListVerifiedEmailAddressesResponse;
    (function(ListVerifiedEmailAddressesResponse2) {
      ListVerifiedEmailAddressesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListVerifiedEmailAddressesResponse = exports2.ListVerifiedEmailAddressesResponse || (exports2.ListVerifiedEmailAddressesResponse = {}));
    var MailFromDomainNotVerifiedException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MailFromDomainNotVerifiedException",
          $fault: "client"
        }, opts));
        this.name = "MailFromDomainNotVerifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MailFromDomainNotVerifiedException.prototype);
      }
    };
    exports2.MailFromDomainNotVerifiedException = MailFromDomainNotVerifiedException;
    var Message;
    (function(Message2) {
      Message2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Message = exports2.Message || (exports2.Message = {}));
    var MessageDsn;
    (function(MessageDsn2) {
      MessageDsn2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(MessageDsn = exports2.MessageDsn || (exports2.MessageDsn = {}));
    var MessageRejected = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MessageRejected",
          $fault: "client"
        }, opts));
        this.name = "MessageRejected";
        this.$fault = "client";
        Object.setPrototypeOf(this, MessageRejected.prototype);
      }
    };
    exports2.MessageRejected = MessageRejected;
    var MissingRenderingAttributeException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MissingRenderingAttributeException",
          $fault: "client"
        }, opts));
        this.name = "MissingRenderingAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingRenderingAttributeException.prototype);
        this.TemplateName = opts.TemplateName;
      }
    };
    exports2.MissingRenderingAttributeException = MissingRenderingAttributeException;
    var ProductionAccessNotGrantedException = class extends SESServiceException_1.SESServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ProductionAccessNotGrantedException",
          $fault: "client"
        }, opts));
        this.name = "ProductionAccessNotGrantedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProductionAccessNotGrantedException.prototype);
      }
    };
    exports2.ProductionAccessNotGrantedException = ProductionAccessNotGrantedException;
    var PutConfigurationSetDeliveryOptionsRequest;
    (function(PutConfigurationSetDeliveryOptionsRequest2) {
      PutConfigurationSetDeliveryOptionsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PutConfigurationSetDeliveryOptionsRequest = exports2.PutConfigurationSetDeliveryOptionsRequest || (exports2.PutConfigurationSetDeliveryOptionsRequest = {}));
    var PutConfigurationSetDeliveryOptionsResponse;
    (function(PutConfigurationSetDeliveryOptionsResponse2) {
      PutConfigurationSetDeliveryOptionsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PutConfigurationSetDeliveryOptionsResponse = exports2.PutConfigurationSetDeliveryOptionsResponse || (exports2.PutConfigurationSetDeliveryOptionsResponse = {}));
    var PutIdentityPolicyRequest;
    (function(PutIdentityPolicyRequest2) {
      PutIdentityPolicyRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PutIdentityPolicyRequest = exports2.PutIdentityPolicyRequest || (exports2.PutIdentityPolicyRequest = {}));
    var PutIdentityPolicyResponse;
    (function(PutIdentityPolicyResponse2) {
      PutIdentityPolicyResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PutIdentityPolicyResponse = exports2.PutIdentityPolicyResponse || (exports2.PutIdentityPolicyResponse = {}));
    var RawMessage;
    (function(RawMessage2) {
      RawMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RawMessage = exports2.RawMessage || (exports2.RawMessage = {}));
    var ReorderReceiptRuleSetRequest;
    (function(ReorderReceiptRuleSetRequest2) {
      ReorderReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReorderReceiptRuleSetRequest = exports2.ReorderReceiptRuleSetRequest || (exports2.ReorderReceiptRuleSetRequest = {}));
    var ReorderReceiptRuleSetResponse;
    (function(ReorderReceiptRuleSetResponse2) {
      ReorderReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReorderReceiptRuleSetResponse = exports2.ReorderReceiptRuleSetResponse || (exports2.ReorderReceiptRuleSetResponse = {}));
    var SendBounceRequest;
    (function(SendBounceRequest2) {
      SendBounceRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendBounceRequest = exports2.SendBounceRequest || (exports2.SendBounceRequest = {}));
    var SendBounceResponse;
    (function(SendBounceResponse2) {
      SendBounceResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendBounceResponse = exports2.SendBounceResponse || (exports2.SendBounceResponse = {}));
    var SendBulkTemplatedEmailRequest;
    (function(SendBulkTemplatedEmailRequest2) {
      SendBulkTemplatedEmailRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendBulkTemplatedEmailRequest = exports2.SendBulkTemplatedEmailRequest || (exports2.SendBulkTemplatedEmailRequest = {}));
    var SendBulkTemplatedEmailResponse;
    (function(SendBulkTemplatedEmailResponse2) {
      SendBulkTemplatedEmailResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendBulkTemplatedEmailResponse = exports2.SendBulkTemplatedEmailResponse || (exports2.SendBulkTemplatedEmailResponse = {}));
    var SendCustomVerificationEmailRequest;
    (function(SendCustomVerificationEmailRequest2) {
      SendCustomVerificationEmailRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendCustomVerificationEmailRequest = exports2.SendCustomVerificationEmailRequest || (exports2.SendCustomVerificationEmailRequest = {}));
    var SendCustomVerificationEmailResponse;
    (function(SendCustomVerificationEmailResponse2) {
      SendCustomVerificationEmailResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendCustomVerificationEmailResponse = exports2.SendCustomVerificationEmailResponse || (exports2.SendCustomVerificationEmailResponse = {}));
    var SendEmailRequest;
    (function(SendEmailRequest2) {
      SendEmailRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendEmailRequest = exports2.SendEmailRequest || (exports2.SendEmailRequest = {}));
    var SendEmailResponse;
    (function(SendEmailResponse2) {
      SendEmailResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendEmailResponse = exports2.SendEmailResponse || (exports2.SendEmailResponse = {}));
    var SendRawEmailRequest;
    (function(SendRawEmailRequest2) {
      SendRawEmailRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendRawEmailRequest = exports2.SendRawEmailRequest || (exports2.SendRawEmailRequest = {}));
    var SendRawEmailResponse;
    (function(SendRawEmailResponse2) {
      SendRawEmailResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendRawEmailResponse = exports2.SendRawEmailResponse || (exports2.SendRawEmailResponse = {}));
    var SendTemplatedEmailRequest;
    (function(SendTemplatedEmailRequest2) {
      SendTemplatedEmailRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendTemplatedEmailRequest = exports2.SendTemplatedEmailRequest || (exports2.SendTemplatedEmailRequest = {}));
    var SendTemplatedEmailResponse;
    (function(SendTemplatedEmailResponse2) {
      SendTemplatedEmailResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SendTemplatedEmailResponse = exports2.SendTemplatedEmailResponse || (exports2.SendTemplatedEmailResponse = {}));
    var SetActiveReceiptRuleSetRequest;
    (function(SetActiveReceiptRuleSetRequest2) {
      SetActiveReceiptRuleSetRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetActiveReceiptRuleSetRequest = exports2.SetActiveReceiptRuleSetRequest || (exports2.SetActiveReceiptRuleSetRequest = {}));
    var SetActiveReceiptRuleSetResponse;
    (function(SetActiveReceiptRuleSetResponse2) {
      SetActiveReceiptRuleSetResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetActiveReceiptRuleSetResponse = exports2.SetActiveReceiptRuleSetResponse || (exports2.SetActiveReceiptRuleSetResponse = {}));
    var SetIdentityDkimEnabledRequest;
    (function(SetIdentityDkimEnabledRequest2) {
      SetIdentityDkimEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityDkimEnabledRequest = exports2.SetIdentityDkimEnabledRequest || (exports2.SetIdentityDkimEnabledRequest = {}));
    var SetIdentityDkimEnabledResponse;
    (function(SetIdentityDkimEnabledResponse2) {
      SetIdentityDkimEnabledResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityDkimEnabledResponse = exports2.SetIdentityDkimEnabledResponse || (exports2.SetIdentityDkimEnabledResponse = {}));
    var SetIdentityFeedbackForwardingEnabledRequest;
    (function(SetIdentityFeedbackForwardingEnabledRequest2) {
      SetIdentityFeedbackForwardingEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityFeedbackForwardingEnabledRequest = exports2.SetIdentityFeedbackForwardingEnabledRequest || (exports2.SetIdentityFeedbackForwardingEnabledRequest = {}));
    var SetIdentityFeedbackForwardingEnabledResponse;
    (function(SetIdentityFeedbackForwardingEnabledResponse2) {
      SetIdentityFeedbackForwardingEnabledResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityFeedbackForwardingEnabledResponse = exports2.SetIdentityFeedbackForwardingEnabledResponse || (exports2.SetIdentityFeedbackForwardingEnabledResponse = {}));
    var SetIdentityHeadersInNotificationsEnabledRequest;
    (function(SetIdentityHeadersInNotificationsEnabledRequest2) {
      SetIdentityHeadersInNotificationsEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityHeadersInNotificationsEnabledRequest = exports2.SetIdentityHeadersInNotificationsEnabledRequest || (exports2.SetIdentityHeadersInNotificationsEnabledRequest = {}));
    var SetIdentityHeadersInNotificationsEnabledResponse;
    (function(SetIdentityHeadersInNotificationsEnabledResponse2) {
      SetIdentityHeadersInNotificationsEnabledResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityHeadersInNotificationsEnabledResponse = exports2.SetIdentityHeadersInNotificationsEnabledResponse || (exports2.SetIdentityHeadersInNotificationsEnabledResponse = {}));
    var SetIdentityMailFromDomainRequest;
    (function(SetIdentityMailFromDomainRequest2) {
      SetIdentityMailFromDomainRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityMailFromDomainRequest = exports2.SetIdentityMailFromDomainRequest || (exports2.SetIdentityMailFromDomainRequest = {}));
    var SetIdentityMailFromDomainResponse;
    (function(SetIdentityMailFromDomainResponse2) {
      SetIdentityMailFromDomainResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityMailFromDomainResponse = exports2.SetIdentityMailFromDomainResponse || (exports2.SetIdentityMailFromDomainResponse = {}));
    var SetIdentityNotificationTopicRequest;
    (function(SetIdentityNotificationTopicRequest2) {
      SetIdentityNotificationTopicRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityNotificationTopicRequest = exports2.SetIdentityNotificationTopicRequest || (exports2.SetIdentityNotificationTopicRequest = {}));
    var SetIdentityNotificationTopicResponse;
    (function(SetIdentityNotificationTopicResponse2) {
      SetIdentityNotificationTopicResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetIdentityNotificationTopicResponse = exports2.SetIdentityNotificationTopicResponse || (exports2.SetIdentityNotificationTopicResponse = {}));
    var SetReceiptRulePositionRequest;
    (function(SetReceiptRulePositionRequest2) {
      SetReceiptRulePositionRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetReceiptRulePositionRequest = exports2.SetReceiptRulePositionRequest || (exports2.SetReceiptRulePositionRequest = {}));
    var SetReceiptRulePositionResponse;
    (function(SetReceiptRulePositionResponse2) {
      SetReceiptRulePositionResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SetReceiptRulePositionResponse = exports2.SetReceiptRulePositionResponse || (exports2.SetReceiptRulePositionResponse = {}));
    var TestRenderTemplateRequest;
    (function(TestRenderTemplateRequest2) {
      TestRenderTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TestRenderTemplateRequest = exports2.TestRenderTemplateRequest || (exports2.TestRenderTemplateRequest = {}));
    var TestRenderTemplateResponse;
    (function(TestRenderTemplateResponse2) {
      TestRenderTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TestRenderTemplateResponse = exports2.TestRenderTemplateResponse || (exports2.TestRenderTemplateResponse = {}));
    var UpdateAccountSendingEnabledRequest;
    (function(UpdateAccountSendingEnabledRequest2) {
      UpdateAccountSendingEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateAccountSendingEnabledRequest = exports2.UpdateAccountSendingEnabledRequest || (exports2.UpdateAccountSendingEnabledRequest = {}));
    var UpdateConfigurationSetEventDestinationRequest;
    (function(UpdateConfigurationSetEventDestinationRequest2) {
      UpdateConfigurationSetEventDestinationRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetEventDestinationRequest = exports2.UpdateConfigurationSetEventDestinationRequest || (exports2.UpdateConfigurationSetEventDestinationRequest = {}));
    var UpdateConfigurationSetEventDestinationResponse;
    (function(UpdateConfigurationSetEventDestinationResponse2) {
      UpdateConfigurationSetEventDestinationResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetEventDestinationResponse = exports2.UpdateConfigurationSetEventDestinationResponse || (exports2.UpdateConfigurationSetEventDestinationResponse = {}));
    var UpdateConfigurationSetReputationMetricsEnabledRequest;
    (function(UpdateConfigurationSetReputationMetricsEnabledRequest2) {
      UpdateConfigurationSetReputationMetricsEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetReputationMetricsEnabledRequest = exports2.UpdateConfigurationSetReputationMetricsEnabledRequest || (exports2.UpdateConfigurationSetReputationMetricsEnabledRequest = {}));
    var UpdateConfigurationSetSendingEnabledRequest;
    (function(UpdateConfigurationSetSendingEnabledRequest2) {
      UpdateConfigurationSetSendingEnabledRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetSendingEnabledRequest = exports2.UpdateConfigurationSetSendingEnabledRequest || (exports2.UpdateConfigurationSetSendingEnabledRequest = {}));
    var UpdateConfigurationSetTrackingOptionsRequest;
    (function(UpdateConfigurationSetTrackingOptionsRequest2) {
      UpdateConfigurationSetTrackingOptionsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetTrackingOptionsRequest = exports2.UpdateConfigurationSetTrackingOptionsRequest || (exports2.UpdateConfigurationSetTrackingOptionsRequest = {}));
    var UpdateConfigurationSetTrackingOptionsResponse;
    (function(UpdateConfigurationSetTrackingOptionsResponse2) {
      UpdateConfigurationSetTrackingOptionsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateConfigurationSetTrackingOptionsResponse = exports2.UpdateConfigurationSetTrackingOptionsResponse || (exports2.UpdateConfigurationSetTrackingOptionsResponse = {}));
    var UpdateCustomVerificationEmailTemplateRequest;
    (function(UpdateCustomVerificationEmailTemplateRequest2) {
      UpdateCustomVerificationEmailTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateCustomVerificationEmailTemplateRequest = exports2.UpdateCustomVerificationEmailTemplateRequest || (exports2.UpdateCustomVerificationEmailTemplateRequest = {}));
    var UpdateReceiptRuleRequest;
    (function(UpdateReceiptRuleRequest2) {
      UpdateReceiptRuleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateReceiptRuleRequest = exports2.UpdateReceiptRuleRequest || (exports2.UpdateReceiptRuleRequest = {}));
    var UpdateReceiptRuleResponse;
    (function(UpdateReceiptRuleResponse2) {
      UpdateReceiptRuleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateReceiptRuleResponse = exports2.UpdateReceiptRuleResponse || (exports2.UpdateReceiptRuleResponse = {}));
    var UpdateTemplateRequest;
    (function(UpdateTemplateRequest2) {
      UpdateTemplateRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTemplateRequest = exports2.UpdateTemplateRequest || (exports2.UpdateTemplateRequest = {}));
    var UpdateTemplateResponse;
    (function(UpdateTemplateResponse2) {
      UpdateTemplateResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTemplateResponse = exports2.UpdateTemplateResponse || (exports2.UpdateTemplateResponse = {}));
    var VerifyDomainDkimRequest;
    (function(VerifyDomainDkimRequest2) {
      VerifyDomainDkimRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyDomainDkimRequest = exports2.VerifyDomainDkimRequest || (exports2.VerifyDomainDkimRequest = {}));
    var VerifyDomainDkimResponse;
    (function(VerifyDomainDkimResponse2) {
      VerifyDomainDkimResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyDomainDkimResponse = exports2.VerifyDomainDkimResponse || (exports2.VerifyDomainDkimResponse = {}));
    var VerifyDomainIdentityRequest;
    (function(VerifyDomainIdentityRequest2) {
      VerifyDomainIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyDomainIdentityRequest = exports2.VerifyDomainIdentityRequest || (exports2.VerifyDomainIdentityRequest = {}));
    var VerifyDomainIdentityResponse;
    (function(VerifyDomainIdentityResponse2) {
      VerifyDomainIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyDomainIdentityResponse = exports2.VerifyDomainIdentityResponse || (exports2.VerifyDomainIdentityResponse = {}));
    var VerifyEmailAddressRequest;
    (function(VerifyEmailAddressRequest2) {
      VerifyEmailAddressRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyEmailAddressRequest = exports2.VerifyEmailAddressRequest || (exports2.VerifyEmailAddressRequest = {}));
    var VerifyEmailIdentityRequest;
    (function(VerifyEmailIdentityRequest2) {
      VerifyEmailIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyEmailIdentityRequest = exports2.VerifyEmailIdentityRequest || (exports2.VerifyEmailIdentityRequest = {}));
    var VerifyEmailIdentityResponse;
    (function(VerifyEmailIdentityResponse2) {
      VerifyEmailIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VerifyEmailIdentityResponse = exports2.VerifyEmailIdentityResponse || (exports2.VerifyEmailIdentityResponse = {}));
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest(__spreadProps(__spreadValues({}, this), {
          headers: __spreadValues({}, this.headers)
        }));
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return __spreadProps(__spreadValues({}, carry), {
          [paramName]: Array.isArray(param) ? [...param] : param
        });
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports2, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports2, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports2, module2) {
    module2.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports2, module2) {
    module2.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports2.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeHTML = exports2.decodeHTMLStrict = exports2.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports2.decodeXML = getStrictDecoder(xml_json_1.default);
    exports2.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports2.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports2.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports2.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports2.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports2.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports2.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/entities/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeXMLStrict = exports2.decodeHTML5Strict = exports2.decodeHTML4Strict = exports2.decodeHTML5 = exports2.decodeHTML4 = exports2.decodeHTMLStrict = exports2.decodeHTML = exports2.decodeXML = exports2.encodeHTML5 = exports2.encodeHTML4 = exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = exports2.encode = exports2.decodeStrict = exports2.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports2.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports2.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports2.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports2, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports2, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports2, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports2, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports2, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports2, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports2, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports2.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports2.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === "function") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === "strict";
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/node2json.js"(exports2) {
    "use strict";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
      }
      if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports2.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlNode.js"(exports2, module2) {
    "use strict";
    module2.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"(exports2) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports2.defaultOptions = defaultOptions;
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "ignoreNameSpace",
      "allowBooleanAttributes",
      "parseNodeValue",
      "parseAttributeValue",
      "arrayMode",
      "trimValues",
      "cdataTagName",
      "cdataPositionChar",
      "tagValueProcessor",
      "attrValueProcessor",
      "parseTrueNumberOnly",
      "stopNodes"
    ];
    exports2.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === "string") {
        let parsed;
        if (val.trim() === "" || isNaN(val)) {
          parsed = val === "true" ? true : val === "false" ? false : val;
        } else {
          if (val.indexOf("0x") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(".") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf("[") >= 0) {
              i = xmlData.indexOf("]>", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              textData = "";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || "") + (tagExp || "");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, "");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === ">") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports2.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = ["allowBooleanAttributes"];
    exports2.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  "node_modules/fast-xml-parser/src/nimndata.js"(exports2) {
    "use strict";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = "";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === "string") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case "":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports2.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  "node_modules/fast-xml-parser/src/node2json_str.js"(exports2) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || "";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = "{";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
          }
          jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + "}";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports2.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/json2xml.js"(exports2, module2) {
    "use strict";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      format: false,
      indentBy: "  ",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "cdataTagName",
      "cdataPositionChar",
      "format",
      "indentBy",
      "supressEmptyNode",
      "tagValueProcessor",
      "attrValueProcessor"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr("", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor("" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr("", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === "undefined") {
              } else if (item === null) {
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, "", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes("<")) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  "node_modules/fast-xml-parser/src/parser.js"(exports2) {
    "use strict";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports2.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports2.convertTonimn = require_nimndata().convert2nimn;
    exports2.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports2.convertToJson = nodeToJson.convertToJson;
    exports2.convertToJsonString = require_node2json_str().convertToJsonString;
    exports2.validate = validator.validate;
    exports2.j2xParser = require_json2xml();
    exports2.parseToNimn = function(xmlData, schema, options) {
      return exports2.convertTonimn(exports2.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAws_querySendRawEmailCommand = exports2.serializeAws_querySendEmailCommand = exports2.serializeAws_querySendCustomVerificationEmailCommand = exports2.serializeAws_querySendBulkTemplatedEmailCommand = exports2.serializeAws_querySendBounceCommand = exports2.serializeAws_queryReorderReceiptRuleSetCommand = exports2.serializeAws_queryPutIdentityPolicyCommand = exports2.serializeAws_queryPutConfigurationSetDeliveryOptionsCommand = exports2.serializeAws_queryListVerifiedEmailAddressesCommand = exports2.serializeAws_queryListTemplatesCommand = exports2.serializeAws_queryListReceiptRuleSetsCommand = exports2.serializeAws_queryListReceiptFiltersCommand = exports2.serializeAws_queryListIdentityPoliciesCommand = exports2.serializeAws_queryListIdentitiesCommand = exports2.serializeAws_queryListCustomVerificationEmailTemplatesCommand = exports2.serializeAws_queryListConfigurationSetsCommand = exports2.serializeAws_queryGetTemplateCommand = exports2.serializeAws_queryGetSendStatisticsCommand = exports2.serializeAws_queryGetSendQuotaCommand = exports2.serializeAws_queryGetIdentityVerificationAttributesCommand = exports2.serializeAws_queryGetIdentityPoliciesCommand = exports2.serializeAws_queryGetIdentityNotificationAttributesCommand = exports2.serializeAws_queryGetIdentityMailFromDomainAttributesCommand = exports2.serializeAws_queryGetIdentityDkimAttributesCommand = exports2.serializeAws_queryGetCustomVerificationEmailTemplateCommand = exports2.serializeAws_queryGetAccountSendingEnabledCommand = exports2.serializeAws_queryDescribeReceiptRuleSetCommand = exports2.serializeAws_queryDescribeReceiptRuleCommand = exports2.serializeAws_queryDescribeConfigurationSetCommand = exports2.serializeAws_queryDescribeActiveReceiptRuleSetCommand = exports2.serializeAws_queryDeleteVerifiedEmailAddressCommand = exports2.serializeAws_queryDeleteTemplateCommand = exports2.serializeAws_queryDeleteReceiptRuleSetCommand = exports2.serializeAws_queryDeleteReceiptRuleCommand = exports2.serializeAws_queryDeleteReceiptFilterCommand = exports2.serializeAws_queryDeleteIdentityPolicyCommand = exports2.serializeAws_queryDeleteIdentityCommand = exports2.serializeAws_queryDeleteCustomVerificationEmailTemplateCommand = exports2.serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = exports2.serializeAws_queryDeleteConfigurationSetEventDestinationCommand = exports2.serializeAws_queryDeleteConfigurationSetCommand = exports2.serializeAws_queryCreateTemplateCommand = exports2.serializeAws_queryCreateReceiptRuleSetCommand = exports2.serializeAws_queryCreateReceiptRuleCommand = exports2.serializeAws_queryCreateReceiptFilterCommand = exports2.serializeAws_queryCreateCustomVerificationEmailTemplateCommand = exports2.serializeAws_queryCreateConfigurationSetTrackingOptionsCommand = exports2.serializeAws_queryCreateConfigurationSetEventDestinationCommand = exports2.serializeAws_queryCreateConfigurationSetCommand = exports2.serializeAws_queryCloneReceiptRuleSetCommand = void 0;
    exports2.deserializeAws_queryGetIdentityNotificationAttributesCommand = exports2.deserializeAws_queryGetIdentityMailFromDomainAttributesCommand = exports2.deserializeAws_queryGetIdentityDkimAttributesCommand = exports2.deserializeAws_queryGetCustomVerificationEmailTemplateCommand = exports2.deserializeAws_queryGetAccountSendingEnabledCommand = exports2.deserializeAws_queryDescribeReceiptRuleSetCommand = exports2.deserializeAws_queryDescribeReceiptRuleCommand = exports2.deserializeAws_queryDescribeConfigurationSetCommand = exports2.deserializeAws_queryDescribeActiveReceiptRuleSetCommand = exports2.deserializeAws_queryDeleteVerifiedEmailAddressCommand = exports2.deserializeAws_queryDeleteTemplateCommand = exports2.deserializeAws_queryDeleteReceiptRuleSetCommand = exports2.deserializeAws_queryDeleteReceiptRuleCommand = exports2.deserializeAws_queryDeleteReceiptFilterCommand = exports2.deserializeAws_queryDeleteIdentityPolicyCommand = exports2.deserializeAws_queryDeleteIdentityCommand = exports2.deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand = exports2.deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = exports2.deserializeAws_queryDeleteConfigurationSetEventDestinationCommand = exports2.deserializeAws_queryDeleteConfigurationSetCommand = exports2.deserializeAws_queryCreateTemplateCommand = exports2.deserializeAws_queryCreateReceiptRuleSetCommand = exports2.deserializeAws_queryCreateReceiptRuleCommand = exports2.deserializeAws_queryCreateReceiptFilterCommand = exports2.deserializeAws_queryCreateCustomVerificationEmailTemplateCommand = exports2.deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand = exports2.deserializeAws_queryCreateConfigurationSetEventDestinationCommand = exports2.deserializeAws_queryCreateConfigurationSetCommand = exports2.deserializeAws_queryCloneReceiptRuleSetCommand = exports2.serializeAws_queryVerifyEmailIdentityCommand = exports2.serializeAws_queryVerifyEmailAddressCommand = exports2.serializeAws_queryVerifyDomainIdentityCommand = exports2.serializeAws_queryVerifyDomainDkimCommand = exports2.serializeAws_queryUpdateTemplateCommand = exports2.serializeAws_queryUpdateReceiptRuleCommand = exports2.serializeAws_queryUpdateCustomVerificationEmailTemplateCommand = exports2.serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = exports2.serializeAws_queryUpdateConfigurationSetSendingEnabledCommand = exports2.serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = exports2.serializeAws_queryUpdateConfigurationSetEventDestinationCommand = exports2.serializeAws_queryUpdateAccountSendingEnabledCommand = exports2.serializeAws_queryTestRenderTemplateCommand = exports2.serializeAws_querySetReceiptRulePositionCommand = exports2.serializeAws_querySetIdentityNotificationTopicCommand = exports2.serializeAws_querySetIdentityMailFromDomainCommand = exports2.serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = exports2.serializeAws_querySetIdentityFeedbackForwardingEnabledCommand = exports2.serializeAws_querySetIdentityDkimEnabledCommand = exports2.serializeAws_querySetActiveReceiptRuleSetCommand = exports2.serializeAws_querySendTemplatedEmailCommand = void 0;
    exports2.deserializeAws_queryVerifyEmailIdentityCommand = exports2.deserializeAws_queryVerifyEmailAddressCommand = exports2.deserializeAws_queryVerifyDomainIdentityCommand = exports2.deserializeAws_queryVerifyDomainDkimCommand = exports2.deserializeAws_queryUpdateTemplateCommand = exports2.deserializeAws_queryUpdateReceiptRuleCommand = exports2.deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand = exports2.deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = exports2.deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand = exports2.deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = exports2.deserializeAws_queryUpdateConfigurationSetEventDestinationCommand = exports2.deserializeAws_queryUpdateAccountSendingEnabledCommand = exports2.deserializeAws_queryTestRenderTemplateCommand = exports2.deserializeAws_querySetReceiptRulePositionCommand = exports2.deserializeAws_querySetIdentityNotificationTopicCommand = exports2.deserializeAws_querySetIdentityMailFromDomainCommand = exports2.deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = exports2.deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand = exports2.deserializeAws_querySetIdentityDkimEnabledCommand = exports2.deserializeAws_querySetActiveReceiptRuleSetCommand = exports2.deserializeAws_querySendTemplatedEmailCommand = exports2.deserializeAws_querySendRawEmailCommand = exports2.deserializeAws_querySendEmailCommand = exports2.deserializeAws_querySendCustomVerificationEmailCommand = exports2.deserializeAws_querySendBulkTemplatedEmailCommand = exports2.deserializeAws_querySendBounceCommand = exports2.deserializeAws_queryReorderReceiptRuleSetCommand = exports2.deserializeAws_queryPutIdentityPolicyCommand = exports2.deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand = exports2.deserializeAws_queryListVerifiedEmailAddressesCommand = exports2.deserializeAws_queryListTemplatesCommand = exports2.deserializeAws_queryListReceiptRuleSetsCommand = exports2.deserializeAws_queryListReceiptFiltersCommand = exports2.deserializeAws_queryListIdentityPoliciesCommand = exports2.deserializeAws_queryListIdentitiesCommand = exports2.deserializeAws_queryListCustomVerificationEmailTemplatesCommand = exports2.deserializeAws_queryListConfigurationSetsCommand = exports2.deserializeAws_queryGetTemplateCommand = exports2.deserializeAws_queryGetSendStatisticsCommand = exports2.deserializeAws_queryGetSendQuotaCommand = exports2.deserializeAws_queryGetIdentityVerificationAttributesCommand = exports2.deserializeAws_queryGetIdentityPoliciesCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_0();
    var SESServiceException_1 = require_SESServiceException();
    var serializeAws_queryCloneReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCloneReceiptRuleSetRequest(input, context)), {
        Action: "CloneReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCloneReceiptRuleSetCommand = serializeAws_queryCloneReceiptRuleSetCommand;
    var serializeAws_queryCreateConfigurationSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateConfigurationSetRequest(input, context)), {
        Action: "CreateConfigurationSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateConfigurationSetCommand = serializeAws_queryCreateConfigurationSetCommand;
    var serializeAws_queryCreateConfigurationSetEventDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateConfigurationSetEventDestinationRequest(input, context)), {
        Action: "CreateConfigurationSetEventDestination",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateConfigurationSetEventDestinationCommand = serializeAws_queryCreateConfigurationSetEventDestinationCommand;
    var serializeAws_queryCreateConfigurationSetTrackingOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateConfigurationSetTrackingOptionsRequest(input, context)), {
        Action: "CreateConfigurationSetTrackingOptions",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateConfigurationSetTrackingOptionsCommand = serializeAws_queryCreateConfigurationSetTrackingOptionsCommand;
    var serializeAws_queryCreateCustomVerificationEmailTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateCustomVerificationEmailTemplateRequest(input, context)), {
        Action: "CreateCustomVerificationEmailTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateCustomVerificationEmailTemplateCommand = serializeAws_queryCreateCustomVerificationEmailTemplateCommand;
    var serializeAws_queryCreateReceiptFilterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateReceiptFilterRequest(input, context)), {
        Action: "CreateReceiptFilter",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateReceiptFilterCommand = serializeAws_queryCreateReceiptFilterCommand;
    var serializeAws_queryCreateReceiptRuleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateReceiptRuleRequest(input, context)), {
        Action: "CreateReceiptRule",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateReceiptRuleCommand = serializeAws_queryCreateReceiptRuleCommand;
    var serializeAws_queryCreateReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateReceiptRuleSetRequest(input, context)), {
        Action: "CreateReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateReceiptRuleSetCommand = serializeAws_queryCreateReceiptRuleSetCommand;
    var serializeAws_queryCreateTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateTemplateRequest(input, context)), {
        Action: "CreateTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryCreateTemplateCommand = serializeAws_queryCreateTemplateCommand;
    var serializeAws_queryDeleteConfigurationSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteConfigurationSetRequest(input, context)), {
        Action: "DeleteConfigurationSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteConfigurationSetCommand = serializeAws_queryDeleteConfigurationSetCommand;
    var serializeAws_queryDeleteConfigurationSetEventDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteConfigurationSetEventDestinationRequest(input, context)), {
        Action: "DeleteConfigurationSetEventDestination",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteConfigurationSetEventDestinationCommand = serializeAws_queryDeleteConfigurationSetEventDestinationCommand;
    var serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest(input, context)), {
        Action: "DeleteConfigurationSetTrackingOptions",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand;
    var serializeAws_queryDeleteCustomVerificationEmailTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteCustomVerificationEmailTemplateRequest(input, context)), {
        Action: "DeleteCustomVerificationEmailTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteCustomVerificationEmailTemplateCommand = serializeAws_queryDeleteCustomVerificationEmailTemplateCommand;
    var serializeAws_queryDeleteIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteIdentityRequest(input, context)), {
        Action: "DeleteIdentity",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteIdentityCommand = serializeAws_queryDeleteIdentityCommand;
    var serializeAws_queryDeleteIdentityPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteIdentityPolicyRequest(input, context)), {
        Action: "DeleteIdentityPolicy",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteIdentityPolicyCommand = serializeAws_queryDeleteIdentityPolicyCommand;
    var serializeAws_queryDeleteReceiptFilterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteReceiptFilterRequest(input, context)), {
        Action: "DeleteReceiptFilter",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteReceiptFilterCommand = serializeAws_queryDeleteReceiptFilterCommand;
    var serializeAws_queryDeleteReceiptRuleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteReceiptRuleRequest(input, context)), {
        Action: "DeleteReceiptRule",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteReceiptRuleCommand = serializeAws_queryDeleteReceiptRuleCommand;
    var serializeAws_queryDeleteReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteReceiptRuleSetRequest(input, context)), {
        Action: "DeleteReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteReceiptRuleSetCommand = serializeAws_queryDeleteReceiptRuleSetCommand;
    var serializeAws_queryDeleteTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteTemplateRequest(input, context)), {
        Action: "DeleteTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteTemplateCommand = serializeAws_queryDeleteTemplateCommand;
    var serializeAws_queryDeleteVerifiedEmailAddressCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteVerifiedEmailAddressRequest(input, context)), {
        Action: "DeleteVerifiedEmailAddress",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDeleteVerifiedEmailAddressCommand = serializeAws_queryDeleteVerifiedEmailAddressCommand;
    var serializeAws_queryDescribeActiveReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeActiveReceiptRuleSetRequest(input, context)), {
        Action: "DescribeActiveReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDescribeActiveReceiptRuleSetCommand = serializeAws_queryDescribeActiveReceiptRuleSetCommand;
    var serializeAws_queryDescribeConfigurationSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeConfigurationSetRequest(input, context)), {
        Action: "DescribeConfigurationSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDescribeConfigurationSetCommand = serializeAws_queryDescribeConfigurationSetCommand;
    var serializeAws_queryDescribeReceiptRuleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeReceiptRuleRequest(input, context)), {
        Action: "DescribeReceiptRule",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDescribeReceiptRuleCommand = serializeAws_queryDescribeReceiptRuleCommand;
    var serializeAws_queryDescribeReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeReceiptRuleSetRequest(input, context)), {
        Action: "DescribeReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDescribeReceiptRuleSetCommand = serializeAws_queryDescribeReceiptRuleSetCommand;
    var serializeAws_queryGetAccountSendingEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetAccountSendingEnabled",
        Version: "2010-12-01"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetAccountSendingEnabledCommand = serializeAws_queryGetAccountSendingEnabledCommand;
    var serializeAws_queryGetCustomVerificationEmailTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetCustomVerificationEmailTemplateRequest(input, context)), {
        Action: "GetCustomVerificationEmailTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetCustomVerificationEmailTemplateCommand = serializeAws_queryGetCustomVerificationEmailTemplateCommand;
    var serializeAws_queryGetIdentityDkimAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetIdentityDkimAttributesRequest(input, context)), {
        Action: "GetIdentityDkimAttributes",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetIdentityDkimAttributesCommand = serializeAws_queryGetIdentityDkimAttributesCommand;
    var serializeAws_queryGetIdentityMailFromDomainAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetIdentityMailFromDomainAttributesRequest(input, context)), {
        Action: "GetIdentityMailFromDomainAttributes",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetIdentityMailFromDomainAttributesCommand = serializeAws_queryGetIdentityMailFromDomainAttributesCommand;
    var serializeAws_queryGetIdentityNotificationAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetIdentityNotificationAttributesRequest(input, context)), {
        Action: "GetIdentityNotificationAttributes",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetIdentityNotificationAttributesCommand = serializeAws_queryGetIdentityNotificationAttributesCommand;
    var serializeAws_queryGetIdentityPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetIdentityPoliciesRequest(input, context)), {
        Action: "GetIdentityPolicies",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetIdentityPoliciesCommand = serializeAws_queryGetIdentityPoliciesCommand;
    var serializeAws_queryGetIdentityVerificationAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetIdentityVerificationAttributesRequest(input, context)), {
        Action: "GetIdentityVerificationAttributes",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetIdentityVerificationAttributesCommand = serializeAws_queryGetIdentityVerificationAttributesCommand;
    var serializeAws_queryGetSendQuotaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetSendQuota",
        Version: "2010-12-01"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetSendQuotaCommand = serializeAws_queryGetSendQuotaCommand;
    var serializeAws_queryGetSendStatisticsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetSendStatistics",
        Version: "2010-12-01"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetSendStatisticsCommand = serializeAws_queryGetSendStatisticsCommand;
    var serializeAws_queryGetTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetTemplateRequest(input, context)), {
        Action: "GetTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetTemplateCommand = serializeAws_queryGetTemplateCommand;
    var serializeAws_queryListConfigurationSetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListConfigurationSetsRequest(input, context)), {
        Action: "ListConfigurationSets",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListConfigurationSetsCommand = serializeAws_queryListConfigurationSetsCommand;
    var serializeAws_queryListCustomVerificationEmailTemplatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListCustomVerificationEmailTemplatesRequest(input, context)), {
        Action: "ListCustomVerificationEmailTemplates",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListCustomVerificationEmailTemplatesCommand = serializeAws_queryListCustomVerificationEmailTemplatesCommand;
    var serializeAws_queryListIdentitiesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListIdentitiesRequest(input, context)), {
        Action: "ListIdentities",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListIdentitiesCommand = serializeAws_queryListIdentitiesCommand;
    var serializeAws_queryListIdentityPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListIdentityPoliciesRequest(input, context)), {
        Action: "ListIdentityPolicies",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListIdentityPoliciesCommand = serializeAws_queryListIdentityPoliciesCommand;
    var serializeAws_queryListReceiptFiltersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListReceiptFiltersRequest(input, context)), {
        Action: "ListReceiptFilters",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListReceiptFiltersCommand = serializeAws_queryListReceiptFiltersCommand;
    var serializeAws_queryListReceiptRuleSetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListReceiptRuleSetsRequest(input, context)), {
        Action: "ListReceiptRuleSets",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListReceiptRuleSetsCommand = serializeAws_queryListReceiptRuleSetsCommand;
    var serializeAws_queryListTemplatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListTemplatesRequest(input, context)), {
        Action: "ListTemplates",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListTemplatesCommand = serializeAws_queryListTemplatesCommand;
    var serializeAws_queryListVerifiedEmailAddressesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "ListVerifiedEmailAddresses",
        Version: "2010-12-01"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryListVerifiedEmailAddressesCommand = serializeAws_queryListVerifiedEmailAddressesCommand;
    var serializeAws_queryPutConfigurationSetDeliveryOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryPutConfigurationSetDeliveryOptionsRequest(input, context)), {
        Action: "PutConfigurationSetDeliveryOptions",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryPutConfigurationSetDeliveryOptionsCommand = serializeAws_queryPutConfigurationSetDeliveryOptionsCommand;
    var serializeAws_queryPutIdentityPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryPutIdentityPolicyRequest(input, context)), {
        Action: "PutIdentityPolicy",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryPutIdentityPolicyCommand = serializeAws_queryPutIdentityPolicyCommand;
    var serializeAws_queryReorderReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryReorderReceiptRuleSetRequest(input, context)), {
        Action: "ReorderReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryReorderReceiptRuleSetCommand = serializeAws_queryReorderReceiptRuleSetCommand;
    var serializeAws_querySendBounceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendBounceRequest(input, context)), {
        Action: "SendBounce",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendBounceCommand = serializeAws_querySendBounceCommand;
    var serializeAws_querySendBulkTemplatedEmailCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendBulkTemplatedEmailRequest(input, context)), {
        Action: "SendBulkTemplatedEmail",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendBulkTemplatedEmailCommand = serializeAws_querySendBulkTemplatedEmailCommand;
    var serializeAws_querySendCustomVerificationEmailCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendCustomVerificationEmailRequest(input, context)), {
        Action: "SendCustomVerificationEmail",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendCustomVerificationEmailCommand = serializeAws_querySendCustomVerificationEmailCommand;
    var serializeAws_querySendEmailCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendEmailRequest(input, context)), {
        Action: "SendEmail",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendEmailCommand = serializeAws_querySendEmailCommand;
    var serializeAws_querySendRawEmailCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendRawEmailRequest(input, context)), {
        Action: "SendRawEmail",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendRawEmailCommand = serializeAws_querySendRawEmailCommand;
    var serializeAws_querySendTemplatedEmailCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySendTemplatedEmailRequest(input, context)), {
        Action: "SendTemplatedEmail",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySendTemplatedEmailCommand = serializeAws_querySendTemplatedEmailCommand;
    var serializeAws_querySetActiveReceiptRuleSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetActiveReceiptRuleSetRequest(input, context)), {
        Action: "SetActiveReceiptRuleSet",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetActiveReceiptRuleSetCommand = serializeAws_querySetActiveReceiptRuleSetCommand;
    var serializeAws_querySetIdentityDkimEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetIdentityDkimEnabledRequest(input, context)), {
        Action: "SetIdentityDkimEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetIdentityDkimEnabledCommand = serializeAws_querySetIdentityDkimEnabledCommand;
    var serializeAws_querySetIdentityFeedbackForwardingEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetIdentityFeedbackForwardingEnabledRequest(input, context)), {
        Action: "SetIdentityFeedbackForwardingEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetIdentityFeedbackForwardingEnabledCommand = serializeAws_querySetIdentityFeedbackForwardingEnabledCommand;
    var serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest(input, context)), {
        Action: "SetIdentityHeadersInNotificationsEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand;
    var serializeAws_querySetIdentityMailFromDomainCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetIdentityMailFromDomainRequest(input, context)), {
        Action: "SetIdentityMailFromDomain",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetIdentityMailFromDomainCommand = serializeAws_querySetIdentityMailFromDomainCommand;
    var serializeAws_querySetIdentityNotificationTopicCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetIdentityNotificationTopicRequest(input, context)), {
        Action: "SetIdentityNotificationTopic",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetIdentityNotificationTopicCommand = serializeAws_querySetIdentityNotificationTopicCommand;
    var serializeAws_querySetReceiptRulePositionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_querySetReceiptRulePositionRequest(input, context)), {
        Action: "SetReceiptRulePosition",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_querySetReceiptRulePositionCommand = serializeAws_querySetReceiptRulePositionCommand;
    var serializeAws_queryTestRenderTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryTestRenderTemplateRequest(input, context)), {
        Action: "TestRenderTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryTestRenderTemplateCommand = serializeAws_queryTestRenderTemplateCommand;
    var serializeAws_queryUpdateAccountSendingEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateAccountSendingEnabledRequest(input, context)), {
        Action: "UpdateAccountSendingEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateAccountSendingEnabledCommand = serializeAws_queryUpdateAccountSendingEnabledCommand;
    var serializeAws_queryUpdateConfigurationSetEventDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateConfigurationSetEventDestinationRequest(input, context)), {
        Action: "UpdateConfigurationSetEventDestination",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateConfigurationSetEventDestinationCommand = serializeAws_queryUpdateConfigurationSetEventDestinationCommand;
    var serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest(input, context)), {
        Action: "UpdateConfigurationSetReputationMetricsEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand;
    var serializeAws_queryUpdateConfigurationSetSendingEnabledCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateConfigurationSetSendingEnabledRequest(input, context)), {
        Action: "UpdateConfigurationSetSendingEnabled",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateConfigurationSetSendingEnabledCommand = serializeAws_queryUpdateConfigurationSetSendingEnabledCommand;
    var serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest(input, context)), {
        Action: "UpdateConfigurationSetTrackingOptions",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand;
    var serializeAws_queryUpdateCustomVerificationEmailTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateCustomVerificationEmailTemplateRequest(input, context)), {
        Action: "UpdateCustomVerificationEmailTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateCustomVerificationEmailTemplateCommand = serializeAws_queryUpdateCustomVerificationEmailTemplateCommand;
    var serializeAws_queryUpdateReceiptRuleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateReceiptRuleRequest(input, context)), {
        Action: "UpdateReceiptRule",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateReceiptRuleCommand = serializeAws_queryUpdateReceiptRuleCommand;
    var serializeAws_queryUpdateTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryUpdateTemplateRequest(input, context)), {
        Action: "UpdateTemplate",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryUpdateTemplateCommand = serializeAws_queryUpdateTemplateCommand;
    var serializeAws_queryVerifyDomainDkimCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryVerifyDomainDkimRequest(input, context)), {
        Action: "VerifyDomainDkim",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryVerifyDomainDkimCommand = serializeAws_queryVerifyDomainDkimCommand;
    var serializeAws_queryVerifyDomainIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryVerifyDomainIdentityRequest(input, context)), {
        Action: "VerifyDomainIdentity",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryVerifyDomainIdentityCommand = serializeAws_queryVerifyDomainIdentityCommand;
    var serializeAws_queryVerifyEmailAddressCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryVerifyEmailAddressRequest(input, context)), {
        Action: "VerifyEmailAddress",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryVerifyEmailAddressCommand = serializeAws_queryVerifyEmailAddressCommand;
    var serializeAws_queryVerifyEmailIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryVerifyEmailIdentityRequest(input, context)), {
        Action: "VerifyEmailIdentity",
        Version: "2010-12-01"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryVerifyEmailIdentityCommand = serializeAws_queryVerifyEmailIdentityCommand;
    var deserializeAws_queryCloneReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCloneReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCloneReceiptRuleSetResponse(data.CloneReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCloneReceiptRuleSetCommand = deserializeAws_queryCloneReceiptRuleSetCommand;
    var deserializeAws_queryCloneReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ses#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateConfigurationSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateConfigurationSetResponse(data.CreateConfigurationSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateConfigurationSetCommand = deserializeAws_queryCreateConfigurationSetCommand;
    var deserializeAws_queryCreateConfigurationSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetAlreadyExistsException":
        case "com.amazonaws.ses#ConfigurationSetAlreadyExistsException":
          throw await deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidConfigurationSetException":
        case "com.amazonaws.ses#InvalidConfigurationSetException":
          throw await deserializeAws_queryInvalidConfigurationSetExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateConfigurationSetEventDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetEventDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateConfigurationSetEventDestinationResponse(data.CreateConfigurationSetEventDestinationResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateConfigurationSetEventDestinationCommand = deserializeAws_queryCreateConfigurationSetEventDestinationCommand;
    var deserializeAws_queryCreateConfigurationSetEventDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationAlreadyExistsException":
        case "com.amazonaws.ses#EventDestinationAlreadyExistsException":
          throw await deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidCloudWatchDestinationException":
        case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
          throw await deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context);
        case "InvalidFirehoseDestinationException":
        case "com.amazonaws.ses#InvalidFirehoseDestinationException":
          throw await deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context);
        case "InvalidSNSDestinationException":
        case "com.amazonaws.ses#InvalidSNSDestinationException":
          throw await deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse(data.CreateConfigurationSetTrackingOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand = deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand;
    var deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidTrackingOptionsException":
        case "com.amazonaws.ses#InvalidTrackingOptionsException":
          throw await deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context);
        case "TrackingOptionsAlreadyExistsException":
        case "com.amazonaws.ses#TrackingOptionsAlreadyExistsException":
          throw await deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateCustomVerificationEmailTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateCustomVerificationEmailTemplateCommand = deserializeAws_queryCreateCustomVerificationEmailTemplateCommand;
    var deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomVerificationEmailInvalidContentException":
        case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
          throw await deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateAlreadyExistsException":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":
          throw await deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerifiedException":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
          throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateReceiptFilterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptFilterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateReceiptFilterResponse(data.CreateReceiptFilterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateReceiptFilterCommand = deserializeAws_queryCreateReceiptFilterCommand;
    var deserializeAws_queryCreateReceiptFilterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ses#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateReceiptRuleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptRuleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateReceiptRuleResponse(data.CreateReceiptRuleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateReceiptRuleCommand = deserializeAws_queryCreateReceiptRuleCommand;
    var deserializeAws_queryCreateReceiptRuleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ses#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidLambdaFunctionException":
        case "com.amazonaws.ses#InvalidLambdaFunctionException":
          throw await deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context);
        case "InvalidS3ConfigurationException":
        case "com.amazonaws.ses#InvalidS3ConfigurationException":
          throw await deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidSnsTopicException":
        case "com.amazonaws.ses#InvalidSnsTopicException":
          throw await deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleDoesNotExistException":
        case "com.amazonaws.ses#RuleDoesNotExistException":
          throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateReceiptRuleSetResponse(data.CreateReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateReceiptRuleSetCommand = deserializeAws_queryCreateReceiptRuleSetCommand;
    var deserializeAws_queryCreateReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ses#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateTemplateResponse(data.CreateTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryCreateTemplateCommand = deserializeAws_queryCreateTemplateCommand;
    var deserializeAws_queryCreateTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ses#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidTemplateException":
        case "com.amazonaws.ses#InvalidTemplateException":
          throw await deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteConfigurationSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteConfigurationSetResponse(data.DeleteConfigurationSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteConfigurationSetCommand = deserializeAws_queryDeleteConfigurationSetCommand;
    var deserializeAws_queryDeleteConfigurationSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteConfigurationSetEventDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteConfigurationSetEventDestinationResponse(data.DeleteConfigurationSetEventDestinationResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteConfigurationSetEventDestinationCommand = deserializeAws_queryDeleteConfigurationSetEventDestinationCommand;
    var deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationDoesNotExistException":
        case "com.amazonaws.ses#EventDestinationDoesNotExistException":
          throw await deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse(data.DeleteConfigurationSetTrackingOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand;
    var deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "TrackingOptionsDoesNotExistException":
        case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
          throw await deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand = deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand;
    var deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteIdentityResponse(data.DeleteIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteIdentityCommand = deserializeAws_queryDeleteIdentityCommand;
    var deserializeAws_queryDeleteIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteIdentityPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteIdentityPolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteIdentityPolicyResponse(data.DeleteIdentityPolicyResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteIdentityPolicyCommand = deserializeAws_queryDeleteIdentityPolicyCommand;
    var deserializeAws_queryDeleteIdentityPolicyCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteReceiptFilterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptFilterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteReceiptFilterResponse(data.DeleteReceiptFilterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteReceiptFilterCommand = deserializeAws_queryDeleteReceiptFilterCommand;
    var deserializeAws_queryDeleteReceiptFilterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteReceiptRuleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptRuleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteReceiptRuleResponse(data.DeleteReceiptRuleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteReceiptRuleCommand = deserializeAws_queryDeleteReceiptRuleCommand;
    var deserializeAws_queryDeleteReceiptRuleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteReceiptRuleSetResponse(data.DeleteReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteReceiptRuleSetCommand = deserializeAws_queryDeleteReceiptRuleSetCommand;
    var deserializeAws_queryDeleteReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CannotDeleteException":
        case "com.amazonaws.ses#CannotDeleteException":
          throw await deserializeAws_queryCannotDeleteExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteTemplateResponse(data.DeleteTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteTemplateCommand = deserializeAws_queryDeleteTemplateCommand;
    var deserializeAws_queryDeleteTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteVerifiedEmailAddressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteVerifiedEmailAddressCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDeleteVerifiedEmailAddressCommand = deserializeAws_queryDeleteVerifiedEmailAddressCommand;
    var deserializeAws_queryDeleteVerifiedEmailAddressCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeActiveReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeActiveReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeActiveReceiptRuleSetResponse(data.DescribeActiveReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDescribeActiveReceiptRuleSetCommand = deserializeAws_queryDescribeActiveReceiptRuleSetCommand;
    var deserializeAws_queryDescribeActiveReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeConfigurationSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeConfigurationSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeConfigurationSetResponse(data.DescribeConfigurationSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDescribeConfigurationSetCommand = deserializeAws_queryDescribeConfigurationSetCommand;
    var deserializeAws_queryDescribeConfigurationSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeReceiptRuleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReceiptRuleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeReceiptRuleResponse(data.DescribeReceiptRuleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDescribeReceiptRuleCommand = deserializeAws_queryDescribeReceiptRuleCommand;
    var deserializeAws_queryDescribeReceiptRuleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleDoesNotExistException":
        case "com.amazonaws.ses#RuleDoesNotExistException":
          throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeReceiptRuleSetResponse(data.DescribeReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDescribeReceiptRuleSetCommand = deserializeAws_queryDescribeReceiptRuleSetCommand;
    var deserializeAws_queryDescribeReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccountSendingEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccountSendingEnabledCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccountSendingEnabledResponse(data.GetAccountSendingEnabledResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetAccountSendingEnabledCommand = deserializeAws_queryGetAccountSendingEnabledCommand;
    var deserializeAws_queryGetAccountSendingEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCustomVerificationEmailTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCustomVerificationEmailTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCustomVerificationEmailTemplateResponse(data.GetCustomVerificationEmailTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetCustomVerificationEmailTemplateCommand = deserializeAws_queryGetCustomVerificationEmailTemplateCommand;
    var deserializeAws_queryGetCustomVerificationEmailTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomVerificationEmailTemplateDoesNotExistException":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
          throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetIdentityDkimAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityDkimAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetIdentityDkimAttributesResponse(data.GetIdentityDkimAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetIdentityDkimAttributesCommand = deserializeAws_queryGetIdentityDkimAttributesCommand;
    var deserializeAws_queryGetIdentityDkimAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetIdentityMailFromDomainAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetIdentityMailFromDomainAttributesResponse(data.GetIdentityMailFromDomainAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetIdentityMailFromDomainAttributesCommand = deserializeAws_queryGetIdentityMailFromDomainAttributesCommand;
    var deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetIdentityNotificationAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityNotificationAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetIdentityNotificationAttributesResponse(data.GetIdentityNotificationAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetIdentityNotificationAttributesCommand = deserializeAws_queryGetIdentityNotificationAttributesCommand;
    var deserializeAws_queryGetIdentityNotificationAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetIdentityPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityPoliciesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetIdentityPoliciesResponse(data.GetIdentityPoliciesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetIdentityPoliciesCommand = deserializeAws_queryGetIdentityPoliciesCommand;
    var deserializeAws_queryGetIdentityPoliciesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetIdentityVerificationAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityVerificationAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetIdentityVerificationAttributesResponse(data.GetIdentityVerificationAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetIdentityVerificationAttributesCommand = deserializeAws_queryGetIdentityVerificationAttributesCommand;
    var deserializeAws_queryGetIdentityVerificationAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSendQuotaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSendQuotaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSendQuotaResponse(data.GetSendQuotaResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSendQuotaCommand = deserializeAws_queryGetSendQuotaCommand;
    var deserializeAws_queryGetSendQuotaCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSendStatisticsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSendStatisticsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSendStatisticsResponse(data.GetSendStatisticsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSendStatisticsCommand = deserializeAws_queryGetSendStatisticsCommand;
    var deserializeAws_queryGetSendStatisticsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetTemplateResponse(data.GetTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetTemplateCommand = deserializeAws_queryGetTemplateCommand;
    var deserializeAws_queryGetTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "TemplateDoesNotExistException":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
          throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListConfigurationSetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListConfigurationSetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListConfigurationSetsResponse(data.ListConfigurationSetsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListConfigurationSetsCommand = deserializeAws_queryListConfigurationSetsCommand;
    var deserializeAws_queryListConfigurationSetsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListCustomVerificationEmailTemplatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListCustomVerificationEmailTemplatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListCustomVerificationEmailTemplatesResponse(data.ListCustomVerificationEmailTemplatesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListCustomVerificationEmailTemplatesCommand = deserializeAws_queryListCustomVerificationEmailTemplatesCommand;
    var deserializeAws_queryListCustomVerificationEmailTemplatesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListIdentitiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListIdentitiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListIdentitiesResponse(data.ListIdentitiesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListIdentitiesCommand = deserializeAws_queryListIdentitiesCommand;
    var deserializeAws_queryListIdentitiesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListIdentityPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListIdentityPoliciesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListIdentityPoliciesResponse(data.ListIdentityPoliciesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListIdentityPoliciesCommand = deserializeAws_queryListIdentityPoliciesCommand;
    var deserializeAws_queryListIdentityPoliciesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListReceiptFiltersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListReceiptFiltersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListReceiptFiltersResponse(data.ListReceiptFiltersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListReceiptFiltersCommand = deserializeAws_queryListReceiptFiltersCommand;
    var deserializeAws_queryListReceiptFiltersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListReceiptRuleSetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListReceiptRuleSetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListReceiptRuleSetsResponse(data.ListReceiptRuleSetsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListReceiptRuleSetsCommand = deserializeAws_queryListReceiptRuleSetsCommand;
    var deserializeAws_queryListReceiptRuleSetsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListTemplatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListTemplatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListTemplatesResponse(data.ListTemplatesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListTemplatesCommand = deserializeAws_queryListTemplatesCommand;
    var deserializeAws_queryListTemplatesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListVerifiedEmailAddressesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListVerifiedEmailAddressesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListVerifiedEmailAddressesResponse(data.ListVerifiedEmailAddressesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryListVerifiedEmailAddressesCommand = deserializeAws_queryListVerifiedEmailAddressesCommand;
    var deserializeAws_queryListVerifiedEmailAddressesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse(data.PutConfigurationSetDeliveryOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand = deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand;
    var deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidDeliveryOptionsException":
        case "com.amazonaws.ses#InvalidDeliveryOptionsException":
          throw await deserializeAws_queryInvalidDeliveryOptionsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryPutIdentityPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutIdentityPolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPutIdentityPolicyResponse(data.PutIdentityPolicyResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryPutIdentityPolicyCommand = deserializeAws_queryPutIdentityPolicyCommand;
    var deserializeAws_queryPutIdentityPolicyCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidPolicyException":
        case "com.amazonaws.ses#InvalidPolicyException":
          throw await deserializeAws_queryInvalidPolicyExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryReorderReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryReorderReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryReorderReceiptRuleSetResponse(data.ReorderReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryReorderReceiptRuleSetCommand = deserializeAws_queryReorderReceiptRuleSetCommand;
    var deserializeAws_queryReorderReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleDoesNotExistException":
        case "com.amazonaws.ses#RuleDoesNotExistException":
          throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendBounceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendBounceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendBounceResponse(data.SendBounceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendBounceCommand = deserializeAws_querySendBounceCommand;
    var deserializeAws_querySendBounceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendBulkTemplatedEmailCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendBulkTemplatedEmailCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendBulkTemplatedEmailResponse(data.SendBulkTemplatedEmailResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendBulkTemplatedEmailCommand = deserializeAws_querySendBulkTemplatedEmailCommand;
    var deserializeAws_querySendBulkTemplatedEmailCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
          throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
          throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
          throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "TemplateDoesNotExistException":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
          throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendCustomVerificationEmailCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendCustomVerificationEmailCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendCustomVerificationEmailResponse(data.SendCustomVerificationEmailResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendCustomVerificationEmailCommand = deserializeAws_querySendCustomVerificationEmailCommand;
    var deserializeAws_querySendCustomVerificationEmailCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateDoesNotExistException":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
          throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerifiedException":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
          throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "ProductionAccessNotGrantedException":
        case "com.amazonaws.ses#ProductionAccessNotGrantedException":
          throw await deserializeAws_queryProductionAccessNotGrantedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendEmailCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendEmailCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendEmailResponse(data.SendEmailResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendEmailCommand = deserializeAws_querySendEmailCommand;
    var deserializeAws_querySendEmailCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
          throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
          throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
          throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendRawEmailCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendRawEmailCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendRawEmailResponse(data.SendRawEmailResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendRawEmailCommand = deserializeAws_querySendRawEmailCommand;
    var deserializeAws_querySendRawEmailCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
          throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
          throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
          throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySendTemplatedEmailCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySendTemplatedEmailCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySendTemplatedEmailResponse(data.SendTemplatedEmailResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySendTemplatedEmailCommand = deserializeAws_querySendTemplatedEmailCommand;
    var deserializeAws_querySendTemplatedEmailCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
          throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
          throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
          throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
          throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "TemplateDoesNotExistException":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
          throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetActiveReceiptRuleSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetActiveReceiptRuleSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetActiveReceiptRuleSetResponse(data.SetActiveReceiptRuleSetResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetActiveReceiptRuleSetCommand = deserializeAws_querySetActiveReceiptRuleSetCommand;
    var deserializeAws_querySetActiveReceiptRuleSetCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetIdentityDkimEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityDkimEnabledCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetIdentityDkimEnabledResponse(data.SetIdentityDkimEnabledResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetIdentityDkimEnabledCommand = deserializeAws_querySetIdentityDkimEnabledCommand;
    var deserializeAws_querySetIdentityDkimEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse(data.SetIdentityFeedbackForwardingEnabledResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand = deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand;
    var deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse(data.SetIdentityHeadersInNotificationsEnabledResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand;
    var deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetIdentityMailFromDomainCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityMailFromDomainCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetIdentityMailFromDomainResponse(data.SetIdentityMailFromDomainResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetIdentityMailFromDomainCommand = deserializeAws_querySetIdentityMailFromDomainCommand;
    var deserializeAws_querySetIdentityMailFromDomainCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetIdentityNotificationTopicCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityNotificationTopicCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetIdentityNotificationTopicResponse(data.SetIdentityNotificationTopicResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetIdentityNotificationTopicCommand = deserializeAws_querySetIdentityNotificationTopicCommand;
    var deserializeAws_querySetIdentityNotificationTopicCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_querySetReceiptRulePositionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetReceiptRulePositionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetReceiptRulePositionResponse(data.SetReceiptRulePositionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_querySetReceiptRulePositionCommand = deserializeAws_querySetReceiptRulePositionCommand;
    var deserializeAws_querySetReceiptRulePositionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RuleDoesNotExistException":
        case "com.amazonaws.ses#RuleDoesNotExistException":
          throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryTestRenderTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTestRenderTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryTestRenderTemplateResponse(data.TestRenderTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryTestRenderTemplateCommand = deserializeAws_queryTestRenderTemplateCommand;
    var deserializeAws_queryTestRenderTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRenderingParameterException":
        case "com.amazonaws.ses#InvalidRenderingParameterException":
          throw await deserializeAws_queryInvalidRenderingParameterExceptionResponse(parsedOutput, context);
        case "MissingRenderingAttributeException":
        case "com.amazonaws.ses#MissingRenderingAttributeException":
          throw await deserializeAws_queryMissingRenderingAttributeExceptionResponse(parsedOutput, context);
        case "TemplateDoesNotExistException":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
          throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateAccountSendingEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAccountSendingEnabledCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateAccountSendingEnabledCommand = deserializeAws_queryUpdateAccountSendingEnabledCommand;
    var deserializeAws_queryUpdateAccountSendingEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateConfigurationSetEventDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateConfigurationSetEventDestinationResponse(data.UpdateConfigurationSetEventDestinationResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateConfigurationSetEventDestinationCommand = deserializeAws_queryUpdateConfigurationSetEventDestinationCommand;
    var deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationDoesNotExistException":
        case "com.amazonaws.ses#EventDestinationDoesNotExistException":
          throw await deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidCloudWatchDestinationException":
        case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
          throw await deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context);
        case "InvalidFirehoseDestinationException":
        case "com.amazonaws.ses#InvalidFirehoseDestinationException":
          throw await deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context);
        case "InvalidSNSDestinationException":
        case "com.amazonaws.ses#InvalidSNSDestinationException":
          throw await deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand;
    var deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand = deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand;
    var deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse(data.UpdateConfigurationSetTrackingOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand;
    var deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConfigurationSetDoesNotExistException":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
          throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidTrackingOptionsException":
        case "com.amazonaws.ses#InvalidTrackingOptionsException":
          throw await deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context);
        case "TrackingOptionsDoesNotExistException":
        case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
          throw await deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand = deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand;
    var deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomVerificationEmailInvalidContentException":
        case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
          throw await deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateDoesNotExistException":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
          throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerifiedException":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
          throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateReceiptRuleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateReceiptRuleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateReceiptRuleResponse(data.UpdateReceiptRuleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateReceiptRuleCommand = deserializeAws_queryUpdateReceiptRuleCommand;
    var deserializeAws_queryUpdateReceiptRuleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidLambdaFunctionException":
        case "com.amazonaws.ses#InvalidLambdaFunctionException":
          throw await deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context);
        case "InvalidS3ConfigurationException":
        case "com.amazonaws.ses#InvalidS3ConfigurationException":
          throw await deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidSnsTopicException":
        case "com.amazonaws.ses#InvalidSnsTopicException":
          throw await deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ses#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleDoesNotExistException":
        case "com.amazonaws.ses#RuleDoesNotExistException":
          throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExistException":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
          throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryUpdateTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateTemplateResponse(data.UpdateTemplateResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryUpdateTemplateCommand = deserializeAws_queryUpdateTemplateCommand;
    var deserializeAws_queryUpdateTemplateCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidTemplateException":
        case "com.amazonaws.ses#InvalidTemplateException":
          throw await deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context);
        case "TemplateDoesNotExistException":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
          throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryVerifyDomainDkimCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyDomainDkimCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryVerifyDomainDkimResponse(data.VerifyDomainDkimResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryVerifyDomainDkimCommand = deserializeAws_queryVerifyDomainDkimCommand;
    var deserializeAws_queryVerifyDomainDkimCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryVerifyDomainIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyDomainIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryVerifyDomainIdentityResponse(data.VerifyDomainIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryVerifyDomainIdentityCommand = deserializeAws_queryVerifyDomainIdentityCommand;
    var deserializeAws_queryVerifyDomainIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryVerifyEmailAddressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyEmailAddressCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryVerifyEmailAddressCommand = deserializeAws_queryVerifyEmailAddressCommand;
    var deserializeAws_queryVerifyEmailAddressCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryVerifyEmailIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyEmailIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryVerifyEmailIdentityResponse(data.VerifyEmailIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryVerifyEmailIdentityCommand = deserializeAws_queryVerifyEmailIdentityCommand;
    var deserializeAws_queryVerifyEmailIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new SESServiceException_1.SESServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAccountSendingPausedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAccountSendingPausedException(body.Error, context);
      const exception = new models_0_1.AccountSendingPausedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.AlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryCannotDeleteExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCannotDeleteException(body.Error, context);
      const exception = new models_0_1.CannotDeleteException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryConfigurationSetAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.ConfigurationSetAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryConfigurationSetDoesNotExistException(body.Error, context);
      const exception = new models_0_1.ConfigurationSetDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryConfigurationSetSendingPausedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryConfigurationSetSendingPausedException(body.Error, context);
      const exception = new models_0_1.ConfigurationSetSendingPausedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomVerificationEmailInvalidContentException(body.Error, context);
      const exception = new models_0_1.CustomVerificationEmailInvalidContentException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.CustomVerificationEmailTemplateAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException(body.Error, context);
      const exception = new models_0_1.CustomVerificationEmailTemplateDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryEventDestinationAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.EventDestinationAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryEventDestinationDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryEventDestinationDoesNotExistException(body.Error, context);
      const exception = new models_0_1.EventDestinationDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryFromEmailAddressNotVerifiedException(body.Error, context);
      const exception = new models_0_1.FromEmailAddressNotVerifiedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidCloudWatchDestinationException(body.Error, context);
      const exception = new models_0_1.InvalidCloudWatchDestinationException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidConfigurationSetExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidConfigurationSetException(body.Error, context);
      const exception = new models_0_1.InvalidConfigurationSetException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidDeliveryOptionsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDeliveryOptionsException(body.Error, context);
      const exception = new models_0_1.InvalidDeliveryOptionsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidFirehoseDestinationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidFirehoseDestinationException(body.Error, context);
      const exception = new models_0_1.InvalidFirehoseDestinationException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidLambdaFunctionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidLambdaFunctionException(body.Error, context);
      const exception = new models_0_1.InvalidLambdaFunctionException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidPolicyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidPolicyException(body.Error, context);
      const exception = new models_0_1.InvalidPolicyException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidRenderingParameterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidRenderingParameterException(body.Error, context);
      const exception = new models_0_1.InvalidRenderingParameterException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidS3ConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidS3ConfigurationException(body.Error, context);
      const exception = new models_0_1.InvalidS3ConfigurationException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidSNSDestinationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidSNSDestinationException(body.Error, context);
      const exception = new models_0_1.InvalidSNSDestinationException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidSnsTopicExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidSnsTopicException(body.Error, context);
      const exception = new models_0_1.InvalidSnsTopicException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidTemplateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidTemplateException(body.Error, context);
      const exception = new models_0_1.InvalidTemplateException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidTrackingOptionsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidTrackingOptionsException(body.Error, context);
      const exception = new models_0_1.InvalidTrackingOptionsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
      const exception = new models_0_1.LimitExceededException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMailFromDomainNotVerifiedException(body.Error, context);
      const exception = new models_0_1.MailFromDomainNotVerifiedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryMessageRejectedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMessageRejected(body.Error, context);
      const exception = new models_0_1.MessageRejected(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryMissingRenderingAttributeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMissingRenderingAttributeException(body.Error, context);
      const exception = new models_0_1.MissingRenderingAttributeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryProductionAccessNotGrantedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryProductionAccessNotGrantedException(body.Error, context);
      const exception = new models_0_1.ProductionAccessNotGrantedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryRuleDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRuleDoesNotExistException(body.Error, context);
      const exception = new models_0_1.RuleDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryRuleSetDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRuleSetDoesNotExistException(body.Error, context);
      const exception = new models_0_1.RuleSetDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryTemplateDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTemplateDoesNotExistException(body.Error, context);
      const exception = new models_0_1.TemplateDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTrackingOptionsAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.TrackingOptionsAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTrackingOptionsDoesNotExistException(body.Error, context);
      const exception = new models_0_1.TrackingOptionsDoesNotExistException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var serializeAws_queryAddHeaderAction = (input, context) => {
      const entries = {};
      if (input.HeaderName !== void 0 && input.HeaderName !== null) {
        entries["HeaderName"] = input.HeaderName;
      }
      if (input.HeaderValue !== void 0 && input.HeaderValue !== null) {
        entries["HeaderValue"] = input.HeaderValue;
      }
      return entries;
    };
    var serializeAws_queryAddressList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryBody = (input, context) => {
      const entries = {};
      if (input.Text !== void 0 && input.Text !== null) {
        const memberEntries = serializeAws_queryContent(input.Text, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Text.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Html !== void 0 && input.Html !== null) {
        const memberEntries = serializeAws_queryContent(input.Html, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Html.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryBounceAction = (input, context) => {
      const entries = {};
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      if (input.SmtpReplyCode !== void 0 && input.SmtpReplyCode !== null) {
        entries["SmtpReplyCode"] = input.SmtpReplyCode;
      }
      if (input.StatusCode !== void 0 && input.StatusCode !== null) {
        entries["StatusCode"] = input.StatusCode;
      }
      if (input.Message !== void 0 && input.Message !== null) {
        entries["Message"] = input.Message;
      }
      if (input.Sender !== void 0 && input.Sender !== null) {
        entries["Sender"] = input.Sender;
      }
      return entries;
    };
    var serializeAws_queryBouncedRecipientInfo = (input, context) => {
      const entries = {};
      if (input.Recipient !== void 0 && input.Recipient !== null) {
        entries["Recipient"] = input.Recipient;
      }
      if (input.RecipientArn !== void 0 && input.RecipientArn !== null) {
        entries["RecipientArn"] = input.RecipientArn;
      }
      if (input.BounceType !== void 0 && input.BounceType !== null) {
        entries["BounceType"] = input.BounceType;
      }
      if (input.RecipientDsnFields !== void 0 && input.RecipientDsnFields !== null) {
        const memberEntries = serializeAws_queryRecipientDsnFields(input.RecipientDsnFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RecipientDsnFields.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryBouncedRecipientInfoList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryBouncedRecipientInfo(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryBulkEmailDestination = (input, context) => {
      const entries = {};
      if (input.Destination !== void 0 && input.Destination !== null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Destination.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReplacementTags !== void 0 && input.ReplacementTags !== null) {
        const memberEntries = serializeAws_queryMessageTagList(input.ReplacementTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplacementTags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReplacementTemplateData !== void 0 && input.ReplacementTemplateData !== null) {
        entries["ReplacementTemplateData"] = input.ReplacementTemplateData;
      }
      return entries;
    };
    var serializeAws_queryBulkEmailDestinationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryBulkEmailDestination(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryCloneReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.OriginalRuleSetName !== void 0 && input.OriginalRuleSetName !== null) {
        entries["OriginalRuleSetName"] = input.OriginalRuleSetName;
      }
      return entries;
    };
    var serializeAws_queryCloudWatchDestination = (input, context) => {
      const entries = {};
      if (input.DimensionConfigurations !== void 0 && input.DimensionConfigurations !== null) {
        const memberEntries = serializeAws_queryCloudWatchDimensionConfigurations(input.DimensionConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DimensionConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCloudWatchDimensionConfiguration = (input, context) => {
      const entries = {};
      if (input.DimensionName !== void 0 && input.DimensionName !== null) {
        entries["DimensionName"] = input.DimensionName;
      }
      if (input.DimensionValueSource !== void 0 && input.DimensionValueSource !== null) {
        entries["DimensionValueSource"] = input.DimensionValueSource;
      }
      if (input.DefaultDimensionValue !== void 0 && input.DefaultDimensionValue !== null) {
        entries["DefaultDimensionValue"] = input.DefaultDimensionValue;
      }
      return entries;
    };
    var serializeAws_queryCloudWatchDimensionConfigurations = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryCloudWatchDimensionConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryConfigurationSet = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      return entries;
    };
    var serializeAws_queryConfigurationSetAttributeList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryContent = (input, context) => {
      const entries = {};
      if (input.Data !== void 0 && input.Data !== null) {
        entries["Data"] = input.Data;
      }
      if (input.Charset !== void 0 && input.Charset !== null) {
        entries["Charset"] = input.Charset;
      }
      return entries;
    };
    var serializeAws_queryCreateConfigurationSetEventDestinationRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.EventDestination !== void 0 && input.EventDestination !== null) {
        const memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EventDestination.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateConfigurationSetRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSet !== void 0 && input.ConfigurationSet !== null) {
        const memberEntries = serializeAws_queryConfigurationSet(input.ConfigurationSet, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ConfigurationSet.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateConfigurationSetTrackingOptionsRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.TrackingOptions !== void 0 && input.TrackingOptions !== null) {
        const memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TrackingOptions.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateCustomVerificationEmailTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      if (input.FromEmailAddress !== void 0 && input.FromEmailAddress !== null) {
        entries["FromEmailAddress"] = input.FromEmailAddress;
      }
      if (input.TemplateSubject !== void 0 && input.TemplateSubject !== null) {
        entries["TemplateSubject"] = input.TemplateSubject;
      }
      if (input.TemplateContent !== void 0 && input.TemplateContent !== null) {
        entries["TemplateContent"] = input.TemplateContent;
      }
      if (input.SuccessRedirectionURL !== void 0 && input.SuccessRedirectionURL !== null) {
        entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
      }
      if (input.FailureRedirectionURL !== void 0 && input.FailureRedirectionURL !== null) {
        entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
      }
      return entries;
    };
    var serializeAws_queryCreateReceiptFilterRequest = (input, context) => {
      const entries = {};
      if (input.Filter !== void 0 && input.Filter !== null) {
        const memberEntries = serializeAws_queryReceiptFilter(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filter.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateReceiptRuleRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.After !== void 0 && input.After !== null) {
        entries["After"] = input.After;
      }
      if (input.Rule !== void 0 && input.Rule !== null) {
        const memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Rule.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      return entries;
    };
    var serializeAws_queryCreateTemplateRequest = (input, context) => {
      const entries = {};
      if (input.Template !== void 0 && input.Template !== null) {
        const memberEntries = serializeAws_queryTemplate(input.Template, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Template.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDeleteConfigurationSetEventDestinationRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.EventDestinationName !== void 0 && input.EventDestinationName !== null) {
        entries["EventDestinationName"] = input.EventDestinationName;
      }
      return entries;
    };
    var serializeAws_queryDeleteConfigurationSetRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      return entries;
    };
    var serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      return entries;
    };
    var serializeAws_queryDeleteCustomVerificationEmailTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      return entries;
    };
    var serializeAws_queryDeleteIdentityPolicyRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.PolicyName !== void 0 && input.PolicyName !== null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryDeleteIdentityRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      return entries;
    };
    var serializeAws_queryDeleteReceiptFilterRequest = (input, context) => {
      const entries = {};
      if (input.FilterName !== void 0 && input.FilterName !== null) {
        entries["FilterName"] = input.FilterName;
      }
      return entries;
    };
    var serializeAws_queryDeleteReceiptRuleRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.RuleName !== void 0 && input.RuleName !== null) {
        entries["RuleName"] = input.RuleName;
      }
      return entries;
    };
    var serializeAws_queryDeleteReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      return entries;
    };
    var serializeAws_queryDeleteTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      return entries;
    };
    var serializeAws_queryDeleteVerifiedEmailAddressRequest = (input, context) => {
      const entries = {};
      if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
        entries["EmailAddress"] = input.EmailAddress;
      }
      return entries;
    };
    var serializeAws_queryDeliveryOptions = (input, context) => {
      const entries = {};
      if (input.TlsPolicy !== void 0 && input.TlsPolicy !== null) {
        entries["TlsPolicy"] = input.TlsPolicy;
      }
      return entries;
    };
    var serializeAws_queryDescribeActiveReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryDescribeConfigurationSetRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.ConfigurationSetAttributeNames !== void 0 && input.ConfigurationSetAttributeNames !== null) {
        const memberEntries = serializeAws_queryConfigurationSetAttributeList(input.ConfigurationSetAttributeNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ConfigurationSetAttributeNames.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDescribeReceiptRuleRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.RuleName !== void 0 && input.RuleName !== null) {
        entries["RuleName"] = input.RuleName;
      }
      return entries;
    };
    var serializeAws_queryDescribeReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      return entries;
    };
    var serializeAws_queryDestination = (input, context) => {
      const entries = {};
      if (input.ToAddresses !== void 0 && input.ToAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.ToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ToAddresses.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CcAddresses !== void 0 && input.CcAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.CcAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CcAddresses.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BccAddresses !== void 0 && input.BccAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.BccAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `BccAddresses.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryEventDestination = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      if (input.MatchingEventTypes !== void 0 && input.MatchingEventTypes !== null) {
        const memberEntries = serializeAws_queryEventTypes(input.MatchingEventTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `MatchingEventTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input.KinesisFirehoseDestination !== void 0 && input.KinesisFirehoseDestination !== null) {
        const memberEntries = serializeAws_queryKinesisFirehoseDestination(input.KinesisFirehoseDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `KinesisFirehoseDestination.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CloudWatchDestination !== void 0 && input.CloudWatchDestination !== null) {
        const memberEntries = serializeAws_queryCloudWatchDestination(input.CloudWatchDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CloudWatchDestination.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SNSDestination !== void 0 && input.SNSDestination !== null) {
        const memberEntries = serializeAws_querySNSDestination(input.SNSDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SNSDestination.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryEventTypes = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryExtensionField = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryExtensionFieldList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryExtensionField(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryGetCustomVerificationEmailTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      return entries;
    };
    var serializeAws_queryGetIdentityDkimAttributesRequest = (input, context) => {
      const entries = {};
      if (input.Identities !== void 0 && input.Identities !== null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Identities.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetIdentityMailFromDomainAttributesRequest = (input, context) => {
      const entries = {};
      if (input.Identities !== void 0 && input.Identities !== null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Identities.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetIdentityNotificationAttributesRequest = (input, context) => {
      const entries = {};
      if (input.Identities !== void 0 && input.Identities !== null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Identities.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetIdentityPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.PolicyNames !== void 0 && input.PolicyNames !== null) {
        const memberEntries = serializeAws_queryPolicyNameList(input.PolicyNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyNames.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetIdentityVerificationAttributesRequest = (input, context) => {
      const entries = {};
      if (input.Identities !== void 0 && input.Identities !== null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Identities.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      return entries;
    };
    var serializeAws_queryIdentityList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryKinesisFirehoseDestination = (input, context) => {
      const entries = {};
      if (input.IAMRoleARN !== void 0 && input.IAMRoleARN !== null) {
        entries["IAMRoleARN"] = input.IAMRoleARN;
      }
      if (input.DeliveryStreamARN !== void 0 && input.DeliveryStreamARN !== null) {
        entries["DeliveryStreamARN"] = input.DeliveryStreamARN;
      }
      return entries;
    };
    var serializeAws_queryLambdaAction = (input, context) => {
      const entries = {};
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      if (input.FunctionArn !== void 0 && input.FunctionArn !== null) {
        entries["FunctionArn"] = input.FunctionArn;
      }
      if (input.InvocationType !== void 0 && input.InvocationType !== null) {
        entries["InvocationType"] = input.InvocationType;
      }
      return entries;
    };
    var serializeAws_queryListConfigurationSetsRequest = (input, context) => {
      const entries = {};
      if (input.NextToken !== void 0 && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxItems !== void 0 && input.MaxItems !== null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListCustomVerificationEmailTemplatesRequest = (input, context) => {
      const entries = {};
      if (input.NextToken !== void 0 && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults !== void 0 && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
      }
      return entries;
    };
    var serializeAws_queryListIdentitiesRequest = (input, context) => {
      const entries = {};
      if (input.IdentityType !== void 0 && input.IdentityType !== null) {
        entries["IdentityType"] = input.IdentityType;
      }
      if (input.NextToken !== void 0 && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxItems !== void 0 && input.MaxItems !== null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListIdentityPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      return entries;
    };
    var serializeAws_queryListReceiptFiltersRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryListReceiptRuleSetsRequest = (input, context) => {
      const entries = {};
      if (input.NextToken !== void 0 && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListTemplatesRequest = (input, context) => {
      const entries = {};
      if (input.NextToken !== void 0 && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxItems !== void 0 && input.MaxItems !== null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryMessage = (input, context) => {
      const entries = {};
      if (input.Subject !== void 0 && input.Subject !== null) {
        const memberEntries = serializeAws_queryContent(input.Subject, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Subject.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Body !== void 0 && input.Body !== null) {
        const memberEntries = serializeAws_queryBody(input.Body, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Body.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryMessageDsn = (input, context) => {
      const entries = {};
      if (input.ReportingMta !== void 0 && input.ReportingMta !== null) {
        entries["ReportingMta"] = input.ReportingMta;
      }
      if (input.ArrivalDate !== void 0 && input.ArrivalDate !== null) {
        entries["ArrivalDate"] = input.ArrivalDate.toISOString().split(".")[0] + "Z";
      }
      if (input.ExtensionFields !== void 0 && input.ExtensionFields !== null) {
        const memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ExtensionFields.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryMessageTag = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryMessageTagList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryMessageTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyNameList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPutConfigurationSetDeliveryOptionsRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.DeliveryOptions !== void 0 && input.DeliveryOptions !== null) {
        const memberEntries = serializeAws_queryDeliveryOptions(input.DeliveryOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeliveryOptions.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryPutIdentityPolicyRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.PolicyName !== void 0 && input.PolicyName !== null) {
        entries["PolicyName"] = input.PolicyName;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      return entries;
    };
    var serializeAws_queryRawMessage = (input, context) => {
      const entries = {};
      if (input.Data !== void 0 && input.Data !== null) {
        entries["Data"] = context.base64Encoder(input.Data);
      }
      return entries;
    };
    var serializeAws_queryReceiptAction = (input, context) => {
      const entries = {};
      if (input.S3Action !== void 0 && input.S3Action !== null) {
        const memberEntries = serializeAws_queryS3Action(input.S3Action, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `S3Action.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BounceAction !== void 0 && input.BounceAction !== null) {
        const memberEntries = serializeAws_queryBounceAction(input.BounceAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `BounceAction.${key}`;
          entries[loc] = value;
        });
      }
      if (input.WorkmailAction !== void 0 && input.WorkmailAction !== null) {
        const memberEntries = serializeAws_queryWorkmailAction(input.WorkmailAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `WorkmailAction.${key}`;
          entries[loc] = value;
        });
      }
      if (input.LambdaAction !== void 0 && input.LambdaAction !== null) {
        const memberEntries = serializeAws_queryLambdaAction(input.LambdaAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LambdaAction.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StopAction !== void 0 && input.StopAction !== null) {
        const memberEntries = serializeAws_queryStopAction(input.StopAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StopAction.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AddHeaderAction !== void 0 && input.AddHeaderAction !== null) {
        const memberEntries = serializeAws_queryAddHeaderAction(input.AddHeaderAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AddHeaderAction.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SNSAction !== void 0 && input.SNSAction !== null) {
        const memberEntries = serializeAws_querySNSAction(input.SNSAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SNSAction.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryReceiptActionsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryReceiptAction(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryReceiptFilter = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.IpFilter !== void 0 && input.IpFilter !== null) {
        const memberEntries = serializeAws_queryReceiptIpFilter(input.IpFilter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `IpFilter.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryReceiptIpFilter = (input, context) => {
      const entries = {};
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.Cidr !== void 0 && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
      }
      return entries;
    };
    var serializeAws_queryReceiptRule = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      if (input.TlsPolicy !== void 0 && input.TlsPolicy !== null) {
        entries["TlsPolicy"] = input.TlsPolicy;
      }
      if (input.Recipients !== void 0 && input.Recipients !== null) {
        const memberEntries = serializeAws_queryRecipientsList(input.Recipients, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Recipients.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Actions !== void 0 && input.Actions !== null) {
        const memberEntries = serializeAws_queryReceiptActionsList(input.Actions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Actions.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ScanEnabled !== void 0 && input.ScanEnabled !== null) {
        entries["ScanEnabled"] = input.ScanEnabled;
      }
      return entries;
    };
    var serializeAws_queryReceiptRuleNamesList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryRecipientDsnFields = (input, context) => {
      const entries = {};
      if (input.FinalRecipient !== void 0 && input.FinalRecipient !== null) {
        entries["FinalRecipient"] = input.FinalRecipient;
      }
      if (input.Action !== void 0 && input.Action !== null) {
        entries["Action"] = input.Action;
      }
      if (input.RemoteMta !== void 0 && input.RemoteMta !== null) {
        entries["RemoteMta"] = input.RemoteMta;
      }
      if (input.Status !== void 0 && input.Status !== null) {
        entries["Status"] = input.Status;
      }
      if (input.DiagnosticCode !== void 0 && input.DiagnosticCode !== null) {
        entries["DiagnosticCode"] = input.DiagnosticCode;
      }
      if (input.LastAttemptDate !== void 0 && input.LastAttemptDate !== null) {
        entries["LastAttemptDate"] = input.LastAttemptDate.toISOString().split(".")[0] + "Z";
      }
      if (input.ExtensionFields !== void 0 && input.ExtensionFields !== null) {
        const memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ExtensionFields.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRecipientsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryReorderReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.RuleNames !== void 0 && input.RuleNames !== null) {
        const memberEntries = serializeAws_queryReceiptRuleNamesList(input.RuleNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RuleNames.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryS3Action = (input, context) => {
      const entries = {};
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      if (input.BucketName !== void 0 && input.BucketName !== null) {
        entries["BucketName"] = input.BucketName;
      }
      if (input.ObjectKeyPrefix !== void 0 && input.ObjectKeyPrefix !== null) {
        entries["ObjectKeyPrefix"] = input.ObjectKeyPrefix;
      }
      if (input.KmsKeyArn !== void 0 && input.KmsKeyArn !== null) {
        entries["KmsKeyArn"] = input.KmsKeyArn;
      }
      return entries;
    };
    var serializeAws_querySendBounceRequest = (input, context) => {
      const entries = {};
      if (input.OriginalMessageId !== void 0 && input.OriginalMessageId !== null) {
        entries["OriginalMessageId"] = input.OriginalMessageId;
      }
      if (input.BounceSender !== void 0 && input.BounceSender !== null) {
        entries["BounceSender"] = input.BounceSender;
      }
      if (input.Explanation !== void 0 && input.Explanation !== null) {
        entries["Explanation"] = input.Explanation;
      }
      if (input.MessageDsn !== void 0 && input.MessageDsn !== null) {
        const memberEntries = serializeAws_queryMessageDsn(input.MessageDsn, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `MessageDsn.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BouncedRecipientInfoList !== void 0 && input.BouncedRecipientInfoList !== null) {
        const memberEntries = serializeAws_queryBouncedRecipientInfoList(input.BouncedRecipientInfoList, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `BouncedRecipientInfoList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BounceSenderArn !== void 0 && input.BounceSenderArn !== null) {
        entries["BounceSenderArn"] = input.BounceSenderArn;
      }
      return entries;
    };
    var serializeAws_querySendBulkTemplatedEmailRequest = (input, context) => {
      const entries = {};
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplyToAddresses.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
        entries["ReturnPath"] = input.ReturnPath;
      }
      if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
      }
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.DefaultTags !== void 0 && input.DefaultTags !== null) {
        const memberEntries = serializeAws_queryMessageTagList(input.DefaultTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DefaultTags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Template !== void 0 && input.Template !== null) {
        entries["Template"] = input.Template;
      }
      if (input.TemplateArn !== void 0 && input.TemplateArn !== null) {
        entries["TemplateArn"] = input.TemplateArn;
      }
      if (input.DefaultTemplateData !== void 0 && input.DefaultTemplateData !== null) {
        entries["DefaultTemplateData"] = input.DefaultTemplateData;
      }
      if (input.Destinations !== void 0 && input.Destinations !== null) {
        const memberEntries = serializeAws_queryBulkEmailDestinationList(input.Destinations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Destinations.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_querySendCustomVerificationEmailRequest = (input, context) => {
      const entries = {};
      if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
        entries["EmailAddress"] = input.EmailAddress;
      }
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      return entries;
    };
    var serializeAws_querySendEmailRequest = (input, context) => {
      const entries = {};
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.Destination !== void 0 && input.Destination !== null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Destination.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Message !== void 0 && input.Message !== null) {
        const memberEntries = serializeAws_queryMessage(input.Message, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Message.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplyToAddresses.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
        entries["ReturnPath"] = input.ReturnPath;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      return entries;
    };
    var serializeAws_querySendRawEmailRequest = (input, context) => {
      const entries = {};
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.Destinations !== void 0 && input.Destinations !== null) {
        const memberEntries = serializeAws_queryAddressList(input.Destinations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Destinations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RawMessage !== void 0 && input.RawMessage !== null) {
        const memberEntries = serializeAws_queryRawMessage(input.RawMessage, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RawMessage.${key}`;
          entries[loc] = value;
        });
      }
      if (input.FromArn !== void 0 && input.FromArn !== null) {
        entries["FromArn"] = input.FromArn;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      return entries;
    };
    var serializeAws_querySendTemplatedEmailRequest = (input, context) => {
      const entries = {};
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.Destination !== void 0 && input.Destination !== null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Destination.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReplyToAddresses !== void 0 && input.ReplyToAddresses !== null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplyToAddresses.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReturnPath !== void 0 && input.ReturnPath !== null) {
        entries["ReturnPath"] = input.ReturnPath;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.ReturnPathArn !== void 0 && input.ReturnPathArn !== null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.Template !== void 0 && input.Template !== null) {
        entries["Template"] = input.Template;
      }
      if (input.TemplateArn !== void 0 && input.TemplateArn !== null) {
        entries["TemplateArn"] = input.TemplateArn;
      }
      if (input.TemplateData !== void 0 && input.TemplateData !== null) {
        entries["TemplateData"] = input.TemplateData;
      }
      return entries;
    };
    var serializeAws_querySetActiveReceiptRuleSetRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      return entries;
    };
    var serializeAws_querySetIdentityDkimEnabledRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.DkimEnabled !== void 0 && input.DkimEnabled !== null) {
        entries["DkimEnabled"] = input.DkimEnabled;
      }
      return entries;
    };
    var serializeAws_querySetIdentityFeedbackForwardingEnabledRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.ForwardingEnabled !== void 0 && input.ForwardingEnabled !== null) {
        entries["ForwardingEnabled"] = input.ForwardingEnabled;
      }
      return entries;
    };
    var serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.NotificationType !== void 0 && input.NotificationType !== null) {
        entries["NotificationType"] = input.NotificationType;
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var serializeAws_querySetIdentityMailFromDomainRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.MailFromDomain !== void 0 && input.MailFromDomain !== null) {
        entries["MailFromDomain"] = input.MailFromDomain;
      }
      if (input.BehaviorOnMXFailure !== void 0 && input.BehaviorOnMXFailure !== null) {
        entries["BehaviorOnMXFailure"] = input.BehaviorOnMXFailure;
      }
      return entries;
    };
    var serializeAws_querySetIdentityNotificationTopicRequest = (input, context) => {
      const entries = {};
      if (input.Identity !== void 0 && input.Identity !== null) {
        entries["Identity"] = input.Identity;
      }
      if (input.NotificationType !== void 0 && input.NotificationType !== null) {
        entries["NotificationType"] = input.NotificationType;
      }
      if (input.SnsTopic !== void 0 && input.SnsTopic !== null) {
        entries["SnsTopic"] = input.SnsTopic;
      }
      return entries;
    };
    var serializeAws_querySetReceiptRulePositionRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.RuleName !== void 0 && input.RuleName !== null) {
        entries["RuleName"] = input.RuleName;
      }
      if (input.After !== void 0 && input.After !== null) {
        entries["After"] = input.After;
      }
      return entries;
    };
    var serializeAws_querySNSAction = (input, context) => {
      const entries = {};
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      if (input.Encoding !== void 0 && input.Encoding !== null) {
        entries["Encoding"] = input.Encoding;
      }
      return entries;
    };
    var serializeAws_querySNSDestination = (input, context) => {
      const entries = {};
      if (input.TopicARN !== void 0 && input.TopicARN !== null) {
        entries["TopicARN"] = input.TopicARN;
      }
      return entries;
    };
    var serializeAws_queryStopAction = (input, context) => {
      const entries = {};
      if (input.Scope !== void 0 && input.Scope !== null) {
        entries["Scope"] = input.Scope;
      }
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      return entries;
    };
    var serializeAws_queryTemplate = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      if (input.SubjectPart !== void 0 && input.SubjectPart !== null) {
        entries["SubjectPart"] = input.SubjectPart;
      }
      if (input.TextPart !== void 0 && input.TextPart !== null) {
        entries["TextPart"] = input.TextPart;
      }
      if (input.HtmlPart !== void 0 && input.HtmlPart !== null) {
        entries["HtmlPart"] = input.HtmlPart;
      }
      return entries;
    };
    var serializeAws_queryTestRenderTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      if (input.TemplateData !== void 0 && input.TemplateData !== null) {
        entries["TemplateData"] = input.TemplateData;
      }
      return entries;
    };
    var serializeAws_queryTrackingOptions = (input, context) => {
      const entries = {};
      if (input.CustomRedirectDomain !== void 0 && input.CustomRedirectDomain !== null) {
        entries["CustomRedirectDomain"] = input.CustomRedirectDomain;
      }
      return entries;
    };
    var serializeAws_queryUpdateAccountSendingEnabledRequest = (input, context) => {
      const entries = {};
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var serializeAws_queryUpdateConfigurationSetEventDestinationRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.EventDestination !== void 0 && input.EventDestination !== null) {
        const memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EventDestination.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var serializeAws_queryUpdateConfigurationSetSendingEnabledRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest = (input, context) => {
      const entries = {};
      if (input.ConfigurationSetName !== void 0 && input.ConfigurationSetName !== null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
      }
      if (input.TrackingOptions !== void 0 && input.TrackingOptions !== null) {
        const memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TrackingOptions.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateCustomVerificationEmailTemplateRequest = (input, context) => {
      const entries = {};
      if (input.TemplateName !== void 0 && input.TemplateName !== null) {
        entries["TemplateName"] = input.TemplateName;
      }
      if (input.FromEmailAddress !== void 0 && input.FromEmailAddress !== null) {
        entries["FromEmailAddress"] = input.FromEmailAddress;
      }
      if (input.TemplateSubject !== void 0 && input.TemplateSubject !== null) {
        entries["TemplateSubject"] = input.TemplateSubject;
      }
      if (input.TemplateContent !== void 0 && input.TemplateContent !== null) {
        entries["TemplateContent"] = input.TemplateContent;
      }
      if (input.SuccessRedirectionURL !== void 0 && input.SuccessRedirectionURL !== null) {
        entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
      }
      if (input.FailureRedirectionURL !== void 0 && input.FailureRedirectionURL !== null) {
        entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
      }
      return entries;
    };
    var serializeAws_queryUpdateReceiptRuleRequest = (input, context) => {
      const entries = {};
      if (input.RuleSetName !== void 0 && input.RuleSetName !== null) {
        entries["RuleSetName"] = input.RuleSetName;
      }
      if (input.Rule !== void 0 && input.Rule !== null) {
        const memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Rule.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateTemplateRequest = (input, context) => {
      const entries = {};
      if (input.Template !== void 0 && input.Template !== null) {
        const memberEntries = serializeAws_queryTemplate(input.Template, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Template.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryVerifyDomainDkimRequest = (input, context) => {
      const entries = {};
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      return entries;
    };
    var serializeAws_queryVerifyDomainIdentityRequest = (input, context) => {
      const entries = {};
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      return entries;
    };
    var serializeAws_queryVerifyEmailAddressRequest = (input, context) => {
      const entries = {};
      if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
        entries["EmailAddress"] = input.EmailAddress;
      }
      return entries;
    };
    var serializeAws_queryVerifyEmailIdentityRequest = (input, context) => {
      const entries = {};
      if (input.EmailAddress !== void 0 && input.EmailAddress !== null) {
        entries["EmailAddress"] = input.EmailAddress;
      }
      return entries;
    };
    var serializeAws_queryWorkmailAction = (input, context) => {
      const entries = {};
      if (input.TopicArn !== void 0 && input.TopicArn !== null) {
        entries["TopicArn"] = input.TopicArn;
      }
      if (input.OrganizationArn !== void 0 && input.OrganizationArn !== null) {
        entries["OrganizationArn"] = input.OrganizationArn;
      }
      return entries;
    };
    var deserializeAws_queryAccountSendingPausedException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryAddHeaderAction = (output, context) => {
      const contents = {
        HeaderName: void 0,
        HeaderValue: void 0
      };
      if (output["HeaderName"] !== void 0) {
        contents.HeaderName = smithy_client_1.expectString(output["HeaderName"]);
      }
      if (output["HeaderValue"] !== void 0) {
        contents.HeaderValue = smithy_client_1.expectString(output["HeaderValue"]);
      }
      return contents;
    };
    var deserializeAws_queryAddressList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryAlreadyExistsException = (output, context) => {
      const contents = {
        Name: void 0,
        message: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryBounceAction = (output, context) => {
      const contents = {
        TopicArn: void 0,
        SmtpReplyCode: void 0,
        StatusCode: void 0,
        Message: void 0,
        Sender: void 0
      };
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      if (output["SmtpReplyCode"] !== void 0) {
        contents.SmtpReplyCode = smithy_client_1.expectString(output["SmtpReplyCode"]);
      }
      if (output["StatusCode"] !== void 0) {
        contents.StatusCode = smithy_client_1.expectString(output["StatusCode"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = smithy_client_1.expectString(output["Message"]);
      }
      if (output["Sender"] !== void 0) {
        contents.Sender = smithy_client_1.expectString(output["Sender"]);
      }
      return contents;
    };
    var deserializeAws_queryBulkEmailDestinationStatus = (output, context) => {
      const contents = {
        Status: void 0,
        Error: void 0,
        MessageId: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = smithy_client_1.expectString(output["Status"]);
      }
      if (output["Error"] !== void 0) {
        contents.Error = smithy_client_1.expectString(output["Error"]);
      }
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_queryBulkEmailDestinationStatusList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryBulkEmailDestinationStatus(entry, context);
      });
    };
    var deserializeAws_queryCannotDeleteException = (output, context) => {
      const contents = {
        Name: void 0,
        message: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCloneReceiptRuleSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCloudWatchDestination = (output, context) => {
      const contents = {
        DimensionConfigurations: void 0
      };
      if (output.DimensionConfigurations === "") {
        contents.DimensionConfigurations = [];
      }
      if (output["DimensionConfigurations"] !== void 0 && output["DimensionConfigurations"]["member"] !== void 0) {
        contents.DimensionConfigurations = deserializeAws_queryCloudWatchDimensionConfigurations(smithy_client_1.getArrayIfSingleItem(output["DimensionConfigurations"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryCloudWatchDimensionConfiguration = (output, context) => {
      const contents = {
        DimensionName: void 0,
        DimensionValueSource: void 0,
        DefaultDimensionValue: void 0
      };
      if (output["DimensionName"] !== void 0) {
        contents.DimensionName = smithy_client_1.expectString(output["DimensionName"]);
      }
      if (output["DimensionValueSource"] !== void 0) {
        contents.DimensionValueSource = smithy_client_1.expectString(output["DimensionValueSource"]);
      }
      if (output["DefaultDimensionValue"] !== void 0) {
        contents.DefaultDimensionValue = smithy_client_1.expectString(output["DefaultDimensionValue"]);
      }
      return contents;
    };
    var deserializeAws_queryCloudWatchDimensionConfigurations = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryCloudWatchDimensionConfiguration(entry, context);
      });
    };
    var deserializeAws_queryConfigurationSet = (output, context) => {
      const contents = {
        Name: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      return contents;
    };
    var deserializeAws_queryConfigurationSetAlreadyExistsException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryConfigurationSetDoesNotExistException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryConfigurationSets = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryConfigurationSet(entry, context);
      });
    };
    var deserializeAws_queryConfigurationSetSendingPausedException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCreateConfigurationSetEventDestinationResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateConfigurationSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateReceiptFilterResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateReceiptRuleResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateReceiptRuleSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateTemplateResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCustomVerificationEmailInvalidContentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomVerificationEmailTemplate = (output, context) => {
      const contents = {
        TemplateName: void 0,
        FromEmailAddress: void 0,
        TemplateSubject: void 0,
        SuccessRedirectionURL: void 0,
        FailureRedirectionURL: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["FromEmailAddress"] !== void 0) {
        contents.FromEmailAddress = smithy_client_1.expectString(output["FromEmailAddress"]);
      }
      if (output["TemplateSubject"] !== void 0) {
        contents.TemplateSubject = smithy_client_1.expectString(output["TemplateSubject"]);
      }
      if (output["SuccessRedirectionURL"] !== void 0) {
        contents.SuccessRedirectionURL = smithy_client_1.expectString(output["SuccessRedirectionURL"]);
      }
      if (output["FailureRedirectionURL"] !== void 0) {
        contents.FailureRedirectionURL = smithy_client_1.expectString(output["FailureRedirectionURL"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException = (output, context) => {
      const contents = {
        CustomVerificationEmailTemplateName: void 0,
        message: void 0
      };
      if (output["CustomVerificationEmailTemplateName"] !== void 0) {
        contents.CustomVerificationEmailTemplateName = smithy_client_1.expectString(output["CustomVerificationEmailTemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException = (output, context) => {
      const contents = {
        CustomVerificationEmailTemplateName: void 0,
        message: void 0
      };
      if (output["CustomVerificationEmailTemplateName"] !== void 0) {
        contents.CustomVerificationEmailTemplateName = smithy_client_1.expectString(output["CustomVerificationEmailTemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomVerificationEmailTemplates = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryCustomVerificationEmailTemplate(entry, context);
      });
    };
    var deserializeAws_queryDeleteConfigurationSetEventDestinationResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteConfigurationSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteIdentityPolicyResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteIdentityResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteReceiptFilterResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteReceiptRuleResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteReceiptRuleSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteTemplateResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeliveryOptions = (output, context) => {
      const contents = {
        TlsPolicy: void 0
      };
      if (output["TlsPolicy"] !== void 0) {
        contents.TlsPolicy = smithy_client_1.expectString(output["TlsPolicy"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeActiveReceiptRuleSetResponse = (output, context) => {
      const contents = {
        Metadata: void 0,
        Rules: void 0
      };
      if (output["Metadata"] !== void 0) {
        contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
      }
      if (output.Rules === "") {
        contents.Rules = [];
      }
      if (output["Rules"] !== void 0 && output["Rules"]["member"] !== void 0) {
        contents.Rules = deserializeAws_queryReceiptRulesList(smithy_client_1.getArrayIfSingleItem(output["Rules"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeConfigurationSetResponse = (output, context) => {
      const contents = {
        ConfigurationSet: void 0,
        EventDestinations: void 0,
        TrackingOptions: void 0,
        DeliveryOptions: void 0,
        ReputationOptions: void 0
      };
      if (output["ConfigurationSet"] !== void 0) {
        contents.ConfigurationSet = deserializeAws_queryConfigurationSet(output["ConfigurationSet"], context);
      }
      if (output.EventDestinations === "") {
        contents.EventDestinations = [];
      }
      if (output["EventDestinations"] !== void 0 && output["EventDestinations"]["member"] !== void 0) {
        contents.EventDestinations = deserializeAws_queryEventDestinations(smithy_client_1.getArrayIfSingleItem(output["EventDestinations"]["member"]), context);
      }
      if (output["TrackingOptions"] !== void 0) {
        contents.TrackingOptions = deserializeAws_queryTrackingOptions(output["TrackingOptions"], context);
      }
      if (output["DeliveryOptions"] !== void 0) {
        contents.DeliveryOptions = deserializeAws_queryDeliveryOptions(output["DeliveryOptions"], context);
      }
      if (output["ReputationOptions"] !== void 0) {
        contents.ReputationOptions = deserializeAws_queryReputationOptions(output["ReputationOptions"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeReceiptRuleResponse = (output, context) => {
      const contents = {
        Rule: void 0
      };
      if (output["Rule"] !== void 0) {
        contents.Rule = deserializeAws_queryReceiptRule(output["Rule"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeReceiptRuleSetResponse = (output, context) => {
      const contents = {
        Metadata: void 0,
        Rules: void 0
      };
      if (output["Metadata"] !== void 0) {
        contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
      }
      if (output.Rules === "") {
        contents.Rules = [];
      }
      if (output["Rules"] !== void 0 && output["Rules"]["member"] !== void 0) {
        contents.Rules = deserializeAws_queryReceiptRulesList(smithy_client_1.getArrayIfSingleItem(output["Rules"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDkimAttributes = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [pair["key"]]: deserializeAws_queryIdentityDkimAttributes(pair["value"], context)
        });
      }, {});
    };
    var deserializeAws_queryEventDestination = (output, context) => {
      const contents = {
        Name: void 0,
        Enabled: void 0,
        MatchingEventTypes: void 0,
        KinesisFirehoseDestination: void 0,
        CloudWatchDestination: void 0,
        SNSDestination: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["Enabled"] !== void 0) {
        contents.Enabled = smithy_client_1.parseBoolean(output["Enabled"]);
      }
      if (output.MatchingEventTypes === "") {
        contents.MatchingEventTypes = [];
      }
      if (output["MatchingEventTypes"] !== void 0 && output["MatchingEventTypes"]["member"] !== void 0) {
        contents.MatchingEventTypes = deserializeAws_queryEventTypes(smithy_client_1.getArrayIfSingleItem(output["MatchingEventTypes"]["member"]), context);
      }
      if (output["KinesisFirehoseDestination"] !== void 0) {
        contents.KinesisFirehoseDestination = deserializeAws_queryKinesisFirehoseDestination(output["KinesisFirehoseDestination"], context);
      }
      if (output["CloudWatchDestination"] !== void 0) {
        contents.CloudWatchDestination = deserializeAws_queryCloudWatchDestination(output["CloudWatchDestination"], context);
      }
      if (output["SNSDestination"] !== void 0) {
        contents.SNSDestination = deserializeAws_querySNSDestination(output["SNSDestination"], context);
      }
      return contents;
    };
    var deserializeAws_queryEventDestinationAlreadyExistsException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        EventDestinationName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["EventDestinationName"] !== void 0) {
        contents.EventDestinationName = smithy_client_1.expectString(output["EventDestinationName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryEventDestinationDoesNotExistException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        EventDestinationName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["EventDestinationName"] !== void 0) {
        contents.EventDestinationName = smithy_client_1.expectString(output["EventDestinationName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryEventDestinations = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryEventDestination(entry, context);
      });
    };
    var deserializeAws_queryEventTypes = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryFromEmailAddressNotVerifiedException = (output, context) => {
      const contents = {
        FromEmailAddress: void 0,
        message: void 0
      };
      if (output["FromEmailAddress"] !== void 0) {
        contents.FromEmailAddress = smithy_client_1.expectString(output["FromEmailAddress"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccountSendingEnabledResponse = (output, context) => {
      const contents = {
        Enabled: void 0
      };
      if (output["Enabled"] !== void 0) {
        contents.Enabled = smithy_client_1.parseBoolean(output["Enabled"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCustomVerificationEmailTemplateResponse = (output, context) => {
      const contents = {
        TemplateName: void 0,
        FromEmailAddress: void 0,
        TemplateSubject: void 0,
        TemplateContent: void 0,
        SuccessRedirectionURL: void 0,
        FailureRedirectionURL: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["FromEmailAddress"] !== void 0) {
        contents.FromEmailAddress = smithy_client_1.expectString(output["FromEmailAddress"]);
      }
      if (output["TemplateSubject"] !== void 0) {
        contents.TemplateSubject = smithy_client_1.expectString(output["TemplateSubject"]);
      }
      if (output["TemplateContent"] !== void 0) {
        contents.TemplateContent = smithy_client_1.expectString(output["TemplateContent"]);
      }
      if (output["SuccessRedirectionURL"] !== void 0) {
        contents.SuccessRedirectionURL = smithy_client_1.expectString(output["SuccessRedirectionURL"]);
      }
      if (output["FailureRedirectionURL"] !== void 0) {
        contents.FailureRedirectionURL = smithy_client_1.expectString(output["FailureRedirectionURL"]);
      }
      return contents;
    };
    var deserializeAws_queryGetIdentityDkimAttributesResponse = (output, context) => {
      const contents = {
        DkimAttributes: void 0
      };
      if (output.DkimAttributes === "") {
        contents.DkimAttributes = {};
      }
      if (output["DkimAttributes"] !== void 0 && output["DkimAttributes"]["entry"] !== void 0) {
        contents.DkimAttributes = deserializeAws_queryDkimAttributes(smithy_client_1.getArrayIfSingleItem(output["DkimAttributes"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetIdentityMailFromDomainAttributesResponse = (output, context) => {
      const contents = {
        MailFromDomainAttributes: void 0
      };
      if (output.MailFromDomainAttributes === "") {
        contents.MailFromDomainAttributes = {};
      }
      if (output["MailFromDomainAttributes"] !== void 0 && output["MailFromDomainAttributes"]["entry"] !== void 0) {
        contents.MailFromDomainAttributes = deserializeAws_queryMailFromDomainAttributes(smithy_client_1.getArrayIfSingleItem(output["MailFromDomainAttributes"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetIdentityNotificationAttributesResponse = (output, context) => {
      const contents = {
        NotificationAttributes: void 0
      };
      if (output.NotificationAttributes === "") {
        contents.NotificationAttributes = {};
      }
      if (output["NotificationAttributes"] !== void 0 && output["NotificationAttributes"]["entry"] !== void 0) {
        contents.NotificationAttributes = deserializeAws_queryNotificationAttributes(smithy_client_1.getArrayIfSingleItem(output["NotificationAttributes"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetIdentityPoliciesResponse = (output, context) => {
      const contents = {
        Policies: void 0
      };
      if (output.Policies === "") {
        contents.Policies = {};
      }
      if (output["Policies"] !== void 0 && output["Policies"]["entry"] !== void 0) {
        contents.Policies = deserializeAws_queryPolicyMap(smithy_client_1.getArrayIfSingleItem(output["Policies"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetIdentityVerificationAttributesResponse = (output, context) => {
      const contents = {
        VerificationAttributes: void 0
      };
      if (output.VerificationAttributes === "") {
        contents.VerificationAttributes = {};
      }
      if (output["VerificationAttributes"] !== void 0 && output["VerificationAttributes"]["entry"] !== void 0) {
        contents.VerificationAttributes = deserializeAws_queryVerificationAttributes(smithy_client_1.getArrayIfSingleItem(output["VerificationAttributes"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetSendQuotaResponse = (output, context) => {
      const contents = {
        Max24HourSend: void 0,
        MaxSendRate: void 0,
        SentLast24Hours: void 0
      };
      if (output["Max24HourSend"] !== void 0) {
        contents.Max24HourSend = smithy_client_1.strictParseFloat(output["Max24HourSend"]);
      }
      if (output["MaxSendRate"] !== void 0) {
        contents.MaxSendRate = smithy_client_1.strictParseFloat(output["MaxSendRate"]);
      }
      if (output["SentLast24Hours"] !== void 0) {
        contents.SentLast24Hours = smithy_client_1.strictParseFloat(output["SentLast24Hours"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSendStatisticsResponse = (output, context) => {
      const contents = {
        SendDataPoints: void 0
      };
      if (output.SendDataPoints === "") {
        contents.SendDataPoints = [];
      }
      if (output["SendDataPoints"] !== void 0 && output["SendDataPoints"]["member"] !== void 0) {
        contents.SendDataPoints = deserializeAws_querySendDataPointList(smithy_client_1.getArrayIfSingleItem(output["SendDataPoints"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetTemplateResponse = (output, context) => {
      const contents = {
        Template: void 0
      };
      if (output["Template"] !== void 0) {
        contents.Template = deserializeAws_queryTemplate(output["Template"], context);
      }
      return contents;
    };
    var deserializeAws_queryIdentityDkimAttributes = (output, context) => {
      const contents = {
        DkimEnabled: void 0,
        DkimVerificationStatus: void 0,
        DkimTokens: void 0
      };
      if (output["DkimEnabled"] !== void 0) {
        contents.DkimEnabled = smithy_client_1.parseBoolean(output["DkimEnabled"]);
      }
      if (output["DkimVerificationStatus"] !== void 0) {
        contents.DkimVerificationStatus = smithy_client_1.expectString(output["DkimVerificationStatus"]);
      }
      if (output.DkimTokens === "") {
        contents.DkimTokens = [];
      }
      if (output["DkimTokens"] !== void 0 && output["DkimTokens"]["member"] !== void 0) {
        contents.DkimTokens = deserializeAws_queryVerificationTokenList(smithy_client_1.getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryIdentityList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryIdentityMailFromDomainAttributes = (output, context) => {
      const contents = {
        MailFromDomain: void 0,
        MailFromDomainStatus: void 0,
        BehaviorOnMXFailure: void 0
      };
      if (output["MailFromDomain"] !== void 0) {
        contents.MailFromDomain = smithy_client_1.expectString(output["MailFromDomain"]);
      }
      if (output["MailFromDomainStatus"] !== void 0) {
        contents.MailFromDomainStatus = smithy_client_1.expectString(output["MailFromDomainStatus"]);
      }
      if (output["BehaviorOnMXFailure"] !== void 0) {
        contents.BehaviorOnMXFailure = smithy_client_1.expectString(output["BehaviorOnMXFailure"]);
      }
      return contents;
    };
    var deserializeAws_queryIdentityNotificationAttributes = (output, context) => {
      const contents = {
        BounceTopic: void 0,
        ComplaintTopic: void 0,
        DeliveryTopic: void 0,
        ForwardingEnabled: void 0,
        HeadersInBounceNotificationsEnabled: void 0,
        HeadersInComplaintNotificationsEnabled: void 0,
        HeadersInDeliveryNotificationsEnabled: void 0
      };
      if (output["BounceTopic"] !== void 0) {
        contents.BounceTopic = smithy_client_1.expectString(output["BounceTopic"]);
      }
      if (output["ComplaintTopic"] !== void 0) {
        contents.ComplaintTopic = smithy_client_1.expectString(output["ComplaintTopic"]);
      }
      if (output["DeliveryTopic"] !== void 0) {
        contents.DeliveryTopic = smithy_client_1.expectString(output["DeliveryTopic"]);
      }
      if (output["ForwardingEnabled"] !== void 0) {
        contents.ForwardingEnabled = smithy_client_1.parseBoolean(output["ForwardingEnabled"]);
      }
      if (output["HeadersInBounceNotificationsEnabled"] !== void 0) {
        contents.HeadersInBounceNotificationsEnabled = smithy_client_1.parseBoolean(output["HeadersInBounceNotificationsEnabled"]);
      }
      if (output["HeadersInComplaintNotificationsEnabled"] !== void 0) {
        contents.HeadersInComplaintNotificationsEnabled = smithy_client_1.parseBoolean(output["HeadersInComplaintNotificationsEnabled"]);
      }
      if (output["HeadersInDeliveryNotificationsEnabled"] !== void 0) {
        contents.HeadersInDeliveryNotificationsEnabled = smithy_client_1.parseBoolean(output["HeadersInDeliveryNotificationsEnabled"]);
      }
      return contents;
    };
    var deserializeAws_queryIdentityVerificationAttributes = (output, context) => {
      const contents = {
        VerificationStatus: void 0,
        VerificationToken: void 0
      };
      if (output["VerificationStatus"] !== void 0) {
        contents.VerificationStatus = smithy_client_1.expectString(output["VerificationStatus"]);
      }
      if (output["VerificationToken"] !== void 0) {
        contents.VerificationToken = smithy_client_1.expectString(output["VerificationToken"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidCloudWatchDestinationException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        EventDestinationName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["EventDestinationName"] !== void 0) {
        contents.EventDestinationName = smithy_client_1.expectString(output["EventDestinationName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidConfigurationSetException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDeliveryOptionsException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidFirehoseDestinationException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        EventDestinationName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["EventDestinationName"] !== void 0) {
        contents.EventDestinationName = smithy_client_1.expectString(output["EventDestinationName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidLambdaFunctionException = (output, context) => {
      const contents = {
        FunctionArn: void 0,
        message: void 0
      };
      if (output["FunctionArn"] !== void 0) {
        contents.FunctionArn = smithy_client_1.expectString(output["FunctionArn"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidPolicyException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidRenderingParameterException = (output, context) => {
      const contents = {
        TemplateName: void 0,
        message: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidS3ConfigurationException = (output, context) => {
      const contents = {
        Bucket: void 0,
        message: void 0
      };
      if (output["Bucket"] !== void 0) {
        contents.Bucket = smithy_client_1.expectString(output["Bucket"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidSNSDestinationException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        EventDestinationName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["EventDestinationName"] !== void 0) {
        contents.EventDestinationName = smithy_client_1.expectString(output["EventDestinationName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidSnsTopicException = (output, context) => {
      const contents = {
        Topic: void 0,
        message: void 0
      };
      if (output["Topic"] !== void 0) {
        contents.Topic = smithy_client_1.expectString(output["Topic"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidTemplateException = (output, context) => {
      const contents = {
        TemplateName: void 0,
        message: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidTrackingOptionsException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryKinesisFirehoseDestination = (output, context) => {
      const contents = {
        IAMRoleARN: void 0,
        DeliveryStreamARN: void 0
      };
      if (output["IAMRoleARN"] !== void 0) {
        contents.IAMRoleARN = smithy_client_1.expectString(output["IAMRoleARN"]);
      }
      if (output["DeliveryStreamARN"] !== void 0) {
        contents.DeliveryStreamARN = smithy_client_1.expectString(output["DeliveryStreamARN"]);
      }
      return contents;
    };
    var deserializeAws_queryLambdaAction = (output, context) => {
      const contents = {
        TopicArn: void 0,
        FunctionArn: void 0,
        InvocationType: void 0
      };
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      if (output["FunctionArn"] !== void 0) {
        contents.FunctionArn = smithy_client_1.expectString(output["FunctionArn"]);
      }
      if (output["InvocationType"] !== void 0) {
        contents.InvocationType = smithy_client_1.expectString(output["InvocationType"]);
      }
      return contents;
    };
    var deserializeAws_queryLimitExceededException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryListConfigurationSetsResponse = (output, context) => {
      const contents = {
        ConfigurationSets: void 0,
        NextToken: void 0
      };
      if (output.ConfigurationSets === "") {
        contents.ConfigurationSets = [];
      }
      if (output["ConfigurationSets"] !== void 0 && output["ConfigurationSets"]["member"] !== void 0) {
        contents.ConfigurationSets = deserializeAws_queryConfigurationSets(smithy_client_1.getArrayIfSingleItem(output["ConfigurationSets"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = smithy_client_1.expectString(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListCustomVerificationEmailTemplatesResponse = (output, context) => {
      const contents = {
        CustomVerificationEmailTemplates: void 0,
        NextToken: void 0
      };
      if (output.CustomVerificationEmailTemplates === "") {
        contents.CustomVerificationEmailTemplates = [];
      }
      if (output["CustomVerificationEmailTemplates"] !== void 0 && output["CustomVerificationEmailTemplates"]["member"] !== void 0) {
        contents.CustomVerificationEmailTemplates = deserializeAws_queryCustomVerificationEmailTemplates(smithy_client_1.getArrayIfSingleItem(output["CustomVerificationEmailTemplates"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = smithy_client_1.expectString(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListIdentitiesResponse = (output, context) => {
      const contents = {
        Identities: void 0,
        NextToken: void 0
      };
      if (output.Identities === "") {
        contents.Identities = [];
      }
      if (output["Identities"] !== void 0 && output["Identities"]["member"] !== void 0) {
        contents.Identities = deserializeAws_queryIdentityList(smithy_client_1.getArrayIfSingleItem(output["Identities"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = smithy_client_1.expectString(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListIdentityPoliciesResponse = (output, context) => {
      const contents = {
        PolicyNames: void 0
      };
      if (output.PolicyNames === "") {
        contents.PolicyNames = [];
      }
      if (output["PolicyNames"] !== void 0 && output["PolicyNames"]["member"] !== void 0) {
        contents.PolicyNames = deserializeAws_queryPolicyNameList(smithy_client_1.getArrayIfSingleItem(output["PolicyNames"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListReceiptFiltersResponse = (output, context) => {
      const contents = {
        Filters: void 0
      };
      if (output.Filters === "") {
        contents.Filters = [];
      }
      if (output["Filters"] !== void 0 && output["Filters"]["member"] !== void 0) {
        contents.Filters = deserializeAws_queryReceiptFilterList(smithy_client_1.getArrayIfSingleItem(output["Filters"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListReceiptRuleSetsResponse = (output, context) => {
      const contents = {
        RuleSets: void 0,
        NextToken: void 0
      };
      if (output.RuleSets === "") {
        contents.RuleSets = [];
      }
      if (output["RuleSets"] !== void 0 && output["RuleSets"]["member"] !== void 0) {
        contents.RuleSets = deserializeAws_queryReceiptRuleSetsLists(smithy_client_1.getArrayIfSingleItem(output["RuleSets"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = smithy_client_1.expectString(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListTemplatesResponse = (output, context) => {
      const contents = {
        TemplatesMetadata: void 0,
        NextToken: void 0
      };
      if (output.TemplatesMetadata === "") {
        contents.TemplatesMetadata = [];
      }
      if (output["TemplatesMetadata"] !== void 0 && output["TemplatesMetadata"]["member"] !== void 0) {
        contents.TemplatesMetadata = deserializeAws_queryTemplateMetadataList(smithy_client_1.getArrayIfSingleItem(output["TemplatesMetadata"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = smithy_client_1.expectString(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListVerifiedEmailAddressesResponse = (output, context) => {
      const contents = {
        VerifiedEmailAddresses: void 0
      };
      if (output.VerifiedEmailAddresses === "") {
        contents.VerifiedEmailAddresses = [];
      }
      if (output["VerifiedEmailAddresses"] !== void 0 && output["VerifiedEmailAddresses"]["member"] !== void 0) {
        contents.VerifiedEmailAddresses = deserializeAws_queryAddressList(smithy_client_1.getArrayIfSingleItem(output["VerifiedEmailAddresses"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryMailFromDomainAttributes = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [pair["key"]]: deserializeAws_queryIdentityMailFromDomainAttributes(pair["value"], context)
        });
      }, {});
    };
    var deserializeAws_queryMailFromDomainNotVerifiedException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMessageRejected = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMissingRenderingAttributeException = (output, context) => {
      const contents = {
        TemplateName: void 0,
        message: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryNotificationAttributes = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [pair["key"]]: deserializeAws_queryIdentityNotificationAttributes(pair["value"], context)
        });
      }, {});
    };
    var deserializeAws_queryPolicyMap = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [pair["key"]]: smithy_client_1.expectString(pair["value"])
        });
      }, {});
    };
    var deserializeAws_queryPolicyNameList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryProductionAccessNotGrantedException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryPutIdentityPolicyResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryReceiptAction = (output, context) => {
      const contents = {
        S3Action: void 0,
        BounceAction: void 0,
        WorkmailAction: void 0,
        LambdaAction: void 0,
        StopAction: void 0,
        AddHeaderAction: void 0,
        SNSAction: void 0
      };
      if (output["S3Action"] !== void 0) {
        contents.S3Action = deserializeAws_queryS3Action(output["S3Action"], context);
      }
      if (output["BounceAction"] !== void 0) {
        contents.BounceAction = deserializeAws_queryBounceAction(output["BounceAction"], context);
      }
      if (output["WorkmailAction"] !== void 0) {
        contents.WorkmailAction = deserializeAws_queryWorkmailAction(output["WorkmailAction"], context);
      }
      if (output["LambdaAction"] !== void 0) {
        contents.LambdaAction = deserializeAws_queryLambdaAction(output["LambdaAction"], context);
      }
      if (output["StopAction"] !== void 0) {
        contents.StopAction = deserializeAws_queryStopAction(output["StopAction"], context);
      }
      if (output["AddHeaderAction"] !== void 0) {
        contents.AddHeaderAction = deserializeAws_queryAddHeaderAction(output["AddHeaderAction"], context);
      }
      if (output["SNSAction"] !== void 0) {
        contents.SNSAction = deserializeAws_querySNSAction(output["SNSAction"], context);
      }
      return contents;
    };
    var deserializeAws_queryReceiptActionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReceiptAction(entry, context);
      });
    };
    var deserializeAws_queryReceiptFilter = (output, context) => {
      const contents = {
        Name: void 0,
        IpFilter: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["IpFilter"] !== void 0) {
        contents.IpFilter = deserializeAws_queryReceiptIpFilter(output["IpFilter"], context);
      }
      return contents;
    };
    var deserializeAws_queryReceiptFilterList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReceiptFilter(entry, context);
      });
    };
    var deserializeAws_queryReceiptIpFilter = (output, context) => {
      const contents = {
        Policy: void 0,
        Cidr: void 0
      };
      if (output["Policy"] !== void 0) {
        contents.Policy = smithy_client_1.expectString(output["Policy"]);
      }
      if (output["Cidr"] !== void 0) {
        contents.Cidr = smithy_client_1.expectString(output["Cidr"]);
      }
      return contents;
    };
    var deserializeAws_queryReceiptRule = (output, context) => {
      const contents = {
        Name: void 0,
        Enabled: void 0,
        TlsPolicy: void 0,
        Recipients: void 0,
        Actions: void 0,
        ScanEnabled: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["Enabled"] !== void 0) {
        contents.Enabled = smithy_client_1.parseBoolean(output["Enabled"]);
      }
      if (output["TlsPolicy"] !== void 0) {
        contents.TlsPolicy = smithy_client_1.expectString(output["TlsPolicy"]);
      }
      if (output.Recipients === "") {
        contents.Recipients = [];
      }
      if (output["Recipients"] !== void 0 && output["Recipients"]["member"] !== void 0) {
        contents.Recipients = deserializeAws_queryRecipientsList(smithy_client_1.getArrayIfSingleItem(output["Recipients"]["member"]), context);
      }
      if (output.Actions === "") {
        contents.Actions = [];
      }
      if (output["Actions"] !== void 0 && output["Actions"]["member"] !== void 0) {
        contents.Actions = deserializeAws_queryReceiptActionsList(smithy_client_1.getArrayIfSingleItem(output["Actions"]["member"]), context);
      }
      if (output["ScanEnabled"] !== void 0) {
        contents.ScanEnabled = smithy_client_1.parseBoolean(output["ScanEnabled"]);
      }
      return contents;
    };
    var deserializeAws_queryReceiptRuleSetMetadata = (output, context) => {
      const contents = {
        Name: void 0,
        CreatedTimestamp: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["CreatedTimestamp"] !== void 0) {
        contents.CreatedTimestamp = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output["CreatedTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryReceiptRuleSetsLists = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReceiptRuleSetMetadata(entry, context);
      });
    };
    var deserializeAws_queryReceiptRulesList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReceiptRule(entry, context);
      });
    };
    var deserializeAws_queryRecipientsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryReorderReceiptRuleSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryReputationOptions = (output, context) => {
      const contents = {
        SendingEnabled: void 0,
        ReputationMetricsEnabled: void 0,
        LastFreshStart: void 0
      };
      if (output["SendingEnabled"] !== void 0) {
        contents.SendingEnabled = smithy_client_1.parseBoolean(output["SendingEnabled"]);
      }
      if (output["ReputationMetricsEnabled"] !== void 0) {
        contents.ReputationMetricsEnabled = smithy_client_1.parseBoolean(output["ReputationMetricsEnabled"]);
      }
      if (output["LastFreshStart"] !== void 0) {
        contents.LastFreshStart = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output["LastFreshStart"]));
      }
      return contents;
    };
    var deserializeAws_queryRuleDoesNotExistException = (output, context) => {
      const contents = {
        Name: void 0,
        message: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRuleSetDoesNotExistException = (output, context) => {
      const contents = {
        Name: void 0,
        message: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryS3Action = (output, context) => {
      const contents = {
        TopicArn: void 0,
        BucketName: void 0,
        ObjectKeyPrefix: void 0,
        KmsKeyArn: void 0
      };
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      if (output["BucketName"] !== void 0) {
        contents.BucketName = smithy_client_1.expectString(output["BucketName"]);
      }
      if (output["ObjectKeyPrefix"] !== void 0) {
        contents.ObjectKeyPrefix = smithy_client_1.expectString(output["ObjectKeyPrefix"]);
      }
      if (output["KmsKeyArn"] !== void 0) {
        contents.KmsKeyArn = smithy_client_1.expectString(output["KmsKeyArn"]);
      }
      return contents;
    };
    var deserializeAws_querySendBounceResponse = (output, context) => {
      const contents = {
        MessageId: void 0
      };
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_querySendBulkTemplatedEmailResponse = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output.Status === "") {
        contents.Status = [];
      }
      if (output["Status"] !== void 0 && output["Status"]["member"] !== void 0) {
        contents.Status = deserializeAws_queryBulkEmailDestinationStatusList(smithy_client_1.getArrayIfSingleItem(output["Status"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_querySendCustomVerificationEmailResponse = (output, context) => {
      const contents = {
        MessageId: void 0
      };
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_querySendDataPoint = (output, context) => {
      const contents = {
        Timestamp: void 0,
        DeliveryAttempts: void 0,
        Bounces: void 0,
        Complaints: void 0,
        Rejects: void 0
      };
      if (output["Timestamp"] !== void 0) {
        contents.Timestamp = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output["Timestamp"]));
      }
      if (output["DeliveryAttempts"] !== void 0) {
        contents.DeliveryAttempts = smithy_client_1.strictParseLong(output["DeliveryAttempts"]);
      }
      if (output["Bounces"] !== void 0) {
        contents.Bounces = smithy_client_1.strictParseLong(output["Bounces"]);
      }
      if (output["Complaints"] !== void 0) {
        contents.Complaints = smithy_client_1.strictParseLong(output["Complaints"]);
      }
      if (output["Rejects"] !== void 0) {
        contents.Rejects = smithy_client_1.strictParseLong(output["Rejects"]);
      }
      return contents;
    };
    var deserializeAws_querySendDataPointList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_querySendDataPoint(entry, context);
      });
    };
    var deserializeAws_querySendEmailResponse = (output, context) => {
      const contents = {
        MessageId: void 0
      };
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_querySendRawEmailResponse = (output, context) => {
      const contents = {
        MessageId: void 0
      };
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_querySendTemplatedEmailResponse = (output, context) => {
      const contents = {
        MessageId: void 0
      };
      if (output["MessageId"] !== void 0) {
        contents.MessageId = smithy_client_1.expectString(output["MessageId"]);
      }
      return contents;
    };
    var deserializeAws_querySetActiveReceiptRuleSetResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetIdentityDkimEnabledResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetIdentityMailFromDomainResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetIdentityNotificationTopicResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySetReceiptRulePositionResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySNSAction = (output, context) => {
      const contents = {
        TopicArn: void 0,
        Encoding: void 0
      };
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      if (output["Encoding"] !== void 0) {
        contents.Encoding = smithy_client_1.expectString(output["Encoding"]);
      }
      return contents;
    };
    var deserializeAws_querySNSDestination = (output, context) => {
      const contents = {
        TopicARN: void 0
      };
      if (output["TopicARN"] !== void 0) {
        contents.TopicARN = smithy_client_1.expectString(output["TopicARN"]);
      }
      return contents;
    };
    var deserializeAws_queryStopAction = (output, context) => {
      const contents = {
        Scope: void 0,
        TopicArn: void 0
      };
      if (output["Scope"] !== void 0) {
        contents.Scope = smithy_client_1.expectString(output["Scope"]);
      }
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      return contents;
    };
    var deserializeAws_queryTemplate = (output, context) => {
      const contents = {
        TemplateName: void 0,
        SubjectPart: void 0,
        TextPart: void 0,
        HtmlPart: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["SubjectPart"] !== void 0) {
        contents.SubjectPart = smithy_client_1.expectString(output["SubjectPart"]);
      }
      if (output["TextPart"] !== void 0) {
        contents.TextPart = smithy_client_1.expectString(output["TextPart"]);
      }
      if (output["HtmlPart"] !== void 0) {
        contents.HtmlPart = smithy_client_1.expectString(output["HtmlPart"]);
      }
      return contents;
    };
    var deserializeAws_queryTemplateDoesNotExistException = (output, context) => {
      const contents = {
        TemplateName: void 0,
        message: void 0
      };
      if (output["TemplateName"] !== void 0) {
        contents.TemplateName = smithy_client_1.expectString(output["TemplateName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryTemplateMetadata = (output, context) => {
      const contents = {
        Name: void 0,
        CreatedTimestamp: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = smithy_client_1.expectString(output["Name"]);
      }
      if (output["CreatedTimestamp"] !== void 0) {
        contents.CreatedTimestamp = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output["CreatedTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryTemplateMetadataList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryTemplateMetadata(entry, context);
      });
    };
    var deserializeAws_queryTestRenderTemplateResponse = (output, context) => {
      const contents = {
        RenderedTemplate: void 0
      };
      if (output["RenderedTemplate"] !== void 0) {
        contents.RenderedTemplate = smithy_client_1.expectString(output["RenderedTemplate"]);
      }
      return contents;
    };
    var deserializeAws_queryTrackingOptions = (output, context) => {
      const contents = {
        CustomRedirectDomain: void 0
      };
      if (output["CustomRedirectDomain"] !== void 0) {
        contents.CustomRedirectDomain = smithy_client_1.expectString(output["CustomRedirectDomain"]);
      }
      return contents;
    };
    var deserializeAws_queryTrackingOptionsAlreadyExistsException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryTrackingOptionsDoesNotExistException = (output, context) => {
      const contents = {
        ConfigurationSetName: void 0,
        message: void 0
      };
      if (output["ConfigurationSetName"] !== void 0) {
        contents.ConfigurationSetName = smithy_client_1.expectString(output["ConfigurationSetName"]);
      }
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryUpdateConfigurationSetEventDestinationResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryUpdateReceiptRuleResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryUpdateTemplateResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryVerificationAttributes = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [pair["key"]]: deserializeAws_queryIdentityVerificationAttributes(pair["value"], context)
        });
      }, {});
    };
    var deserializeAws_queryVerificationTokenList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return smithy_client_1.expectString(entry);
      });
    };
    var deserializeAws_queryVerifyDomainDkimResponse = (output, context) => {
      const contents = {
        DkimTokens: void 0
      };
      if (output.DkimTokens === "") {
        contents.DkimTokens = [];
      }
      if (output["DkimTokens"] !== void 0 && output["DkimTokens"]["member"] !== void 0) {
        contents.DkimTokens = deserializeAws_queryVerificationTokenList(smithy_client_1.getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryVerifyDomainIdentityResponse = (output, context) => {
      const contents = {
        VerificationToken: void 0
      };
      if (output["VerificationToken"] !== void 0) {
        contents.VerificationToken = smithy_client_1.expectString(output["VerificationToken"]);
      }
      return contents;
    };
    var deserializeAws_queryVerifyEmailIdentityResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryWorkmailAction = (output, context) => {
      const contents = {
        TopicArn: void 0,
        OrganizationArn: void 0
      };
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = smithy_client_1.expectString(output["TopicArn"]);
      }
      if (output["OrganizationArn"] !== void 0) {
        contents.OrganizationArn = smithy_client_1.expectString(output["OrganizationArn"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = fast_xml_parser_1.parse(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : entities_1.decodeHTML(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return smithy_client_1.getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => smithy_client_1.extendedEncodeURIComponent(key) + "=" + smithy_client_1.extendedEncodeURIComponent(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CloneReceiptRuleSetCommand.js
var require_CloneReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CloneReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloneReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CloneReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CloneReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CloneReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CloneReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCloneReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCloneReceiptRuleSetCommand(output, context);
      }
    };
    exports2.CloneReceiptRuleSetCommand = CloneReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetCommand.js
var require_CreateConfigurationSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConfigurationSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateConfigurationSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateConfigurationSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateConfigurationSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateConfigurationSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateConfigurationSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateConfigurationSetCommand(output, context);
      }
    };
    exports2.CreateConfigurationSetCommand = CreateConfigurationSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetEventDestinationCommand.js
var require_CreateConfigurationSetEventDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetEventDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConfigurationSetEventDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateConfigurationSetEventDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateConfigurationSetEventDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateConfigurationSetEventDestinationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateConfigurationSetEventDestinationResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateConfigurationSetEventDestinationCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateConfigurationSetEventDestinationCommand(output, context);
      }
    };
    exports2.CreateConfigurationSetEventDestinationCommand = CreateConfigurationSetEventDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetTrackingOptionsCommand.js
var require_CreateConfigurationSetTrackingOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateConfigurationSetTrackingOptionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConfigurationSetTrackingOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateConfigurationSetTrackingOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateConfigurationSetTrackingOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateConfigurationSetTrackingOptionsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateConfigurationSetTrackingOptionsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand(output, context);
      }
    };
    exports2.CreateConfigurationSetTrackingOptionsCommand = CreateConfigurationSetTrackingOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateCustomVerificationEmailTemplateCommand.js
var require_CreateCustomVerificationEmailTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateCustomVerificationEmailTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCustomVerificationEmailTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateCustomVerificationEmailTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateCustomVerificationEmailTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateCustomVerificationEmailTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateCustomVerificationEmailTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateCustomVerificationEmailTemplateCommand(output, context);
      }
    };
    exports2.CreateCustomVerificationEmailTemplateCommand = CreateCustomVerificationEmailTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptFilterCommand.js
var require_CreateReceiptFilterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptFilterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateReceiptFilterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateReceiptFilterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateReceiptFilterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateReceiptFilterRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateReceiptFilterResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateReceiptFilterCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateReceiptFilterCommand(output, context);
      }
    };
    exports2.CreateReceiptFilterCommand = CreateReceiptFilterCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptRuleCommand.js
var require_CreateReceiptRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptRuleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateReceiptRuleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateReceiptRuleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateReceiptRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateReceiptRuleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateReceiptRuleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateReceiptRuleCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateReceiptRuleCommand(output, context);
      }
    };
    exports2.CreateReceiptRuleCommand = CreateReceiptRuleCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptRuleSetCommand.js
var require_CreateReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateReceiptRuleSetCommand(output, context);
      }
    };
    exports2.CreateReceiptRuleSetCommand = CreateReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateTemplateCommand.js
var require_CreateTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/CreateTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "CreateTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryCreateTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryCreateTemplateCommand(output, context);
      }
    };
    exports2.CreateTemplateCommand = CreateTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetCommand.js
var require_DeleteConfigurationSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteConfigurationSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteConfigurationSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteConfigurationSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteConfigurationSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteConfigurationSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteConfigurationSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteConfigurationSetCommand(output, context);
      }
    };
    exports2.DeleteConfigurationSetCommand = DeleteConfigurationSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetEventDestinationCommand.js
var require_DeleteConfigurationSetEventDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetEventDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteConfigurationSetEventDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteConfigurationSetEventDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteConfigurationSetEventDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteConfigurationSetEventDestinationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteConfigurationSetEventDestinationResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteConfigurationSetEventDestinationCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteConfigurationSetEventDestinationCommand(output, context);
      }
    };
    exports2.DeleteConfigurationSetEventDestinationCommand = DeleteConfigurationSetEventDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetTrackingOptionsCommand.js
var require_DeleteConfigurationSetTrackingOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteConfigurationSetTrackingOptionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteConfigurationSetTrackingOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteConfigurationSetTrackingOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteConfigurationSetTrackingOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteConfigurationSetTrackingOptionsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand(output, context);
      }
    };
    exports2.DeleteConfigurationSetTrackingOptionsCommand = DeleteConfigurationSetTrackingOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteCustomVerificationEmailTemplateCommand.js
var require_DeleteCustomVerificationEmailTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteCustomVerificationEmailTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCustomVerificationEmailTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteCustomVerificationEmailTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteCustomVerificationEmailTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteCustomVerificationEmailTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteCustomVerificationEmailTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand(output, context);
      }
    };
    exports2.DeleteCustomVerificationEmailTemplateCommand = DeleteCustomVerificationEmailTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteIdentityCommand.js
var require_DeleteIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteIdentityCommand(output, context);
      }
    };
    exports2.DeleteIdentityCommand = DeleteIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteIdentityPolicyCommand.js
var require_DeleteIdentityPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteIdentityPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteIdentityPolicyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteIdentityPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteIdentityPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteIdentityPolicyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteIdentityPolicyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteIdentityPolicyCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteIdentityPolicyCommand(output, context);
      }
    };
    exports2.DeleteIdentityPolicyCommand = DeleteIdentityPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptFilterCommand.js
var require_DeleteReceiptFilterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptFilterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteReceiptFilterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteReceiptFilterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteReceiptFilterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteReceiptFilterRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteReceiptFilterResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteReceiptFilterCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteReceiptFilterCommand(output, context);
      }
    };
    exports2.DeleteReceiptFilterCommand = DeleteReceiptFilterCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptRuleCommand.js
var require_DeleteReceiptRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptRuleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteReceiptRuleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteReceiptRuleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteReceiptRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteReceiptRuleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteReceiptRuleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteReceiptRuleCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteReceiptRuleCommand(output, context);
      }
    };
    exports2.DeleteReceiptRuleCommand = DeleteReceiptRuleCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptRuleSetCommand.js
var require_DeleteReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteReceiptRuleSetCommand(output, context);
      }
    };
    exports2.DeleteReceiptRuleSetCommand = DeleteReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteTemplateCommand.js
var require_DeleteTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteTemplateCommand(output, context);
      }
    };
    exports2.DeleteTemplateCommand = DeleteTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteVerifiedEmailAddressCommand.js
var require_DeleteVerifiedEmailAddressCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DeleteVerifiedEmailAddressCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteVerifiedEmailAddressCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteVerifiedEmailAddressCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DeleteVerifiedEmailAddressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteVerifiedEmailAddressRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDeleteVerifiedEmailAddressCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDeleteVerifiedEmailAddressCommand(output, context);
      }
    };
    exports2.DeleteVerifiedEmailAddressCommand = DeleteVerifiedEmailAddressCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeActiveReceiptRuleSetCommand.js
var require_DescribeActiveReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeActiveReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeActiveReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeActiveReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DescribeActiveReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeActiveReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeActiveReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDescribeActiveReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDescribeActiveReceiptRuleSetCommand(output, context);
      }
    };
    exports2.DescribeActiveReceiptRuleSetCommand = DescribeActiveReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeConfigurationSetCommand.js
var require_DescribeConfigurationSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeConfigurationSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeConfigurationSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeConfigurationSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DescribeConfigurationSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeConfigurationSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeConfigurationSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDescribeConfigurationSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDescribeConfigurationSetCommand(output, context);
      }
    };
    exports2.DescribeConfigurationSetCommand = DescribeConfigurationSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeReceiptRuleCommand.js
var require_DescribeReceiptRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeReceiptRuleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeReceiptRuleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeReceiptRuleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DescribeReceiptRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeReceiptRuleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeReceiptRuleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDescribeReceiptRuleCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDescribeReceiptRuleCommand(output, context);
      }
    };
    exports2.DescribeReceiptRuleCommand = DescribeReceiptRuleCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeReceiptRuleSetCommand.js
var require_DescribeReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/DescribeReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "DescribeReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDescribeReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDescribeReceiptRuleSetCommand(output, context);
      }
    };
    exports2.DescribeReceiptRuleSetCommand = DescribeReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetAccountSendingEnabledCommand.js
var require_GetAccountSendingEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetAccountSendingEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccountSendingEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccountSendingEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetAccountSendingEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetAccountSendingEnabledResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetAccountSendingEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetAccountSendingEnabledCommand(output, context);
      }
    };
    exports2.GetAccountSendingEnabledCommand = GetAccountSendingEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetCustomVerificationEmailTemplateCommand.js
var require_GetCustomVerificationEmailTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetCustomVerificationEmailTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCustomVerificationEmailTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetCustomVerificationEmailTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetCustomVerificationEmailTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCustomVerificationEmailTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCustomVerificationEmailTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetCustomVerificationEmailTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetCustomVerificationEmailTemplateCommand(output, context);
      }
    };
    exports2.GetCustomVerificationEmailTemplateCommand = GetCustomVerificationEmailTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityDkimAttributesCommand.js
var require_GetIdentityDkimAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityDkimAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetIdentityDkimAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetIdentityDkimAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetIdentityDkimAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetIdentityDkimAttributesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetIdentityDkimAttributesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetIdentityDkimAttributesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetIdentityDkimAttributesCommand(output, context);
      }
    };
    exports2.GetIdentityDkimAttributesCommand = GetIdentityDkimAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityMailFromDomainAttributesCommand.js
var require_GetIdentityMailFromDomainAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityMailFromDomainAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetIdentityMailFromDomainAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetIdentityMailFromDomainAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetIdentityMailFromDomainAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetIdentityMailFromDomainAttributesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetIdentityMailFromDomainAttributesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetIdentityMailFromDomainAttributesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetIdentityMailFromDomainAttributesCommand(output, context);
      }
    };
    exports2.GetIdentityMailFromDomainAttributesCommand = GetIdentityMailFromDomainAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityNotificationAttributesCommand.js
var require_GetIdentityNotificationAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityNotificationAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetIdentityNotificationAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetIdentityNotificationAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetIdentityNotificationAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetIdentityNotificationAttributesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetIdentityNotificationAttributesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetIdentityNotificationAttributesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetIdentityNotificationAttributesCommand(output, context);
      }
    };
    exports2.GetIdentityNotificationAttributesCommand = GetIdentityNotificationAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityPoliciesCommand.js
var require_GetIdentityPoliciesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityPoliciesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetIdentityPoliciesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetIdentityPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetIdentityPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetIdentityPoliciesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetIdentityPoliciesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetIdentityPoliciesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetIdentityPoliciesCommand(output, context);
      }
    };
    exports2.GetIdentityPoliciesCommand = GetIdentityPoliciesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityVerificationAttributesCommand.js
var require_GetIdentityVerificationAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetIdentityVerificationAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetIdentityVerificationAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetIdentityVerificationAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetIdentityVerificationAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetIdentityVerificationAttributesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetIdentityVerificationAttributesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetIdentityVerificationAttributesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetIdentityVerificationAttributesCommand(output, context);
      }
    };
    exports2.GetIdentityVerificationAttributesCommand = GetIdentityVerificationAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetSendQuotaCommand.js
var require_GetSendQuotaCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetSendQuotaCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSendQuotaCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSendQuotaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetSendQuotaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetSendQuotaResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetSendQuotaCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetSendQuotaCommand(output, context);
      }
    };
    exports2.GetSendQuotaCommand = GetSendQuotaCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetSendStatisticsCommand.js
var require_GetSendStatisticsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetSendStatisticsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSendStatisticsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSendStatisticsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetSendStatisticsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetSendStatisticsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetSendStatisticsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetSendStatisticsCommand(output, context);
      }
    };
    exports2.GetSendStatisticsCommand = GetSendStatisticsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetTemplateCommand.js
var require_GetTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/GetTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "GetTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetTemplateCommand(output, context);
      }
    };
    exports2.GetTemplateCommand = GetTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListConfigurationSetsCommand.js
var require_ListConfigurationSetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListConfigurationSetsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListConfigurationSetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListConfigurationSetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListConfigurationSetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListConfigurationSetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListConfigurationSetsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListConfigurationSetsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListConfigurationSetsCommand(output, context);
      }
    };
    exports2.ListConfigurationSetsCommand = ListConfigurationSetsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListCustomVerificationEmailTemplatesCommand.js
var require_ListCustomVerificationEmailTemplatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListCustomVerificationEmailTemplatesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListCustomVerificationEmailTemplatesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListCustomVerificationEmailTemplatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListCustomVerificationEmailTemplatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListCustomVerificationEmailTemplatesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListCustomVerificationEmailTemplatesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListCustomVerificationEmailTemplatesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListCustomVerificationEmailTemplatesCommand(output, context);
      }
    };
    exports2.ListCustomVerificationEmailTemplatesCommand = ListCustomVerificationEmailTemplatesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListIdentitiesCommand.js
var require_ListIdentitiesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListIdentitiesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListIdentitiesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListIdentitiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListIdentitiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListIdentitiesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListIdentitiesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListIdentitiesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListIdentitiesCommand(output, context);
      }
    };
    exports2.ListIdentitiesCommand = ListIdentitiesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListIdentityPoliciesCommand.js
var require_ListIdentityPoliciesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListIdentityPoliciesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListIdentityPoliciesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListIdentityPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListIdentityPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListIdentityPoliciesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListIdentityPoliciesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListIdentityPoliciesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListIdentityPoliciesCommand(output, context);
      }
    };
    exports2.ListIdentityPoliciesCommand = ListIdentityPoliciesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListReceiptFiltersCommand.js
var require_ListReceiptFiltersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListReceiptFiltersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListReceiptFiltersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListReceiptFiltersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListReceiptFiltersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListReceiptFiltersRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListReceiptFiltersResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListReceiptFiltersCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListReceiptFiltersCommand(output, context);
      }
    };
    exports2.ListReceiptFiltersCommand = ListReceiptFiltersCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListReceiptRuleSetsCommand.js
var require_ListReceiptRuleSetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListReceiptRuleSetsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListReceiptRuleSetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListReceiptRuleSetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListReceiptRuleSetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListReceiptRuleSetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListReceiptRuleSetsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListReceiptRuleSetsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListReceiptRuleSetsCommand(output, context);
      }
    };
    exports2.ListReceiptRuleSetsCommand = ListReceiptRuleSetsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListTemplatesCommand.js
var require_ListTemplatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListTemplatesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTemplatesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListTemplatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListTemplatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTemplatesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTemplatesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListTemplatesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListTemplatesCommand(output, context);
      }
    };
    exports2.ListTemplatesCommand = ListTemplatesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListVerifiedEmailAddressesCommand.js
var require_ListVerifiedEmailAddressesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ListVerifiedEmailAddressesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListVerifiedEmailAddressesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListVerifiedEmailAddressesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ListVerifiedEmailAddressesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.ListVerifiedEmailAddressesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryListVerifiedEmailAddressesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryListVerifiedEmailAddressesCommand(output, context);
      }
    };
    exports2.ListVerifiedEmailAddressesCommand = ListVerifiedEmailAddressesCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/PutConfigurationSetDeliveryOptionsCommand.js
var require_PutConfigurationSetDeliveryOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/PutConfigurationSetDeliveryOptionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutConfigurationSetDeliveryOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutConfigurationSetDeliveryOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "PutConfigurationSetDeliveryOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutConfigurationSetDeliveryOptionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutConfigurationSetDeliveryOptionsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryPutConfigurationSetDeliveryOptionsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand(output, context);
      }
    };
    exports2.PutConfigurationSetDeliveryOptionsCommand = PutConfigurationSetDeliveryOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/PutIdentityPolicyCommand.js
var require_PutIdentityPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/PutIdentityPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutIdentityPolicyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutIdentityPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "PutIdentityPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutIdentityPolicyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutIdentityPolicyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryPutIdentityPolicyCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryPutIdentityPolicyCommand(output, context);
      }
    };
    exports2.PutIdentityPolicyCommand = PutIdentityPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/ReorderReceiptRuleSetCommand.js
var require_ReorderReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/ReorderReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ReorderReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ReorderReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "ReorderReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ReorderReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ReorderReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryReorderReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryReorderReceiptRuleSetCommand(output, context);
      }
    };
    exports2.ReorderReceiptRuleSetCommand = ReorderReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendBounceCommand.js
var require_SendBounceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendBounceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendBounceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendBounceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendBounceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendBounceRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendBounceResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendBounceCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendBounceCommand(output, context);
      }
    };
    exports2.SendBounceCommand = SendBounceCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendBulkTemplatedEmailCommand.js
var require_SendBulkTemplatedEmailCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendBulkTemplatedEmailCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendBulkTemplatedEmailCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendBulkTemplatedEmailCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendBulkTemplatedEmailCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendBulkTemplatedEmailRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendBulkTemplatedEmailResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendBulkTemplatedEmailCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendBulkTemplatedEmailCommand(output, context);
      }
    };
    exports2.SendBulkTemplatedEmailCommand = SendBulkTemplatedEmailCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendCustomVerificationEmailCommand.js
var require_SendCustomVerificationEmailCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendCustomVerificationEmailCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendCustomVerificationEmailCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendCustomVerificationEmailCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendCustomVerificationEmailCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendCustomVerificationEmailRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendCustomVerificationEmailResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendCustomVerificationEmailCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendCustomVerificationEmailCommand(output, context);
      }
    };
    exports2.SendCustomVerificationEmailCommand = SendCustomVerificationEmailCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendEmailCommand.js
var require_SendEmailCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendEmailCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendEmailCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendEmailCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendEmailCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendEmailRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendEmailResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendEmailCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendEmailCommand(output, context);
      }
    };
    exports2.SendEmailCommand = SendEmailCommand2;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendRawEmailCommand.js
var require_SendRawEmailCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendRawEmailCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendRawEmailCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendRawEmailCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendRawEmailCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendRawEmailRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendRawEmailResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendRawEmailCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendRawEmailCommand(output, context);
      }
    };
    exports2.SendRawEmailCommand = SendRawEmailCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendTemplatedEmailCommand.js
var require_SendTemplatedEmailCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SendTemplatedEmailCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SendTemplatedEmailCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SendTemplatedEmailCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SendTemplatedEmailCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendTemplatedEmailRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SendTemplatedEmailResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySendTemplatedEmailCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySendTemplatedEmailCommand(output, context);
      }
    };
    exports2.SendTemplatedEmailCommand = SendTemplatedEmailCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetActiveReceiptRuleSetCommand.js
var require_SetActiveReceiptRuleSetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetActiveReceiptRuleSetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetActiveReceiptRuleSetCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetActiveReceiptRuleSetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetActiveReceiptRuleSetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetActiveReceiptRuleSetRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetActiveReceiptRuleSetResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetActiveReceiptRuleSetCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetActiveReceiptRuleSetCommand(output, context);
      }
    };
    exports2.SetActiveReceiptRuleSetCommand = SetActiveReceiptRuleSetCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityDkimEnabledCommand.js
var require_SetIdentityDkimEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityDkimEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetIdentityDkimEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetIdentityDkimEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetIdentityDkimEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetIdentityDkimEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetIdentityDkimEnabledResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetIdentityDkimEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetIdentityDkimEnabledCommand(output, context);
      }
    };
    exports2.SetIdentityDkimEnabledCommand = SetIdentityDkimEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityFeedbackForwardingEnabledCommand.js
var require_SetIdentityFeedbackForwardingEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityFeedbackForwardingEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetIdentityFeedbackForwardingEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetIdentityFeedbackForwardingEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetIdentityFeedbackForwardingEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetIdentityFeedbackForwardingEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetIdentityFeedbackForwardingEnabledResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetIdentityFeedbackForwardingEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand(output, context);
      }
    };
    exports2.SetIdentityFeedbackForwardingEnabledCommand = SetIdentityFeedbackForwardingEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityHeadersInNotificationsEnabledCommand.js
var require_SetIdentityHeadersInNotificationsEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityHeadersInNotificationsEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetIdentityHeadersInNotificationsEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetIdentityHeadersInNotificationsEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetIdentityHeadersInNotificationsEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetIdentityHeadersInNotificationsEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetIdentityHeadersInNotificationsEnabledResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand(output, context);
      }
    };
    exports2.SetIdentityHeadersInNotificationsEnabledCommand = SetIdentityHeadersInNotificationsEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityMailFromDomainCommand.js
var require_SetIdentityMailFromDomainCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityMailFromDomainCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetIdentityMailFromDomainCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetIdentityMailFromDomainCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetIdentityMailFromDomainCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetIdentityMailFromDomainRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetIdentityMailFromDomainResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetIdentityMailFromDomainCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetIdentityMailFromDomainCommand(output, context);
      }
    };
    exports2.SetIdentityMailFromDomainCommand = SetIdentityMailFromDomainCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityNotificationTopicCommand.js
var require_SetIdentityNotificationTopicCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetIdentityNotificationTopicCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetIdentityNotificationTopicCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetIdentityNotificationTopicCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetIdentityNotificationTopicCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetIdentityNotificationTopicRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetIdentityNotificationTopicResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetIdentityNotificationTopicCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetIdentityNotificationTopicCommand(output, context);
      }
    };
    exports2.SetIdentityNotificationTopicCommand = SetIdentityNotificationTopicCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetReceiptRulePositionCommand.js
var require_SetReceiptRulePositionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/SetReceiptRulePositionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetReceiptRulePositionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetReceiptRulePositionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "SetReceiptRulePositionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetReceiptRulePositionRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetReceiptRulePositionResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_querySetReceiptRulePositionCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_querySetReceiptRulePositionCommand(output, context);
      }
    };
    exports2.SetReceiptRulePositionCommand = SetReceiptRulePositionCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/TestRenderTemplateCommand.js
var require_TestRenderTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/TestRenderTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TestRenderTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TestRenderTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "TestRenderTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TestRenderTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TestRenderTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryTestRenderTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryTestRenderTemplateCommand(output, context);
      }
    };
    exports2.TestRenderTemplateCommand = TestRenderTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateAccountSendingEnabledCommand.js
var require_UpdateAccountSendingEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateAccountSendingEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAccountSendingEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateAccountSendingEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateAccountSendingEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAccountSendingEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateAccountSendingEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateAccountSendingEnabledCommand(output, context);
      }
    };
    exports2.UpdateAccountSendingEnabledCommand = UpdateAccountSendingEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetEventDestinationCommand.js
var require_UpdateConfigurationSetEventDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetEventDestinationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConfigurationSetEventDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateConfigurationSetEventDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateConfigurationSetEventDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateConfigurationSetEventDestinationRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateConfigurationSetEventDestinationResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateConfigurationSetEventDestinationCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateConfigurationSetEventDestinationCommand(output, context);
      }
    };
    exports2.UpdateConfigurationSetEventDestinationCommand = UpdateConfigurationSetEventDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetReputationMetricsEnabledCommand.js
var require_UpdateConfigurationSetReputationMetricsEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetReputationMetricsEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConfigurationSetReputationMetricsEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateConfigurationSetReputationMetricsEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateConfigurationSetReputationMetricsEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateConfigurationSetReputationMetricsEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand(output, context);
      }
    };
    exports2.UpdateConfigurationSetReputationMetricsEnabledCommand = UpdateConfigurationSetReputationMetricsEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetSendingEnabledCommand.js
var require_UpdateConfigurationSetSendingEnabledCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetSendingEnabledCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConfigurationSetSendingEnabledCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateConfigurationSetSendingEnabledCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateConfigurationSetSendingEnabledCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateConfigurationSetSendingEnabledRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateConfigurationSetSendingEnabledCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand(output, context);
      }
    };
    exports2.UpdateConfigurationSetSendingEnabledCommand = UpdateConfigurationSetSendingEnabledCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetTrackingOptionsCommand.js
var require_UpdateConfigurationSetTrackingOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateConfigurationSetTrackingOptionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConfigurationSetTrackingOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateConfigurationSetTrackingOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateConfigurationSetTrackingOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateConfigurationSetTrackingOptionsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateConfigurationSetTrackingOptionsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand(output, context);
      }
    };
    exports2.UpdateConfigurationSetTrackingOptionsCommand = UpdateConfigurationSetTrackingOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateCustomVerificationEmailTemplateCommand.js
var require_UpdateCustomVerificationEmailTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateCustomVerificationEmailTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateCustomVerificationEmailTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateCustomVerificationEmailTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateCustomVerificationEmailTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateCustomVerificationEmailTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateCustomVerificationEmailTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand(output, context);
      }
    };
    exports2.UpdateCustomVerificationEmailTemplateCommand = UpdateCustomVerificationEmailTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateReceiptRuleCommand.js
var require_UpdateReceiptRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateReceiptRuleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateReceiptRuleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateReceiptRuleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateReceiptRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateReceiptRuleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateReceiptRuleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateReceiptRuleCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateReceiptRuleCommand(output, context);
      }
    };
    exports2.UpdateReceiptRuleCommand = UpdateReceiptRuleCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateTemplateCommand.js
var require_UpdateTemplateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/UpdateTemplateCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateTemplateCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UpdateTemplateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "UpdateTemplateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTemplateRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTemplateResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryUpdateTemplateCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryUpdateTemplateCommand(output, context);
      }
    };
    exports2.UpdateTemplateCommand = UpdateTemplateCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyDomainDkimCommand.js
var require_VerifyDomainDkimCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyDomainDkimCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VerifyDomainDkimCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var VerifyDomainDkimCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "VerifyDomainDkimCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyDomainDkimRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.VerifyDomainDkimResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryVerifyDomainDkimCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryVerifyDomainDkimCommand(output, context);
      }
    };
    exports2.VerifyDomainDkimCommand = VerifyDomainDkimCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyDomainIdentityCommand.js
var require_VerifyDomainIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyDomainIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VerifyDomainIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var VerifyDomainIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "VerifyDomainIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyDomainIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.VerifyDomainIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryVerifyDomainIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryVerifyDomainIdentityCommand(output, context);
      }
    };
    exports2.VerifyDomainIdentityCommand = VerifyDomainIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyEmailAddressCommand.js
var require_VerifyEmailAddressCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyEmailAddressCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VerifyEmailAddressCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var VerifyEmailAddressCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "VerifyEmailAddressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyEmailAddressRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryVerifyEmailAddressCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryVerifyEmailAddressCommand(output, context);
      }
    };
    exports2.VerifyEmailAddressCommand = VerifyEmailAddressCommand;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyEmailIdentityCommand.js
var require_VerifyEmailIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/VerifyEmailIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VerifyEmailIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var VerifyEmailIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SESClient";
        const commandName = "VerifyEmailIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.VerifyEmailIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.VerifyEmailIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryVerifyEmailIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryVerifyEmailIdentityCommand(output, context);
      }
    };
    exports2.VerifyEmailIdentityCommand = VerifyEmailIdentityCommand;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports2.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports2.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeBoolean.js
var require_normalizeBoolean = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeBoolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeBoolean = void 0;
    var normalizeBoolean = (value) => {
      if (typeof value === "boolean") {
        const promisified = Promise.resolve(value);
        return () => promisified;
      }
      return value;
    };
    exports2.normalizeBoolean = normalizeBoolean;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeEndpoint.js
var require_normalizeEndpoint = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeEndpoint = void 0;
    var normalizeEndpoint = ({ endpoint, urlParser }) => {
      if (typeof endpoint === "string") {
        const promisified = Promise.resolve(urlParser(endpoint));
        return () => promisified;
      } else if (typeof endpoint === "object") {
        const promisified = Promise.resolve(endpoint);
        return () => promisified;
      }
      return endpoint;
    };
    exports2.normalizeEndpoint = normalizeEndpoint;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var normalizeBoolean_1 = require_normalizeBoolean();
    var normalizeEndpoint_1 = require_normalizeEndpoint();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: normalizeEndpoint_1.normalizeEndpoint(input),
        isCustomEndpoint: true,
        useDualstackEndpoint: normalizeBoolean_1.normalizeBoolean(input.useDualstackEndpoint)
      });
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var normalizeBoolean_1 = require_normalizeBoolean();
    var normalizeEndpoint_1 = require_normalizeEndpoint();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = normalizeBoolean_1.normalizeBoolean(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint } = input;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? normalizeEndpoint_1.normalizeEndpoint(__spreadProps(__spreadValues({}, input), { endpoint })) : () => getEndpointFromRegion_1.getEndpointFromRegion(__spreadProps(__spreadValues({}, input), { useDualstackEndpoint, useFipsEndpoint })),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint
      });
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = "AWS_REGION";
    exports2.REGION_INI_NAME = "region";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => isFipsRegion_1.isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return __spreadProps(__spreadValues({}, input), {
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion_1.getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion_1.getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion_1.isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      });
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = getResolvedPartition_1.getResolvedPartition(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = getHostnameFromVariants_1.getHostnameFromVariants((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = getHostnameFromVariants_1.getHostnameFromVariants((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = getResolvedHostname_1.getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = getResolvedSigningRegion_1.getResolvedSigningRegion(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return __spreadValues(__spreadValues({
        partition,
        signingService,
        hostname
      }, signingRegion && { signingRegion }), ((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
        signingService: regionHash[resolvedRegion].signingService
      });
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = "content-length";
    var TRANSFER_ENCODING_HEADER = "transfer-encoding";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = __spreadProps(__spreadValues({}, request.headers), {
                [CONTENT_LENGTH_HEADER]: String(length)
              });
            } catch (error) {
              request.headers = __spreadProps(__spreadValues({}, request.headers), {
                [TRANSFER_ENCODING_HEADER]: "chunked"
              });
            }
          }
        }
        return next(__spreadProps(__spreadValues({}, args), {
          request
        }));
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(exports2.hostHeaderMiddleware(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const _a = response.output, { $metadata } = _a, outputWithoutMetadata = __objRest(_a, ["$metadata"]);
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(exports2.loggerMiddleware(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs10();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (service_error_classification_1.isThrottlingError(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/rng.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/regex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/stringify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/v1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/v35.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _default;
    exports2.URL = exports2.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports2.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports2.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/md5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/v3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/v4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/sha1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/v5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/nil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "node_modules/uuid/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports2, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports2, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports2, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports2, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports2, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports2, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports2.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs10();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return service_error_classification_1.isRetryableByTrait(error) || service_error_classification_1.isClockSkewError(error) || service_error_classification_1.isThrottlingError(error) || service_error_classification_1.isTransientError(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs10();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : defaultRetryQuota_1.getDefaultRetryQuota(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = uuid_1.v4();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider(service_error_classification_1.isThrottlingError(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const _a = options !== null && options !== void 0 ? options : {}, { rateLimiter } = _a, superOptions = __objRest(_a, ["rateLimiter"]);
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      const maxAttempts = normalizeMaxAttempts(input.maxAttempts);
      return __spreadProps(__spreadValues({}, input), {
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await getRetryMode(input.retryMode);
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      });
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    var getRetryMode = async (retryMode) => {
      if (typeof retryMode === "string") {
        return retryMode;
      }
      return await retryMode();
    };
    var normalizeMaxAttempts = (maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS) => {
      if (typeof maxAttempts === "number") {
        const promisified = Promise.resolve(maxAttempts);
        return () => promisified;
      }
      return maxAttempts;
    };
    exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports2.CONFIG_RETRY_MODE = "retry_mode";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(exports2.omitRetryHeadersMiddleware(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports2.retryMiddleware = retryMiddleware;
    exports2.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(exports2.retryMiddleware(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CredentialsProviderError = exports2.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
      }
      static from(error, tryNextLink = true) {
        Object.defineProperty(error, "tryNextLink", {
          value: tryNextLink,
          configurable: false,
          enumerable: false,
          writable: false
        });
        return error;
      }
    };
    exports2.ProviderError = ProviderError;
    var CredentialsProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
      }
      static from(error, tryNextLink = true) {
        Object.defineProperty(error, "tryNextLink", {
          value: tryNextLink,
          configurable: false,
          enumerable: false,
          writable: false
        });
        return error;
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports2.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async () => {
          if (!hasResult) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      let isConstant = false;
      return async () => {
        if (!hasResult) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.substr(i, 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports2.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports2.AUTH_HEADER = "authorization";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = "date";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = "x-amz-content-sha256";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = "host";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports2.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs13();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${util_hex_encoding_1.toHex(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports2.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs15();
    var util_hex_encoding_1 = require_dist_cjs13();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return util_hex_encoding_1.toHex(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = (_a) => {
      var _b = _a, { headers, query } = _b, rest = __objRest(_b, ["headers", "query"]);
      return __spreadProps(__spreadValues({}, rest), {
        headers: __spreadValues({}, headers),
        query: query ? exports2.cloneQuery(query) : void 0
      });
    };
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return __spreadProps(__spreadValues({}, carry), {
        [paramName]: Array.isArray(param) ? [...param] : param
      });
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : cloneRequest_1.cloneRequest(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.substr(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return __spreadProps(__spreadValues({}, request), {
        headers,
        query
      });
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/normalizeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeCredentialsProvider = exports2.normalizeRegionProvider = void 0;
    var normalizeRegionProvider = (region) => {
      if (typeof region === "string") {
        const promisified = Promise.resolve(region);
        return () => promisified;
      } else {
        return region;
      }
    };
    exports2.normalizeRegionProvider = normalizeRegionProvider;
    var normalizeCredentialsProvider = (credentials) => {
      if (typeof credentials === "object") {
        const promisified = Promise.resolve(credentials);
        return () => promisified;
      } else {
        return credentials;
      }
    };
    exports2.normalizeCredentialsProvider = normalizeCredentialsProvider;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : cloneRequest_1.cloneRequest(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => exports2.toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs13();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var normalizeProvider_1 = require_normalizeProvider();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider_1.normalizeRegionProvider(region);
        this.credentialProvider = normalizeProvider_1.normalizeCredentialsProvider(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = moveHeadersToQuery_1.moveHeadersToQuery(prepareRequest_1.prepareRequest(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash_1.getPayloadHash(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await getPayloadHash_1.getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = util_hex_encoding_1.toHex(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return util_hex_encoding_1.toHex(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = prepareRequest_1.prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash_1.getPayloadHash(request, this.sha256);
        if (!headerUtil_1.hasHeader(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery_1.getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${util_hex_encoding_1.toHex(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return util_hex_encoding_1.toHex(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return credentialDerivation_1.getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = utilDate_1.iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.substr(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeRegionProvider = exports2.normalizeCredentialsProvider = exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    var normalizeProvider_1 = require_normalizeProvider();
    Object.defineProperty(exports2, "normalizeCredentialsProvider", { enumerable: true, get: function() {
      return normalizeProvider_1.normalizeCredentialsProvider;
    } });
    Object.defineProperty(exports2, "normalizeRegionProvider", { enumerable: true, get: function() {
      return normalizeProvider_1.normalizeRegionProvider;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs12();
    var signature_v4_1 = require_dist_cjs16();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () => normalizeProvider(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = __spreadProps(__spreadValues({}, input), {
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          });
          const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new signerConstructor(params);
        });
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === "object") {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return property_provider_1.memoize(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate_1.getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed_1.isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer = await options.signer();
      const output = await next(__spreadProps(__spreadValues({}, args), {
        request: await signer.sign(args.request, {
          signingDate: getSkewCorrectedDate_1.getSkewCorrectedDate(options.systemClockOffset),
          signingRegion: context["signing_region"],
          signingService: context["signing_service"]
        })
      })).catch((error) => {
        var _a;
        const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(exports2.awsAuthMiddleware(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return __spreadProps(__spreadValues({}, input), {
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      });
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UA_ESCAPE_REGEX = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = "user-agent";
    exports2.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports2.SPACE = " ";
    exports2.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(exports2.userAgentMiddleware(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations3(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-ses/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-ses",
      description: "AWS SDK for JavaScript Ses Client for Node.js, Browser and React Native",
      version: "3.54.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.54.0",
        "@aws-sdk/config-resolver": "3.54.0",
        "@aws-sdk/credential-provider-node": "3.54.0",
        "@aws-sdk/fetch-http-handler": "3.54.0",
        "@aws-sdk/hash-node": "3.54.0",
        "@aws-sdk/invalid-dependency": "3.54.0",
        "@aws-sdk/middleware-content-length": "3.54.0",
        "@aws-sdk/middleware-host-header": "3.54.0",
        "@aws-sdk/middleware-logger": "3.54.0",
        "@aws-sdk/middleware-retry": "3.54.0",
        "@aws-sdk/middleware-serde": "3.54.0",
        "@aws-sdk/middleware-signing": "3.54.0",
        "@aws-sdk/middleware-stack": "3.54.0",
        "@aws-sdk/middleware-user-agent": "3.54.0",
        "@aws-sdk/node-config-provider": "3.54.0",
        "@aws-sdk/node-http-handler": "3.54.0",
        "@aws-sdk/protocol-http": "3.54.0",
        "@aws-sdk/smithy-client": "3.54.0",
        "@aws-sdk/types": "3.54.0",
        "@aws-sdk/url-parser": "3.54.0",
        "@aws-sdk/util-base64-browser": "3.52.0",
        "@aws-sdk/util-base64-node": "3.52.0",
        "@aws-sdk/util-body-length-browser": "3.54.0",
        "@aws-sdk/util-body-length-node": "3.54.0",
        "@aws-sdk/util-defaults-mode-browser": "3.54.0",
        "@aws-sdk/util-defaults-mode-node": "3.54.0",
        "@aws-sdk/util-user-agent-browser": "3.54.0",
        "@aws-sdk/util-user-agent-node": "3.54.0",
        "@aws-sdk/util-utf8-browser": "3.52.0",
        "@aws-sdk/util-utf8-node": "3.52.0",
        "@aws-sdk/util-waiter": "3.54.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.0"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.52.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.3.5"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ses",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ses"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenResponse = exports2.GetSessionTokenRequest = exports2.GetFederationTokenResponse = exports2.FederatedUser = exports2.GetFederationTokenRequest = exports2.GetCallerIdentityResponse = exports2.GetCallerIdentityRequest = exports2.GetAccessKeyInfoResponse = exports2.GetAccessKeyInfoRequest = exports2.InvalidAuthorizationMessageException = exports2.DecodeAuthorizationMessageResponse = exports2.DecodeAuthorizationMessageRequest = exports2.IDPCommunicationErrorException = exports2.AssumeRoleWithWebIdentityResponse = exports2.AssumeRoleWithWebIdentityRequest = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.AssumeRoleWithSAMLResponse = exports2.AssumeRoleWithSAMLRequest = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = exports2.AssumeRoleResponse = exports2.Credentials = exports2.AssumeRoleRequest = exports2.Tag = exports2.PolicyDescriptorType = exports2.AssumedRoleUser = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var AssumedRoleUser;
    (function(AssumedRoleUser2) {
      AssumedRoleUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumedRoleUser = exports2.AssumedRoleUser || (exports2.AssumedRoleUser = {}));
    var PolicyDescriptorType;
    (function(PolicyDescriptorType2) {
      PolicyDescriptorType2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PolicyDescriptorType = exports2.PolicyDescriptorType || (exports2.PolicyDescriptorType = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Tag = exports2.Tag || (exports2.Tag = {}));
    var AssumeRoleRequest;
    (function(AssumeRoleRequest2) {
      AssumeRoleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleRequest = exports2.AssumeRoleRequest || (exports2.AssumeRoleRequest = {}));
    var Credentials;
    (function(Credentials2) {
      Credentials2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Credentials = exports2.Credentials || (exports2.Credentials = {}));
    var AssumeRoleResponse;
    (function(AssumeRoleResponse2) {
      AssumeRoleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleResponse = exports2.AssumeRoleResponse || (exports2.AssumeRoleResponse = {}));
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExpiredTokenException",
          $fault: "client"
        }, opts));
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MalformedPolicyDocumentException",
          $fault: "client"
        }, opts));
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PackedPolicyTooLargeException",
          $fault: "client"
        }, opts));
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RegionDisabledException",
          $fault: "client"
        }, opts));
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var AssumeRoleWithSAMLRequest;
    (function(AssumeRoleWithSAMLRequest2) {
      AssumeRoleWithSAMLRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLRequest = exports2.AssumeRoleWithSAMLRequest || (exports2.AssumeRoleWithSAMLRequest = {}));
    var AssumeRoleWithSAMLResponse;
    (function(AssumeRoleWithSAMLResponse2) {
      AssumeRoleWithSAMLResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLResponse = exports2.AssumeRoleWithSAMLResponse || (exports2.AssumeRoleWithSAMLResponse = {}));
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPRejectedClaimException",
          $fault: "client"
        }, opts));
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidIdentityTokenException",
          $fault: "client"
        }, opts));
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var AssumeRoleWithWebIdentityRequest;
    (function(AssumeRoleWithWebIdentityRequest2) {
      AssumeRoleWithWebIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityRequest = exports2.AssumeRoleWithWebIdentityRequest || (exports2.AssumeRoleWithWebIdentityRequest = {}));
    var AssumeRoleWithWebIdentityResponse;
    (function(AssumeRoleWithWebIdentityResponse2) {
      AssumeRoleWithWebIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityResponse = exports2.AssumeRoleWithWebIdentityResponse || (exports2.AssumeRoleWithWebIdentityResponse = {}));
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPCommunicationErrorException",
          $fault: "client"
        }, opts));
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var DecodeAuthorizationMessageRequest;
    (function(DecodeAuthorizationMessageRequest2) {
      DecodeAuthorizationMessageRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageRequest = exports2.DecodeAuthorizationMessageRequest || (exports2.DecodeAuthorizationMessageRequest = {}));
    var DecodeAuthorizationMessageResponse;
    (function(DecodeAuthorizationMessageResponse2) {
      DecodeAuthorizationMessageResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageResponse = exports2.DecodeAuthorizationMessageResponse || (exports2.DecodeAuthorizationMessageResponse = {}));
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidAuthorizationMessageException",
          $fault: "client"
        }, opts));
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var GetAccessKeyInfoRequest;
    (function(GetAccessKeyInfoRequest2) {
      GetAccessKeyInfoRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoRequest = exports2.GetAccessKeyInfoRequest || (exports2.GetAccessKeyInfoRequest = {}));
    var GetAccessKeyInfoResponse;
    (function(GetAccessKeyInfoResponse2) {
      GetAccessKeyInfoResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoResponse = exports2.GetAccessKeyInfoResponse || (exports2.GetAccessKeyInfoResponse = {}));
    var GetCallerIdentityRequest;
    (function(GetCallerIdentityRequest2) {
      GetCallerIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityRequest = exports2.GetCallerIdentityRequest || (exports2.GetCallerIdentityRequest = {}));
    var GetCallerIdentityResponse;
    (function(GetCallerIdentityResponse2) {
      GetCallerIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityResponse = exports2.GetCallerIdentityResponse || (exports2.GetCallerIdentityResponse = {}));
    var GetFederationTokenRequest;
    (function(GetFederationTokenRequest2) {
      GetFederationTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenRequest = exports2.GetFederationTokenRequest || (exports2.GetFederationTokenRequest = {}));
    var FederatedUser;
    (function(FederatedUser2) {
      FederatedUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FederatedUser = exports2.FederatedUser || (exports2.FederatedUser = {}));
    var GetFederationTokenResponse;
    (function(GetFederationTokenResponse2) {
      GetFederationTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenResponse = exports2.GetFederationTokenResponse || (exports2.GetFederationTokenResponse = {}));
    var GetSessionTokenRequest;
    (function(GetSessionTokenRequest2) {
      GetSessionTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenRequest = exports2.GetSessionTokenRequest || (exports2.GetSessionTokenRequest = {}));
    var GetSessionTokenResponse;
    (function(GetSessionTokenResponse2) {
      GetSessionTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenResponse = exports2.GetSessionTokenResponse || (exports2.GetSessionTokenResponse = {}));
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_queryGetSessionTokenCommand = exports2.deserializeAws_queryGetFederationTokenCommand = exports2.deserializeAws_queryGetCallerIdentityCommand = exports2.deserializeAws_queryGetAccessKeyInfoCommand = exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = exports2.deserializeAws_queryAssumeRoleCommand = exports2.serializeAws_queryGetSessionTokenCommand = exports2.serializeAws_queryGetFederationTokenCommand = exports2.serializeAws_queryGetCallerIdentityCommand = exports2.serializeAws_queryGetAccessKeyInfoCommand = exports2.serializeAws_queryDecodeAuthorizationMessageCommand = exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.serializeAws_queryAssumeRoleWithSAMLCommand = exports2.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleRequest(input, context)), {
        Action: "AssumeRole",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithSAMLRequest(input, context)), {
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context)), {
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDecodeAuthorizationMessageRequest(input, context)), {
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetAccessKeyInfoRequest(input, context)), {
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetCallerIdentityRequest(input, context)), {
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetFederationTokenRequest(input, context)), {
        Action: "GetFederationToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetSessionTokenRequest(input, context)), {
        Action: "GetSessionToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationErrorException":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return smithy_client_1.decorateServiceException(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys !== void 0 && input.TransitiveTagKeys !== null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId !== void 0 && input.ExternalId !== null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity !== void 0 && input.SourceIdentity !== null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn !== void 0 && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion !== void 0 && input.SAMLAssertion !== null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken !== void 0 && input.WebIdentityToken !== null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId !== void 0 && input.ProviderId !== null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage !== void 0 && input.EncodedMessage !== null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId !== void 0 && input.AccessKeyId !== null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn !== void 0 && input.arn !== null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries["Key"] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = smithy_client_1.expectString(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = smithy_client_1.expectString(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = smithy_client_1.expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = smithy_client_1.expectString(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = smithy_client_1.expectString(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = smithy_client_1.expectString(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = smithy_client_1.expectString(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = smithy_client_1.expectString(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = smithy_client_1.expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = smithy_client_1.expectString(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = smithy_client_1.expectString(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = smithy_client_1.expectString(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = smithy_client_1.expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = smithy_client_1.expectString(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = smithy_client_1.expectString(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = smithy_client_1.expectString(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = smithy_client_1.expectString(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = smithy_client_1.expectString(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = smithy_client_1.expectString(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = smithy_client_1.expectString(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = smithy_client_1.expectString(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = smithy_client_1.expectString(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = smithy_client_1.expectString(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = smithy_client_1.expectString(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = fast_xml_parser_1.parse(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : entities_1.decodeHTML(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return smithy_client_1.getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => smithy_client_1.extendedEncodeURIComponent(key) + "=" + smithy_client_1.extendedEncodeURIComponent(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryAssumeRoleCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryAssumeRoleCommand(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetCallerIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetCallerIdentityCommand(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetFederationTokenCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetFederationTokenCommand(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs17();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_query_1.serializeAws_queryGetSessionTokenCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_query_1.deserializeAws_queryGetSessionTokenCommand(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs17();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => middleware_signing_1.resolveAwsAuthConfig(__spreadProps(__spreadValues({}, input), {
      stsClientCtor
    }));
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.54.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.54.0",
        "@aws-sdk/credential-provider-node": "3.54.0",
        "@aws-sdk/fetch-http-handler": "3.54.0",
        "@aws-sdk/hash-node": "3.54.0",
        "@aws-sdk/invalid-dependency": "3.54.0",
        "@aws-sdk/middleware-content-length": "3.54.0",
        "@aws-sdk/middleware-host-header": "3.54.0",
        "@aws-sdk/middleware-logger": "3.54.0",
        "@aws-sdk/middleware-retry": "3.54.0",
        "@aws-sdk/middleware-sdk-sts": "3.54.0",
        "@aws-sdk/middleware-serde": "3.54.0",
        "@aws-sdk/middleware-signing": "3.54.0",
        "@aws-sdk/middleware-stack": "3.54.0",
        "@aws-sdk/middleware-user-agent": "3.54.0",
        "@aws-sdk/node-config-provider": "3.54.0",
        "@aws-sdk/node-http-handler": "3.54.0",
        "@aws-sdk/protocol-http": "3.54.0",
        "@aws-sdk/smithy-client": "3.54.0",
        "@aws-sdk/types": "3.54.0",
        "@aws-sdk/url-parser": "3.54.0",
        "@aws-sdk/util-base64-browser": "3.52.0",
        "@aws-sdk/util-base64-node": "3.52.0",
        "@aws-sdk/util-body-length-browser": "3.54.0",
        "@aws-sdk/util-body-length-node": "3.54.0",
        "@aws-sdk/util-defaults-mode-browser": "3.54.0",
        "@aws-sdk/util-defaults-mode-node": "3.54.0",
        "@aws-sdk/util-user-agent-browser": "3.54.0",
        "@aws-sdk/util-user-agent-node": "3.54.0",
        "@aws-sdk/util-utf8-browser": "3.52.0",
        "@aws-sdk/util-utf8-node": "3.52.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.0"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.52.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.3.5"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: exports2.getDefaultRoleAssumer(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: exports2.getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor)
    }, input));
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs12();
    exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return __spreadValues(__spreadValues({
          accessKeyId,
          secretAccessKey
        }, sessionToken && { sessionToken }), expiry && { expiration: new Date(expiry) });
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

// node_modules/@aws-sdk/util-credentials/dist-cjs/get-master-profile-name.js
var require_get_master_profile_name = __commonJS({
  "node_modules/@aws-sdk/util-credentials/dist-cjs/get-master-profile-name.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getMasterProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = "AWS_PROFILE";
    exports2.DEFAULT_PROFILE = "default";
    var getMasterProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getMasterProfileName = getMasterProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return os_1.homedir();
    };
    exports2.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/normalizeConfigFile.js
var require_normalizeConfigFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/normalizeConfigFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeConfigFile = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var normalizeConfigFile = (data) => {
      const map = {};
      for (const key of Object.keys(data)) {
        let matches;
        if (key === "default") {
          map.default = data.default;
        } else if (matches = profileKeyRegex.exec(key)) {
          const [_1, _2, normalizedKey] = matches;
          if (normalizedKey) {
            map[normalizedKey] = data[key];
          }
        }
      }
      return map;
    };
    exports2.normalizeConfigFile = normalizeConfigFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0];
        const section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
        if (section) {
          currentSection = section[1];
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var fileStatusHash = {};
    var slurpFile = (path) => new Promise((resolve, reject) => {
      if (!fileStatusHash[path]) {
        fileStatusHash[path] = { isReading: true, contents: "", requestQueue: [] };
        fileStatusHash[path].requestQueue.push({ resolve, reject });
        readFile(path, "utf8").then((data) => {
          fileStatusHash[path].isReading = false;
          fileStatusHash[path].contents = data;
          const { requestQueue } = fileStatusHash[path];
          while (requestQueue.length) {
            const { resolve: resolve2 } = requestQueue.pop();
            resolve2(data);
          }
        }).catch((err) => {
          fileStatusHash[path].isReading = false;
          const { requestQueue } = fileStatusHash[path];
          while (requestQueue.length) {
            const { reject: reject2 } = requestQueue.pop();
            reject2(err);
          }
        });
      } else if (fileStatusHash[path].isReading) {
        fileStatusHash[path].requestQueue.push({ resolve, reject });
      } else {
        resolve(fileStatusHash[path].contents);
      }
    });
    exports2.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSharedConfigFiles = exports2.ENV_CONFIG_PATH = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var normalizeConfigFile_1 = require_normalizeConfigFile();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = process.env[exports2.ENV_CREDENTIALS_PATH] || path_1.join(getHomeDir_1.getHomeDir(), ".aws", "credentials"), configFilepath = process.env[exports2.ENV_CONFIG_PATH] || path_1.join(getHomeDir_1.getHomeDir(), ".aws", "config") } = init;
      const parsedFiles = await Promise.all([
        slurpFile_1.slurpFile(configFilepath).then(parseIni_1.parseIni).then(normalizeConfigFile_1.normalizeConfigFile).catch(swallowError),
        slurpFile_1.slurpFile(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
  }
});

// node_modules/@aws-sdk/util-credentials/dist-cjs/parse-known-profiles.js
var require_parse_known_profiles = __commonJS({
  "node_modules/@aws-sdk/util-credentials/dist-cjs/parse-known-profiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseKnownFiles = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs21();
    var parseKnownFiles = async (init) => {
      const { loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init) } = init;
      const parsedFiles = await loadedConfig;
      return __spreadValues(__spreadValues({}, parsedFiles.configFile), parsedFiles.credentialsFile);
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/util-credentials/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@aws-sdk/util-credentials/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_get_master_profile_name(), exports2);
    tslib_1.__exportStar(require_parse_known_profiles(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs12();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = http_1.request(__spreadProps(__spreadValues({
          method: "GET"
        }, options), {
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        }));
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs12();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = RemoteProviderInit_1.providerConfigFromInit(init);
      return () => retry_1.retry(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return ImdsCredentials_1.fromImdsCredentials(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = __spreadProps(__spreadValues({}, options.headers), {
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        });
      }
      const buffer = await httpRequest_1.httpRequest(__spreadProps(__spreadValues({}, options), {
        timeout
      }));
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = url_1.parse(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return __spreadProps(__spreadValues({}, parsed), {
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        });
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs12();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSharedConfigFiles = exports2.ENV_PROFILE = void 0;
    var property_provider_1 = require_dist_cjs12();
    var shared_ini_file_loader_1 = require_dist_cjs21();
    var DEFAULT_PROFILE = "default";
    exports2.ENV_PROFILE = "AWS_PROFILE";
    var fromSharedConfigFiles = (configSelector, _a = {}) => {
      var _b = _a, { preferredFile = "config" } = _b, init = __objRest(_b, ["preferredFile"]);
      return async () => {
        const { loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init), profile = process.env[exports2.ENV_PROFILE] || DEFAULT_PROFILE } = init;
        const { configFile, credentialsFile } = await loadedConfig;
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? __spreadValues(__spreadValues({}, profileFromCredentials), profileFromConfig) : __spreadValues(__spreadValues({}, profileFromConfig), profileFromCredentials);
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
      };
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs12();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : property_provider_1.fromStatic(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs12();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => property_provider_1.memoize(property_provider_1.chain(fromEnv_1.fromEnv(environmentVariableSelector), fromSharedConfigFiles_1.fromSharedConfigFiles(configFileSelector, configuration), fromStatic_1.fromStatic(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs24();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = querystring_parser_1.parseQueryString(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports2.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports2.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs23();
    var url_parser_1 = require_dist_cjs25();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => url_parser_1.parseUrl(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => node_config_provider_1.loadConfig(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await node_config_provider_1.loadConfig(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 15 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return __spreadProps(__spreadValues(__spreadValues({}, credentials), originalExpiration ? { originalExpiration } : {}), {
        expiration: newExpiration
      });
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs12();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => staticStabilityProvider_1.staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = RemoteProviderInit_1.providerConfigFromInit(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await retry_1.retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry_1.retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
        } else {
          let token;
          try {
            token = (await getMetadataToken(__spreadProps(__spreadValues({}, endpoint), { timeout }))).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
          }
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), {
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          }));
        }
      };
    };
    var getMetadataToken = async (options) => httpRequest_1.httpRequest(__spreadProps(__spreadValues({}, options), {
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }));
    var getProfile = async (options) => (await httpRequest_1.httpRequest(__spreadProps(__spreadValues({}, options), { path: IMDS_PATH }))).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await httpRequest_1.httpRequest(__spreadProps(__spreadValues({}, options), {
        path: IMDS_PATH + profile
      }))).toString());
      if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return ImdsCredentials_1.fromImdsCredentials(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs20();
    var credential_provider_imds_1 = require_dist_cjs26();
    var property_provider_1 = require_dist_cjs12();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs12();
    var util_credentials_1 = require_dist_cjs22();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${util_credentials_1.getMasterProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? resolveProfileData_1.resolveProfileData(source_profile, profiles, options, __spreadProps(__spreadValues({}, visitedProfiles), {
        [source_profile]: true
      })) : resolveCredentialSource_1.resolveCredentialSource(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports2.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutRequest = exports2.ListAccountsResponse = exports2.ListAccountsRequest = exports2.ListAccountRolesResponse = exports2.RoleInfo = exports2.ListAccountRolesRequest = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = exports2.GetRoleCredentialsResponse = exports2.RoleCredentials = exports2.GetRoleCredentialsRequest = exports2.AccountInfo = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var AccountInfo;
    (function(AccountInfo2) {
      AccountInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AccountInfo = exports2.AccountInfo || (exports2.AccountInfo = {}));
    var GetRoleCredentialsRequest;
    (function(GetRoleCredentialsRequest2) {
      GetRoleCredentialsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(GetRoleCredentialsRequest = exports2.GetRoleCredentialsRequest || (exports2.GetRoleCredentialsRequest = {}));
    var RoleCredentials;
    (function(RoleCredentials2) {
      RoleCredentials2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }), obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING });
    })(RoleCredentials = exports2.RoleCredentials || (exports2.RoleCredentials = {}));
    var GetRoleCredentialsResponse;
    (function(GetRoleCredentialsResponse2) {
      GetRoleCredentialsResponse2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.roleCredentials && { roleCredentials: RoleCredentials.filterSensitiveLog(obj.roleCredentials) });
    })(GetRoleCredentialsResponse = exports2.GetRoleCredentialsResponse || (exports2.GetRoleCredentialsResponse = {}));
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRequestException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TooManyRequestsException",
          $fault: "client"
        }, opts));
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnauthorizedException",
          $fault: "client"
        }, opts));
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var ListAccountRolesRequest;
    (function(ListAccountRolesRequest2) {
      ListAccountRolesRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountRolesRequest = exports2.ListAccountRolesRequest || (exports2.ListAccountRolesRequest = {}));
    var RoleInfo;
    (function(RoleInfo2) {
      RoleInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RoleInfo = exports2.RoleInfo || (exports2.RoleInfo = {}));
    var ListAccountRolesResponse;
    (function(ListAccountRolesResponse2) {
      ListAccountRolesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountRolesResponse = exports2.ListAccountRolesResponse || (exports2.ListAccountRolesResponse = {}));
    var ListAccountsRequest;
    (function(ListAccountsRequest2) {
      ListAccountsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountsRequest = exports2.ListAccountsRequest || (exports2.ListAccountsRequest = {}));
    var ListAccountsResponse;
    (function(ListAccountsResponse2) {
      ListAccountsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountsResponse = exports2.ListAccountsResponse || (exports2.ListAccountsResponse = {}));
    var LogoutRequest;
    (function(LogoutRequest2) {
      LogoutRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(LogoutRequest = exports2.LogoutRequest || (exports2.LogoutRequest = {}));
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_restJson1LogoutCommand = exports2.deserializeAws_restJson1ListAccountsCommand = exports2.deserializeAws_restJson1ListAccountRolesCommand = exports2.deserializeAws_restJson1GetRoleCredentialsCommand = exports2.serializeAws_restJson1LogoutCommand = exports2.serializeAws_restJson1ListAccountsCommand = exports2.serializeAws_restJson1ListAccountRolesCommand = exports2.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = __spreadValues(__spreadValues({}, input.roleName !== void 0 && { role_name: input.roleName }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = __spreadValues(__spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = __spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        roleCredentials: void 0
      };
      const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), "body");
      if (data.roleCredentials !== void 0 && data.roleCredentials !== null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return Promise.resolve(contents);
    };
    exports2.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        nextToken: void 0,
        roleList: void 0
      };
      const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), "body");
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = smithy_client_1.expectString(data.nextToken);
      }
      if (data.roleList !== void 0 && data.roleList !== null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return Promise.resolve(contents);
    };
    exports2.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        accountList: void 0,
        nextToken: void 0
      };
      const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), "body");
      if (data.accountList !== void 0 && data.accountList !== null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = smithy_client_1.expectString(data.nextToken);
      }
      return Promise.resolve(contents);
    };
    exports2.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody);
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output)
      };
      await collectBody(output.body, context);
      return Promise.resolve(contents);
    };
    exports2.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw smithy_client_1.decorateServiceException(response, parsedBody);
      }
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = smithy_client_1.expectString(data.message);
      }
      const exception = new models_0_1.InvalidRequestException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return smithy_client_1.decorateServiceException(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = smithy_client_1.expectString(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return smithy_client_1.decorateServiceException(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = smithy_client_1.expectString(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return smithy_client_1.decorateServiceException(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = smithy_client_1.expectString(data.message);
      }
      const exception = new models_0_1.UnauthorizedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return smithy_client_1.decorateServiceException(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: smithy_client_1.expectString(output.accountId),
        accountName: smithy_client_1.expectString(output.accountName),
        emailAddress: smithy_client_1.expectString(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: smithy_client_1.expectString(output.accessKeyId),
        expiration: smithy_client_1.expectLong(output.expiration),
        secretAccessKey: smithy_client_1.expectString(output.secretAccessKey),
        sessionToken: smithy_client_1.expectString(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: smithy_client_1.expectString(output.accountId),
        roleName: smithy_client_1.expectString(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return Aws_restJson1_1.serializeAws_restJson1LogoutCommand(input, context);
      }
      deserialize(output, context) {
        return Aws_restJson1_1.deserializeAws_restJson1LogoutCommand(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.54.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.54.0",
        "@aws-sdk/fetch-http-handler": "3.54.0",
        "@aws-sdk/hash-node": "3.54.0",
        "@aws-sdk/invalid-dependency": "3.54.0",
        "@aws-sdk/middleware-content-length": "3.54.0",
        "@aws-sdk/middleware-host-header": "3.54.0",
        "@aws-sdk/middleware-logger": "3.54.0",
        "@aws-sdk/middleware-retry": "3.54.0",
        "@aws-sdk/middleware-serde": "3.54.0",
        "@aws-sdk/middleware-stack": "3.54.0",
        "@aws-sdk/middleware-user-agent": "3.54.0",
        "@aws-sdk/node-config-provider": "3.54.0",
        "@aws-sdk/node-http-handler": "3.54.0",
        "@aws-sdk/protocol-http": "3.54.0",
        "@aws-sdk/smithy-client": "3.54.0",
        "@aws-sdk/types": "3.54.0",
        "@aws-sdk/url-parser": "3.54.0",
        "@aws-sdk/util-base64-browser": "3.52.0",
        "@aws-sdk/util-base64-node": "3.52.0",
        "@aws-sdk/util-body-length-browser": "3.54.0",
        "@aws-sdk/util-body-length-node": "3.54.0",
        "@aws-sdk/util-defaults-mode-browser": "3.54.0",
        "@aws-sdk/util-defaults-mode-node": "3.54.0",
        "@aws-sdk/util-user-agent-browser": "3.54.0",
        "@aws-sdk/util-user-agent-node": "3.54.0",
        "@aws-sdk/util-utf8-browser": "3.52.0",
        "@aws-sdk/util-utf8-node": "3.52.0",
        tslib: "^2.3.0"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.52.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.3.5"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs15();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!is_array_buffer_1.isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs27();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? crypto_1.createHmac(algorithmIdentifier, castSourceData(secret)) : crypto_1.createHash(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return util_buffer_from_1.fromString(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return util_buffer_from_1.fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return util_buffer_from_1.fromArrayBuffer(toCast);
    }
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = util_uri_escape_1.escapeUri(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${util_uri_escape_1.escapeUri(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${util_uri_escape_1.escapeUri(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs29();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        if (typeof options === "function") {
          this.configProvider = async () => {
            return this.resolveDefaultConfig(await options());
          };
        } else {
          this.config = this.resolveDefaultConfig(options);
        }
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config && this.configProvider) {
          this.config = await this.configProvider();
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = querystring_builder_1.buildQueryString(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: get_transformed_headers_1.getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          set_connection_timeout_1.setConnectionTimeout(req, reject, this.config.connectionTimeout);
          set_socket_timeout_1.setSocketTimeout(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          write_request_body_1.writeRequestBody(req, request);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs29();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor({ requestTimeout, sessionTimeout, disableConcurrentStreams } = {}) {
        this.metadata = { handlerProtocol: "h2" };
        this.requestTimeout = requestTimeout;
        this.sessionTimeout = sessionTimeout;
        this.disableConcurrentStreams = disableConcurrentStreams;
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      handle(request, { abortSignal } = {}) {
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, this.disableConcurrentStreams || false);
          const reject = (err) => {
            if (this.disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = querystring_builder_1.buildQueryString(query || {});
          const req = session.request(__spreadProps(__spreadValues({}, request.headers), {
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          }));
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: get_transformed_headers_1.getTransformedHeaders(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (this.disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          const requestTimeout = this.requestTimeout;
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            if (this.disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          write_request_body_1.writeRequestBody(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = http2_1.connect(authority);
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        const sessionTimeout = this.sessionTimeout;
        if (sessionTimeout) {
          newSession.setTimeout(sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

// node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs27();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = util_buffer_from_1.fromString(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports2.fromBase64 = fromBase64;
    function toBase64(input) {
      return util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    }
    exports2.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return fs_1.lstatSync(body.path).size;
      } else if (typeof body.fd === "number") {
        return fs_1.fstatSync(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs23();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports2.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${os_1.platform()}`, os_1.release()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = is_crt_available_1.isCrtAvailable();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = node_config_provider_1.loadConfig({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs27();
    var fromUtf8 = (input) => {
      const buf = util_buffer_from_1.fromString(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var regionHash = {
      "ap-northeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-1"
      },
      "ap-northeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-2"
      },
      "ap-south-1": {
        variants: [
          {
            hostname: "portal.sso.ap-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-south-1"
      },
      "ap-southeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-1"
      },
      "ap-southeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-2"
      },
      "ca-central-1": {
        variants: [
          {
            hostname: "portal.sso.ca-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ca-central-1"
      },
      "eu-central-1": {
        variants: [
          {
            hostname: "portal.sso.eu-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-central-1"
      },
      "eu-north-1": {
        variants: [
          {
            hostname: "portal.sso.eu-north-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-north-1"
      },
      "eu-west-1": {
        variants: [
          {
            hostname: "portal.sso.eu-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-1"
      },
      "eu-west-2": {
        variants: [
          {
            hostname: "portal.sso.eu-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-2"
      },
      "eu-west-3": {
        variants: [
          {
            hostname: "portal.sso.eu-west-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-3"
      },
      "sa-east-1": {
        variants: [
          {
            hostname: "portal.sso.sa-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "sa-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-2": {
        variants: [
          {
            hostname: "portal.sso.us-east-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-2"
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-east-1"
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-west-1"
      },
      "us-west-2": {
        variants: [
          {
            hostname: "portal.sso.us-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-west-2"
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, __spreadProps(__spreadValues({}, options), {
      signingService: "awsssoportal",
      regionHash,
      partitionHash
    }));
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs25();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2019-06-10",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SSO",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports2.AWS_REGION_ENV = "AWS_REGION";
    exports2.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports2.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports2.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var credential_provider_imds_1 = require_dist_cjs26();
    var node_config_provider_1 = require_dist_cjs23();
    var property_provider_1 = require_dist_cjs12();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = node_config_provider_1.loadConfig(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => property_provider_1.memoize(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await credential_provider_imds_1.getInstanceMetadataEndpoint();
          return (await credential_provider_imds_1.httpRequest(__spreadProps(__spreadValues({}, endpoint), { path: constants_1.IMDS_REGION_PATH }))).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs6();
    var hash_node_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs11();
    var node_config_provider_1 = require_dist_cjs23();
    var node_http_handler_1 = require_dist_cjs30();
    var util_base64_node_1 = require_dist_cjs31();
    var util_body_length_node_1 = require_dist_cjs32();
    var util_user_agent_node_1 = require_dist_cjs33();
    var util_utf8_node_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      const defaultsMode = util_defaults_mode_node_1.resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : node_config_provider_1.loadConfig(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8
      });
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var middleware_content_length_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs8();
    var middleware_logger_1 = require_dist_cjs9();
    var middleware_retry_1 = require_dist_cjs11();
    var middleware_user_agent_1 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);
        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);
        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);
        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);
        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);
        const _config_5 = middleware_user_agent_1.resolveUserAgentConfig(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));
        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));
        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_03(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        token = page.nextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        token = page.nextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs36();
    var property_provider_1 = require_dist_cjs12();
    var shared_ini_file_loader_1 = require_dist_cjs21();
    var crypto_1 = require("crypto");
    var fs_1 = require("fs");
    var path_1 = require("path");
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var { readFile } = fs_1.promises;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      const hasher = crypto_1.createHash("sha1");
      const cacheName = hasher.update(ssoStartUrl).digest("hex");
      const tokenFile = path_1.join(shared_ini_file_loader_1.getHomeDir(), ".aws", "sso", "cache", `${cacheName}.json`);
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = JSON.parse(await readFile(tokenFile, "utf8"));
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs12();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs12();
    var util_credentials_1 = require_dist_cjs22();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await util_credentials_1.parseKnownFiles(init);
        const profileName = util_credentials_1.getMasterProfileName(init);
        const profile = profiles[profileName];
        if (!isSsoProfile_1.isSsoProfile(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = validateSsoProfile_1.validateSsoProfile(profile);
        return resolveSSOCredentials_1.resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return resolveSSOCredentials_1.resolveSSOCredentials({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs37();
    var credential_provider_sso_2 = require_dist_cjs37();
    Object.defineProperty(exports2, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = credential_provider_sso_1.validateSsoProfile(data);
      return credential_provider_sso_1.fromSSO({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs12();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs12();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports2.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return fromWebToken_1.fromWebToken(__spreadProps(__spreadValues({}, init), {
        webIdentityToken: fs_1.readFileSync(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      }))();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs38();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => credential_provider_web_identity_1.fromTokenFile({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs12();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && resolveStaticCredentials_1.isStaticCredsProfile(data)) {
        return resolveStaticCredentials_1.resolveStaticCredentials(data);
      }
      if (resolveAssumeRoleCredentials_1.isAssumeRoleProfile(data)) {
        return resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (resolveStaticCredentials_1.isStaticCredsProfile(data)) {
        return resolveStaticCredentials_1.resolveStaticCredentials(data);
      }
      if (resolveWebIdentityCredentials_1.isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials_1.resolveWebIdentityCredentials(data, options);
      }
      if (resolveSsoCredentials_1.isSsoProfile(data)) {
        return resolveSsoCredentials_1.resolveSsoCredentials(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromIni = void 0;
    var util_credentials_1 = require_dist_cjs22();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await util_credentials_1.parseKnownFiles(init);
      return resolveProfileData_1.resolveProfileData(util_credentials_1.getMasterProfileName(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return __spreadValues(__spreadValues({
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey
      }, data.SessionToken && { sessionToken: data.SessionToken }), data.Expiration && { expiration: new Date(data.Expiration) });
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs12();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = util_1.promisify(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials_1.getValidatedProcessCredentials(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProcess = void 0;
    var util_credentials_1 = require_dist_cjs22();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await util_credentials_1.parseKnownFiles(init);
      return resolveProcessCredentials_1.resolveProcessCredentials(util_credentials_1.getMasterProfileName(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs26();
    var property_provider_1 = require_dist_cjs12();
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return credential_provider_imds_1.fromContainerMetadata(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return credential_provider_imds_1.fromInstanceMetadata(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs20();
    var credential_provider_ini_1 = require_dist_cjs39();
    var credential_provider_process_1 = require_dist_cjs40();
    var credential_provider_sso_1 = require_dist_cjs37();
    var credential_provider_web_identity_1 = require_dist_cjs38();
    var property_provider_1 = require_dist_cjs12();
    var shared_ini_file_loader_1 = require_dist_cjs21();
    var util_credentials_1 = require_dist_cjs22();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => {
      const options = __spreadValues(__spreadValues({
        profile: process.env[util_credentials_1.ENV_PROFILE]
      }, init), !init.loadedConfig && { loadedConfig: shared_ini_file_loader_1.loadSharedConfigFiles(init) });
      const providerChain = property_provider_1.chain(...options.profile ? [] : [credential_provider_env_1.fromEnv()], credential_provider_sso_1.fromSSO(options), credential_provider_ini_1.fromIni(options), credential_provider_process_1.fromProcess(options), credential_provider_web_identity_1.fromTokenFile(options), remoteProvider_1.remoteProvider(options), async () => {
        throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
      });
      return property_provider_1.memoize(providerChain, (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    };
    exports2.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var regionHash = {
      "aws-global": {
        variants: [
          {
            hostname: "sts.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "sts-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "sts-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "sts.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "sts.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "sts-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "sts-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "aws-global",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, __spreadProps(__spreadValues({}, options), {
      signingService: "sts",
      regionHash,
      partitionHash
    }));
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs25();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2011-06-15",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "STS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs6();
    var credential_provider_node_1 = require_dist_cjs41();
    var hash_node_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs11();
    var node_config_provider_1 = require_dist_cjs23();
    var node_http_handler_1 = require_dist_cjs30();
    var util_base64_node_1 = require_dist_cjs31();
    var util_body_length_node_1 = require_dist_cjs32();
    var util_user_agent_node_1 = require_dist_cjs33();
    var util_utf8_node_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      const defaultsMode = util_defaults_mode_node_1.resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : defaultStsRoleAssumers_1.decorateDefaultCredentialProvider(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : node_config_provider_1.loadConfig(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      });
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var middleware_content_length_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs8();
    var middleware_logger_1 = require_dist_cjs9();
    var middleware_retry_1 = require_dist_cjs11();
    var middleware_sdk_sts_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);
        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);
        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);
        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);
        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);
        const _config_5 = middleware_sdk_sts_1.resolveStsAuthConfig(_config_4, { stsClientCtor: STSClient });
        const _config_6 = middleware_user_agent_1.resolveUserAgentConfig(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));
        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));
        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) => defaultStsRoleAssumers_1.getDefaultRoleAssumer(stsOptions, STSClient_1.STSClient);
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity(stsOptions, STSClient_1.STSClient);
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: exports2.getDefaultRoleAssumer(input),
      roleAssumerWithWebIdentity: exports2.getDefaultRoleAssumerWithWebIdentity(input)
    }, input));
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/endpoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var regionHash = {
      "us-gov-west-1": {
        variants: [
          {
            hostname: "email-fips.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "email.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "email-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "email-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "email.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "email.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "email-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "email-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "email.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "email.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "email-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "email.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "email-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["fips-us-gov-west-1", "us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "email.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "email-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "email-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "email.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, __spreadProps(__spreadValues({}, options), {
      signingService: "ses",
      regionHash,
      partitionHash
    }));
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs25();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2010-12-01",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SES",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs6();
    var credential_provider_node_1 = require_dist_cjs41();
    var hash_node_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs11();
    var node_config_provider_1 = require_dist_cjs23();
    var node_http_handler_1 = require_dist_cjs30();
    var util_base64_node_1 = require_dist_cjs31();
    var util_body_length_node_1 = require_dist_cjs32();
    var util_user_agent_node_1 = require_dist_cjs33();
    var util_utf8_node_1 = require_dist_cjs34();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      const defaultsMode = util_defaults_mode_node_1.resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : client_sts_1.decorateDefaultCredentialProvider(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : node_config_provider_1.loadConfig(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      });
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/SESClient.js
var require_SESClient = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/SESClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SESClient = void 0;
    var config_resolver_1 = require_dist_cjs6();
    var middleware_content_length_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs8();
    var middleware_logger_1 = require_dist_cjs9();
    var middleware_retry_1 = require_dist_cjs11();
    var middleware_signing_1 = require_dist_cjs17();
    var middleware_user_agent_1 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig3();
    var SESClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);
        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);
        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);
        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);
        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);
        const _config_5 = middleware_signing_1.resolveAwsAuthConfig(_config_4);
        const _config_6 = middleware_user_agent_1.resolveUserAgentConfig(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));
        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));
        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(this.config));
        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SESClient = SESClient2;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/SES.js
var require_SES = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/SES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SES = void 0;
    var CloneReceiptRuleSetCommand_1 = require_CloneReceiptRuleSetCommand();
    var CreateConfigurationSetCommand_1 = require_CreateConfigurationSetCommand();
    var CreateConfigurationSetEventDestinationCommand_1 = require_CreateConfigurationSetEventDestinationCommand();
    var CreateConfigurationSetTrackingOptionsCommand_1 = require_CreateConfigurationSetTrackingOptionsCommand();
    var CreateCustomVerificationEmailTemplateCommand_1 = require_CreateCustomVerificationEmailTemplateCommand();
    var CreateReceiptFilterCommand_1 = require_CreateReceiptFilterCommand();
    var CreateReceiptRuleCommand_1 = require_CreateReceiptRuleCommand();
    var CreateReceiptRuleSetCommand_1 = require_CreateReceiptRuleSetCommand();
    var CreateTemplateCommand_1 = require_CreateTemplateCommand();
    var DeleteConfigurationSetCommand_1 = require_DeleteConfigurationSetCommand();
    var DeleteConfigurationSetEventDestinationCommand_1 = require_DeleteConfigurationSetEventDestinationCommand();
    var DeleteConfigurationSetTrackingOptionsCommand_1 = require_DeleteConfigurationSetTrackingOptionsCommand();
    var DeleteCustomVerificationEmailTemplateCommand_1 = require_DeleteCustomVerificationEmailTemplateCommand();
    var DeleteIdentityCommand_1 = require_DeleteIdentityCommand();
    var DeleteIdentityPolicyCommand_1 = require_DeleteIdentityPolicyCommand();
    var DeleteReceiptFilterCommand_1 = require_DeleteReceiptFilterCommand();
    var DeleteReceiptRuleCommand_1 = require_DeleteReceiptRuleCommand();
    var DeleteReceiptRuleSetCommand_1 = require_DeleteReceiptRuleSetCommand();
    var DeleteTemplateCommand_1 = require_DeleteTemplateCommand();
    var DeleteVerifiedEmailAddressCommand_1 = require_DeleteVerifiedEmailAddressCommand();
    var DescribeActiveReceiptRuleSetCommand_1 = require_DescribeActiveReceiptRuleSetCommand();
    var DescribeConfigurationSetCommand_1 = require_DescribeConfigurationSetCommand();
    var DescribeReceiptRuleCommand_1 = require_DescribeReceiptRuleCommand();
    var DescribeReceiptRuleSetCommand_1 = require_DescribeReceiptRuleSetCommand();
    var GetAccountSendingEnabledCommand_1 = require_GetAccountSendingEnabledCommand();
    var GetCustomVerificationEmailTemplateCommand_1 = require_GetCustomVerificationEmailTemplateCommand();
    var GetIdentityDkimAttributesCommand_1 = require_GetIdentityDkimAttributesCommand();
    var GetIdentityMailFromDomainAttributesCommand_1 = require_GetIdentityMailFromDomainAttributesCommand();
    var GetIdentityNotificationAttributesCommand_1 = require_GetIdentityNotificationAttributesCommand();
    var GetIdentityPoliciesCommand_1 = require_GetIdentityPoliciesCommand();
    var GetIdentityVerificationAttributesCommand_1 = require_GetIdentityVerificationAttributesCommand();
    var GetSendQuotaCommand_1 = require_GetSendQuotaCommand();
    var GetSendStatisticsCommand_1 = require_GetSendStatisticsCommand();
    var GetTemplateCommand_1 = require_GetTemplateCommand();
    var ListConfigurationSetsCommand_1 = require_ListConfigurationSetsCommand();
    var ListCustomVerificationEmailTemplatesCommand_1 = require_ListCustomVerificationEmailTemplatesCommand();
    var ListIdentitiesCommand_1 = require_ListIdentitiesCommand();
    var ListIdentityPoliciesCommand_1 = require_ListIdentityPoliciesCommand();
    var ListReceiptFiltersCommand_1 = require_ListReceiptFiltersCommand();
    var ListReceiptRuleSetsCommand_1 = require_ListReceiptRuleSetsCommand();
    var ListTemplatesCommand_1 = require_ListTemplatesCommand();
    var ListVerifiedEmailAddressesCommand_1 = require_ListVerifiedEmailAddressesCommand();
    var PutConfigurationSetDeliveryOptionsCommand_1 = require_PutConfigurationSetDeliveryOptionsCommand();
    var PutIdentityPolicyCommand_1 = require_PutIdentityPolicyCommand();
    var ReorderReceiptRuleSetCommand_1 = require_ReorderReceiptRuleSetCommand();
    var SendBounceCommand_1 = require_SendBounceCommand();
    var SendBulkTemplatedEmailCommand_1 = require_SendBulkTemplatedEmailCommand();
    var SendCustomVerificationEmailCommand_1 = require_SendCustomVerificationEmailCommand();
    var SendEmailCommand_1 = require_SendEmailCommand();
    var SendRawEmailCommand_1 = require_SendRawEmailCommand();
    var SendTemplatedEmailCommand_1 = require_SendTemplatedEmailCommand();
    var SetActiveReceiptRuleSetCommand_1 = require_SetActiveReceiptRuleSetCommand();
    var SetIdentityDkimEnabledCommand_1 = require_SetIdentityDkimEnabledCommand();
    var SetIdentityFeedbackForwardingEnabledCommand_1 = require_SetIdentityFeedbackForwardingEnabledCommand();
    var SetIdentityHeadersInNotificationsEnabledCommand_1 = require_SetIdentityHeadersInNotificationsEnabledCommand();
    var SetIdentityMailFromDomainCommand_1 = require_SetIdentityMailFromDomainCommand();
    var SetIdentityNotificationTopicCommand_1 = require_SetIdentityNotificationTopicCommand();
    var SetReceiptRulePositionCommand_1 = require_SetReceiptRulePositionCommand();
    var TestRenderTemplateCommand_1 = require_TestRenderTemplateCommand();
    var UpdateAccountSendingEnabledCommand_1 = require_UpdateAccountSendingEnabledCommand();
    var UpdateConfigurationSetEventDestinationCommand_1 = require_UpdateConfigurationSetEventDestinationCommand();
    var UpdateConfigurationSetReputationMetricsEnabledCommand_1 = require_UpdateConfigurationSetReputationMetricsEnabledCommand();
    var UpdateConfigurationSetSendingEnabledCommand_1 = require_UpdateConfigurationSetSendingEnabledCommand();
    var UpdateConfigurationSetTrackingOptionsCommand_1 = require_UpdateConfigurationSetTrackingOptionsCommand();
    var UpdateCustomVerificationEmailTemplateCommand_1 = require_UpdateCustomVerificationEmailTemplateCommand();
    var UpdateReceiptRuleCommand_1 = require_UpdateReceiptRuleCommand();
    var UpdateTemplateCommand_1 = require_UpdateTemplateCommand();
    var VerifyDomainDkimCommand_1 = require_VerifyDomainDkimCommand();
    var VerifyDomainIdentityCommand_1 = require_VerifyDomainIdentityCommand();
    var VerifyEmailAddressCommand_1 = require_VerifyEmailAddressCommand();
    var VerifyEmailIdentityCommand_1 = require_VerifyEmailIdentityCommand();
    var SESClient_1 = require_SESClient();
    var SES = class extends SESClient_1.SESClient {
      cloneReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new CloneReceiptRuleSetCommand_1.CloneReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createConfigurationSet(args, optionsOrCb, cb) {
        const command = new CreateConfigurationSetCommand_1.CreateConfigurationSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createConfigurationSetEventDestination(args, optionsOrCb, cb) {
        const command = new CreateConfigurationSetEventDestinationCommand_1.CreateConfigurationSetEventDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createConfigurationSetTrackingOptions(args, optionsOrCb, cb) {
        const command = new CreateConfigurationSetTrackingOptionsCommand_1.CreateConfigurationSetTrackingOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createCustomVerificationEmailTemplate(args, optionsOrCb, cb) {
        const command = new CreateCustomVerificationEmailTemplateCommand_1.CreateCustomVerificationEmailTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createReceiptFilter(args, optionsOrCb, cb) {
        const command = new CreateReceiptFilterCommand_1.CreateReceiptFilterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createReceiptRule(args, optionsOrCb, cb) {
        const command = new CreateReceiptRuleCommand_1.CreateReceiptRuleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new CreateReceiptRuleSetCommand_1.CreateReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createTemplate(args, optionsOrCb, cb) {
        const command = new CreateTemplateCommand_1.CreateTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteConfigurationSet(args, optionsOrCb, cb) {
        const command = new DeleteConfigurationSetCommand_1.DeleteConfigurationSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteConfigurationSetEventDestination(args, optionsOrCb, cb) {
        const command = new DeleteConfigurationSetEventDestinationCommand_1.DeleteConfigurationSetEventDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteConfigurationSetTrackingOptions(args, optionsOrCb, cb) {
        const command = new DeleteConfigurationSetTrackingOptionsCommand_1.DeleteConfigurationSetTrackingOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteCustomVerificationEmailTemplate(args, optionsOrCb, cb) {
        const command = new DeleteCustomVerificationEmailTemplateCommand_1.DeleteCustomVerificationEmailTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteIdentity(args, optionsOrCb, cb) {
        const command = new DeleteIdentityCommand_1.DeleteIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteIdentityPolicy(args, optionsOrCb, cb) {
        const command = new DeleteIdentityPolicyCommand_1.DeleteIdentityPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteReceiptFilter(args, optionsOrCb, cb) {
        const command = new DeleteReceiptFilterCommand_1.DeleteReceiptFilterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteReceiptRule(args, optionsOrCb, cb) {
        const command = new DeleteReceiptRuleCommand_1.DeleteReceiptRuleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new DeleteReceiptRuleSetCommand_1.DeleteReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteTemplate(args, optionsOrCb, cb) {
        const command = new DeleteTemplateCommand_1.DeleteTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteVerifiedEmailAddress(args, optionsOrCb, cb) {
        const command = new DeleteVerifiedEmailAddressCommand_1.DeleteVerifiedEmailAddressCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeActiveReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new DescribeActiveReceiptRuleSetCommand_1.DescribeActiveReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeConfigurationSet(args, optionsOrCb, cb) {
        const command = new DescribeConfigurationSetCommand_1.DescribeConfigurationSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeReceiptRule(args, optionsOrCb, cb) {
        const command = new DescribeReceiptRuleCommand_1.DescribeReceiptRuleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new DescribeReceiptRuleSetCommand_1.DescribeReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountSendingEnabled(args, optionsOrCb, cb) {
        const command = new GetAccountSendingEnabledCommand_1.GetAccountSendingEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCustomVerificationEmailTemplate(args, optionsOrCb, cb) {
        const command = new GetCustomVerificationEmailTemplateCommand_1.GetCustomVerificationEmailTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getIdentityDkimAttributes(args, optionsOrCb, cb) {
        const command = new GetIdentityDkimAttributesCommand_1.GetIdentityDkimAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getIdentityMailFromDomainAttributes(args, optionsOrCb, cb) {
        const command = new GetIdentityMailFromDomainAttributesCommand_1.GetIdentityMailFromDomainAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getIdentityNotificationAttributes(args, optionsOrCb, cb) {
        const command = new GetIdentityNotificationAttributesCommand_1.GetIdentityNotificationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getIdentityPolicies(args, optionsOrCb, cb) {
        const command = new GetIdentityPoliciesCommand_1.GetIdentityPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getIdentityVerificationAttributes(args, optionsOrCb, cb) {
        const command = new GetIdentityVerificationAttributesCommand_1.GetIdentityVerificationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSendQuota(args, optionsOrCb, cb) {
        const command = new GetSendQuotaCommand_1.GetSendQuotaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSendStatistics(args, optionsOrCb, cb) {
        const command = new GetSendStatisticsCommand_1.GetSendStatisticsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getTemplate(args, optionsOrCb, cb) {
        const command = new GetTemplateCommand_1.GetTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listConfigurationSets(args, optionsOrCb, cb) {
        const command = new ListConfigurationSetsCommand_1.ListConfigurationSetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCustomVerificationEmailTemplates(args, optionsOrCb, cb) {
        const command = new ListCustomVerificationEmailTemplatesCommand_1.ListCustomVerificationEmailTemplatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listIdentities(args, optionsOrCb, cb) {
        const command = new ListIdentitiesCommand_1.ListIdentitiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listIdentityPolicies(args, optionsOrCb, cb) {
        const command = new ListIdentityPoliciesCommand_1.ListIdentityPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listReceiptFilters(args, optionsOrCb, cb) {
        const command = new ListReceiptFiltersCommand_1.ListReceiptFiltersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listReceiptRuleSets(args, optionsOrCb, cb) {
        const command = new ListReceiptRuleSetsCommand_1.ListReceiptRuleSetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTemplates(args, optionsOrCb, cb) {
        const command = new ListTemplatesCommand_1.ListTemplatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listVerifiedEmailAddresses(args, optionsOrCb, cb) {
        const command = new ListVerifiedEmailAddressesCommand_1.ListVerifiedEmailAddressesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putConfigurationSetDeliveryOptions(args, optionsOrCb, cb) {
        const command = new PutConfigurationSetDeliveryOptionsCommand_1.PutConfigurationSetDeliveryOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putIdentityPolicy(args, optionsOrCb, cb) {
        const command = new PutIdentityPolicyCommand_1.PutIdentityPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      reorderReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new ReorderReceiptRuleSetCommand_1.ReorderReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendBounce(args, optionsOrCb, cb) {
        const command = new SendBounceCommand_1.SendBounceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendBulkTemplatedEmail(args, optionsOrCb, cb) {
        const command = new SendBulkTemplatedEmailCommand_1.SendBulkTemplatedEmailCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendCustomVerificationEmail(args, optionsOrCb, cb) {
        const command = new SendCustomVerificationEmailCommand_1.SendCustomVerificationEmailCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendEmail(args, optionsOrCb, cb) {
        const command = new SendEmailCommand_1.SendEmailCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendRawEmail(args, optionsOrCb, cb) {
        const command = new SendRawEmailCommand_1.SendRawEmailCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendTemplatedEmail(args, optionsOrCb, cb) {
        const command = new SendTemplatedEmailCommand_1.SendTemplatedEmailCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setActiveReceiptRuleSet(args, optionsOrCb, cb) {
        const command = new SetActiveReceiptRuleSetCommand_1.SetActiveReceiptRuleSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setIdentityDkimEnabled(args, optionsOrCb, cb) {
        const command = new SetIdentityDkimEnabledCommand_1.SetIdentityDkimEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setIdentityFeedbackForwardingEnabled(args, optionsOrCb, cb) {
        const command = new SetIdentityFeedbackForwardingEnabledCommand_1.SetIdentityFeedbackForwardingEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setIdentityHeadersInNotificationsEnabled(args, optionsOrCb, cb) {
        const command = new SetIdentityHeadersInNotificationsEnabledCommand_1.SetIdentityHeadersInNotificationsEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setIdentityMailFromDomain(args, optionsOrCb, cb) {
        const command = new SetIdentityMailFromDomainCommand_1.SetIdentityMailFromDomainCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setIdentityNotificationTopic(args, optionsOrCb, cb) {
        const command = new SetIdentityNotificationTopicCommand_1.SetIdentityNotificationTopicCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setReceiptRulePosition(args, optionsOrCb, cb) {
        const command = new SetReceiptRulePositionCommand_1.SetReceiptRulePositionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      testRenderTemplate(args, optionsOrCb, cb) {
        const command = new TestRenderTemplateCommand_1.TestRenderTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAccountSendingEnabled(args, optionsOrCb, cb) {
        const command = new UpdateAccountSendingEnabledCommand_1.UpdateAccountSendingEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateConfigurationSetEventDestination(args, optionsOrCb, cb) {
        const command = new UpdateConfigurationSetEventDestinationCommand_1.UpdateConfigurationSetEventDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateConfigurationSetReputationMetricsEnabled(args, optionsOrCb, cb) {
        const command = new UpdateConfigurationSetReputationMetricsEnabledCommand_1.UpdateConfigurationSetReputationMetricsEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateConfigurationSetSendingEnabled(args, optionsOrCb, cb) {
        const command = new UpdateConfigurationSetSendingEnabledCommand_1.UpdateConfigurationSetSendingEnabledCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateConfigurationSetTrackingOptions(args, optionsOrCb, cb) {
        const command = new UpdateConfigurationSetTrackingOptionsCommand_1.UpdateConfigurationSetTrackingOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateCustomVerificationEmailTemplate(args, optionsOrCb, cb) {
        const command = new UpdateCustomVerificationEmailTemplateCommand_1.UpdateCustomVerificationEmailTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateReceiptRule(args, optionsOrCb, cb) {
        const command = new UpdateReceiptRuleCommand_1.UpdateReceiptRuleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTemplate(args, optionsOrCb, cb) {
        const command = new UpdateTemplateCommand_1.UpdateTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verifyDomainDkim(args, optionsOrCb, cb) {
        const command = new VerifyDomainDkimCommand_1.VerifyDomainDkimCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verifyDomainIdentity(args, optionsOrCb, cb) {
        const command = new VerifyDomainIdentityCommand_1.VerifyDomainIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verifyEmailAddress(args, optionsOrCb, cb) {
        const command = new VerifyEmailAddressCommand_1.VerifyEmailAddressCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      verifyEmailIdentity(args, optionsOrCb, cb) {
        const command = new VerifyEmailIdentityCommand_1.VerifyEmailIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SES = SES;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CloneReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_CreateConfigurationSetCommand(), exports2);
    tslib_1.__exportStar(require_CreateConfigurationSetEventDestinationCommand(), exports2);
    tslib_1.__exportStar(require_CreateConfigurationSetTrackingOptionsCommand(), exports2);
    tslib_1.__exportStar(require_CreateCustomVerificationEmailTemplateCommand(), exports2);
    tslib_1.__exportStar(require_CreateReceiptFilterCommand(), exports2);
    tslib_1.__exportStar(require_CreateReceiptRuleCommand(), exports2);
    tslib_1.__exportStar(require_CreateReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_CreateTemplateCommand(), exports2);
    tslib_1.__exportStar(require_DeleteConfigurationSetCommand(), exports2);
    tslib_1.__exportStar(require_DeleteConfigurationSetEventDestinationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteConfigurationSetTrackingOptionsCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCustomVerificationEmailTemplateCommand(), exports2);
    tslib_1.__exportStar(require_DeleteIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DeleteIdentityPolicyCommand(), exports2);
    tslib_1.__exportStar(require_DeleteReceiptFilterCommand(), exports2);
    tslib_1.__exportStar(require_DeleteReceiptRuleCommand(), exports2);
    tslib_1.__exportStar(require_DeleteReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_DeleteTemplateCommand(), exports2);
    tslib_1.__exportStar(require_DeleteVerifiedEmailAddressCommand(), exports2);
    tslib_1.__exportStar(require_DescribeActiveReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_DescribeConfigurationSetCommand(), exports2);
    tslib_1.__exportStar(require_DescribeReceiptRuleCommand(), exports2);
    tslib_1.__exportStar(require_DescribeReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_GetAccountSendingEnabledCommand(), exports2);
    tslib_1.__exportStar(require_GetCustomVerificationEmailTemplateCommand(), exports2);
    tslib_1.__exportStar(require_GetIdentityDkimAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetIdentityMailFromDomainAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetIdentityNotificationAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetIdentityPoliciesCommand(), exports2);
    tslib_1.__exportStar(require_GetIdentityVerificationAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetSendQuotaCommand(), exports2);
    tslib_1.__exportStar(require_GetSendStatisticsCommand(), exports2);
    tslib_1.__exportStar(require_GetTemplateCommand(), exports2);
    tslib_1.__exportStar(require_ListConfigurationSetsCommand(), exports2);
    tslib_1.__exportStar(require_ListCustomVerificationEmailTemplatesCommand(), exports2);
    tslib_1.__exportStar(require_ListIdentitiesCommand(), exports2);
    tslib_1.__exportStar(require_ListIdentityPoliciesCommand(), exports2);
    tslib_1.__exportStar(require_ListReceiptFiltersCommand(), exports2);
    tslib_1.__exportStar(require_ListReceiptRuleSetsCommand(), exports2);
    tslib_1.__exportStar(require_ListTemplatesCommand(), exports2);
    tslib_1.__exportStar(require_ListVerifiedEmailAddressesCommand(), exports2);
    tslib_1.__exportStar(require_PutConfigurationSetDeliveryOptionsCommand(), exports2);
    tslib_1.__exportStar(require_PutIdentityPolicyCommand(), exports2);
    tslib_1.__exportStar(require_ReorderReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_SendBounceCommand(), exports2);
    tslib_1.__exportStar(require_SendBulkTemplatedEmailCommand(), exports2);
    tslib_1.__exportStar(require_SendCustomVerificationEmailCommand(), exports2);
    tslib_1.__exportStar(require_SendEmailCommand(), exports2);
    tslib_1.__exportStar(require_SendRawEmailCommand(), exports2);
    tslib_1.__exportStar(require_SendTemplatedEmailCommand(), exports2);
    tslib_1.__exportStar(require_SetActiveReceiptRuleSetCommand(), exports2);
    tslib_1.__exportStar(require_SetIdentityDkimEnabledCommand(), exports2);
    tslib_1.__exportStar(require_SetIdentityFeedbackForwardingEnabledCommand(), exports2);
    tslib_1.__exportStar(require_SetIdentityHeadersInNotificationsEnabledCommand(), exports2);
    tslib_1.__exportStar(require_SetIdentityMailFromDomainCommand(), exports2);
    tslib_1.__exportStar(require_SetIdentityNotificationTopicCommand(), exports2);
    tslib_1.__exportStar(require_SetReceiptRulePositionCommand(), exports2);
    tslib_1.__exportStar(require_TestRenderTemplateCommand(), exports2);
    tslib_1.__exportStar(require_UpdateAccountSendingEnabledCommand(), exports2);
    tslib_1.__exportStar(require_UpdateConfigurationSetEventDestinationCommand(), exports2);
    tslib_1.__exportStar(require_UpdateConfigurationSetReputationMetricsEnabledCommand(), exports2);
    tslib_1.__exportStar(require_UpdateConfigurationSetSendingEnabledCommand(), exports2);
    tslib_1.__exportStar(require_UpdateConfigurationSetTrackingOptionsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateCustomVerificationEmailTemplateCommand(), exports2);
    tslib_1.__exportStar(require_UpdateReceiptRuleCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTemplateCommand(), exports2);
    tslib_1.__exportStar(require_VerifyDomainDkimCommand(), exports2);
    tslib_1.__exportStar(require_VerifyDomainIdentityCommand(), exports2);
    tslib_1.__exportStar(require_VerifyEmailAddressCommand(), exports2);
    tslib_1.__exportStar(require_VerifyEmailIdentityCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/pagination/ListCustomVerificationEmailTemplatesPaginator.js
var require_ListCustomVerificationEmailTemplatesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/pagination/ListCustomVerificationEmailTemplatesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListCustomVerificationEmailTemplates = void 0;
    var ListCustomVerificationEmailTemplatesCommand_1 = require_ListCustomVerificationEmailTemplatesCommand();
    var SES_1 = require_SES();
    var SESClient_1 = require_SESClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCustomVerificationEmailTemplatesCommand_1.ListCustomVerificationEmailTemplatesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listCustomVerificationEmailTemplates(input, ...args);
    };
    async function* paginateListCustomVerificationEmailTemplates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SES_1.SES) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SESClient_1.SESClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SES | SESClient");
        }
        yield page;
        token = page.NextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports2.paginateListCustomVerificationEmailTemplates = paginateListCustomVerificationEmailTemplates;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/pagination/ListIdentitiesPaginator.js
var require_ListIdentitiesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/pagination/ListIdentitiesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListIdentities = void 0;
    var ListIdentitiesCommand_1 = require_ListIdentitiesCommand();
    var SES_1 = require_SES();
    var SESClient_1 = require_SESClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListIdentitiesCommand_1.ListIdentitiesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listIdentities(input, ...args);
    };
    async function* paginateListIdentities(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof SES_1.SES) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SESClient_1.SESClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SES | SESClient");
        }
        yield page;
        token = page.NextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports2.paginateListIdentities = paginateListIdentities;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_ListCustomVerificationEmailTemplatesPaginator(), exports2);
    tslib_1.__exportStar(require_ListIdentitiesPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Request was aborted"
        }))}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Waiter has timed out"
        }))}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await sleep_1.sleep(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate2(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = __spreadValues(__spreadValues({}, waiter_1.waiterServiceDefaults), options);
      utils_1.validateWaiterOptions(params);
      const exitConditions = [poller_1.runPolling(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/waiters/waitForIdentityExists.js
var require_waitForIdentityExists = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/waiters/waitForIdentityExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilIdentityExists = exports2.waitForIdentityExists = void 0;
    var util_waiter_1 = require_dist_cjs43();
    var GetIdentityVerificationAttributesCommand_1 = require_GetIdentityVerificationAttributesCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetIdentityVerificationAttributesCommand_1.GetIdentityVerificationAttributesCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const objectProjection_2 = Object.values(result.VerificationAttributes).map((element_1) => {
              return element_1.VerificationStatus;
            });
            return objectProjection_2;
          };
          let allStringEq_4 = returnComparator().length > 0;
          for (const element_3 of returnComparator()) {
            allStringEq_4 = allStringEq_4 && element_3 == "Success";
          }
          if (allStringEq_4) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForIdentityExists = async (params, input) => {
      const serviceDefaults = { minDelay: 3, maxDelay: 120 };
      return util_waiter_1.createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports2.waitForIdentityExists = waitForIdentityExists;
    var waitUntilIdentityExists = async (params, input) => {
      const serviceDefaults = { minDelay: 3, maxDelay: 120 };
      const result = await util_waiter_1.createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return util_waiter_1.checkExceptions(result);
    };
    exports2.waitUntilIdentityExists = waitUntilIdentityExists;
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForIdentityExists(), exports2);
  }
});

// node_modules/@aws-sdk/client-ses/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/client-ses/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SESServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SES(), exports2);
    tslib_1.__exportStar(require_SESClient(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    var SESServiceException_1 = require_SESServiceException();
    Object.defineProperty(exports2, "SESServiceException", { enumerable: true, get: function() {
      return SESServiceException_1.SESServiceException;
    } });
  }
});

// lambda/asaiWorld/index.ts
var import_client_ses = __toESM(require_dist_cjs44());
exports.handler = async function(event) {
  const sesClient = new import_client_ses.SESClient({ region: "ap-northeast-1" });
  const params = {
    Source: "info@my-theme.site",
    Destination: { ToAddresses: ["baseballboy1025@gmail.com"] },
    Message: {
      Subject: { Data: "CDK\u3067\u4F5C\u3063\u305F\u3084\u3064" },
      Body: { Text: { Data: "CDK\u3067\u4F5C\u3063\u305F\u3084\u3064\u306E\u672C\u6587" } }
    }
  };
  const command = new import_client_ses.SendEmailCommand(params);
  const sesClientSend = await sesClient.send(command);
  return {};
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
